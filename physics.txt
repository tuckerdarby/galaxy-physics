//==================================================================================================
// 
// Generated Map Script
// 
// Name:   -Titan Arena-
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
timer[15] gv_multikillTimer;
bool[13] gv_weaponsChangesMade;
text[13] gv_text;
bool[13] gv_weaponsShowing;
int gv_cancel;
bool[13] gv_talentsShowing;
int[15] gv_talentsActual;
bool[13] gv_skinsShowing;
int[14] gv_skinsCurrent;
text[11] gv_tips;
int gv_tipsCounter;
unitgroup gv_sewersGroup;
bool gv_extraTime;
bool gv_firstBlood;
revealer[13] gv_revealer;
int gv_map;
region gv_mapRegion;
fixed gv_fallHeight;
bool gv_gameStarted;
bool gv_mapVoted;
bool gv_gameEnded;
int gv_talentsDialog;
int gv_gadgetsDialog;
int[13] gv_gadgetsButtons;
int gv_scoreDialog;
int[3] gv_scoreFlagPoints;
int[3] gv_scoreFlagCaptured;
int gv_scoreGameTimeDialog;
int gv_scoreGameSeconds;
int gv_scoreGameMinutes;
int gv_notificationDialog;
int gv_notificationImage;
int gv_menuDialog;
int gv_menuWeapons;
int gv_menuTalents;
int gv_menuSkins;
int gv_menu2Dialog;
int gv_statsDialog;
int gv_statsFlagDialog;
int[13] gv_statsNames;
int[13] gv_statsKillsDeaths;
int[13] gv_statsScore;
int[13] gv_statsFlags;
int[13] gv_creditsMoney;
unit[13] gv_playerUnits;
int[13] gv_playerWeapon;
int[13] gv_playerGlobalsWins;
int[13] gv_playerGlobalsLosses;
int[13] gv_playerGlobalsKills;
int[13] gv_playerGlobalsDeaths;
int[13] gv_playerGlobalsScore;
int[13] gv_playerKills;
int[13] gv_playerSpree;
int[13] gv_playerMultikills;
int[13] gv_playerFlags;
int[13] gv_playerDeaths;
int[13] gv_playerScore;
int[13] gv_playerCredits;
int[13] gv_playerBounty;
int[13] gv_playerDeathTimer;
unit[3] gv_teamFlags;
actor[3] gv_teamFlagModels;
unit[3] gv_teamFlagCarrier;
bool[3] gv_teamFlagActive;
bool[3] gv_teamFlagPicked;
int[3] gv_teamScore;
int[15] gv_textTags;
int[13] gv_itemsBarrier;
int[13] gv_itemsGrenade;
int[13] gv_itemsCamDrone;
int[13] gv_itemsMedKit;
int[13] gv_itemsShield;
int[13] gv_itemsRocketPack;
int gv_mapDialog;
int[4] gv_mapVotes;
int[4] gv_mapCount;
int[4] gv_mapButtons;
bool[13] gv_mapDone;
int[13] gv_talentsButtons;
int[13] gv_talentsImages;
int[4] gv_talentsText1;
int[13] gv_talentsCurrent;
text[13] gv_talentsSavedText;
int gv_interfaceDialog;
int gv_interfaceDialogTitle;
int[7] gv_interfaceDialogTopButtons;
int[13] gv_interfaceDialogCurrent;
int gv_interfaceBottomText;
bool[13] gv_interfaceWeaponsSavedAddon;
text[13] gv_interfaceWeaponsSavedText;
int gv_interfaceWeaponsKillsImage;
int gv_interfaceWeaponsKillsText;
int gv_interfaceWeaponsMain;
int gv_interfaceWeaponsAddonImage;
int gv_interfaceWeaponsAddonButton;
int[13] gv_interfaceWeaponsButtons;
int[13] gv_interfaceWeaponsImages;
int[13] gv_interfaceWeaponsCurrent;
int gv_interfaceWeaponsWeaponsText;
int gv_interfaceWeaponsAddOnsText;
bool[15] gv_interfaceShopShowing;
int[3] gv_interfaceAddOnsButtons;
int[3] gv_interfaceAddOnsIcons;
int[13] gv_interfaceAddOnsCurrent;
int gv_menuStreakButton;
int[7] gv_menuTabDialogs;
int gv_menuShopButton;
int gv_menuPlayerbutton;
int gv_menuStreaksDialog;
int gv_menuArmoryDialog;
int gv_menuWeaponryDialog;
int gv_menuMerchantDialog;
int gv_menuPlayerDialog;
int[14] gv_skinsButtons;
int[14] gv_skinsImages;
int[9] gv_skinsText;
int[4][6] gv_streaksButtons;
int[4][6] gv_streaksImages;
int[9] gv_streaksText;
int[15][4] gv_streaksCurrent;
int[15][4] gv_streaksActual;
int[15] gv_playerSkin;
int gv_streakLowDialog;
int gv_streakMidDialog;
int gv_streakHighDialog;
int[6] gv_streakButton;
int[6] gv_steakImage;
int[4] gv_streakImage;
int[4] gv_streakText;
string[4][6] gv_kSName;
string[4][6] gv_kSImage;
int[3] gv_overflagDialog2;
int[3][3] gv_overflagHeader2;
int[31] gv_rankLevels;
int gv_rankDialog;
int gv_rankTitle;
int[9] gv_rankExperience;
string[9] gv_rankAchievement;
int[9] gv_rankBar;
int gv_rankAmount;
int[9] gv_totalExperience;
int[11] gv_menuItemButton;
int[15] gv_playerMinerals;
int[15][6] gv_playerItems;
int gv_merchantMinerals;
string[7] gv_itemBehaviors;
string[7] gv_itemChargeEffects;
int gv_time;
int gv_timeLeft;
unitgroup gv_bindSource;
unitgroup gv_bindTarget;
string[8][3][3] gv_abilityLoadouts;
int gv_powerupTimer;
point[18] gv_powerups;
int gv_barrels;
int[15][4][4] gv_streaksEarned;
string[4][4] gv_streaksItemTypes;

void InitGlobals () {
    int init_i;
    int init_j;

    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_multikillTimer[init_i] = TimerCreate();
    }
    gv_cancel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_skinsCurrent[init_i] = 1;
    }
    gv_tipsCounter = 10;
    gv_sewersGroup = UnitGroupEmpty();
    gv_map = 1;
    gv_talentsDialog = c_invalidDialogId;
    gv_gadgetsDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_gadgetsButtons[init_i] = c_invalidDialogControlId;
    }
    gv_scoreDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_scoreFlagPoints[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_scoreFlagCaptured[init_i] = c_invalidDialogControlId;
    }
    gv_scoreGameTimeDialog = c_invalidDialogControlId;
    gv_scoreGameMinutes = 15;
    gv_notificationDialog = c_invalidDialogId;
    gv_notificationImage = c_invalidDialogControlId;
    gv_menuDialog = c_invalidDialogId;
    gv_menuWeapons = c_invalidDialogControlId;
    gv_menuTalents = c_invalidDialogControlId;
    gv_menuSkins = c_invalidDialogControlId;
    gv_menu2Dialog = c_invalidDialogId;
    gv_statsDialog = c_invalidDialogId;
    gv_statsFlagDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_statsNames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_statsKillsDeaths[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_statsScore[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_statsFlags[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_creditsMoney[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_textTags[init_i] = c_textTagNone;
    }
    gv_mapDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_mapVotes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_mapButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_talentsButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_talentsImages[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_talentsText1[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_talentsCurrent[init_i] = 1;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_talentsSavedText[init_i] = StringExternal("Param/Value/E565CBB3");
    }
    gv_interfaceDialog = c_invalidDialogId;
    gv_interfaceDialogTitle = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_interfaceDialogTopButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_interfaceDialogCurrent[init_i] = 2;
    }
    gv_interfaceBottomText = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_interfaceWeaponsSavedText[init_i] = StringExternal("Param/Value/10CFD6D0");
    }
    gv_interfaceWeaponsKillsImage = c_invalidDialogControlId;
    gv_interfaceWeaponsKillsText = c_invalidDialogControlId;
    gv_interfaceWeaponsMain = c_invalidDialogControlId;
    gv_interfaceWeaponsAddonImage = c_invalidDialogControlId;
    gv_interfaceWeaponsAddonButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_interfaceWeaponsButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_interfaceWeaponsImages[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_interfaceWeaponsCurrent[init_i] = 1;
    }
    gv_interfaceWeaponsWeaponsText = c_invalidDialogControlId;
    gv_interfaceWeaponsAddOnsText = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_interfaceAddOnsButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_interfaceAddOnsIcons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_interfaceAddOnsCurrent[init_i] = 1;
    }
    gv_menuStreakButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        gv_menuTabDialogs[init_i] = c_invalidDialogId;
    }
    gv_menuShopButton = c_invalidDialogControlId;
    gv_menuPlayerbutton = c_invalidDialogControlId;
    gv_menuStreaksDialog = c_invalidDialogId;
    gv_menuArmoryDialog = c_invalidDialogId;
    gv_menuWeaponryDialog = c_invalidDialogId;
    gv_menuMerchantDialog = c_invalidDialogId;
    gv_menuPlayerDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_skinsButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 13; init_i += 1) {
        gv_skinsImages[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_skinsText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_streaksButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_streaksImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_streaksText[init_i] = c_invalidDialogControlId;
    }
    gv_streakLowDialog = c_invalidDialogId;
    gv_streakMidDialog = c_invalidDialogId;
    gv_streakHighDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_streakButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_steakImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_streakImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_streakText[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 5; init_j += 1) {
            gv_kSName[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_overflagDialog2[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_overflagHeader2[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_rankDialog = c_invalidDialogId;
    gv_rankTitle = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_rankAchievement[init_i] = "";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_rankBar[init_i] = c_invalidDialogControlId;
    }
    gv_rankAmount = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_menuItemButton[init_i] = c_invalidDialogControlId;
    }
    gv_merchantMinerals = c_invalidDialogControlId;
    gv_time = 30;
    gv_timeLeft = c_invalidDialogControlId;
    gv_bindSource = UnitGroupEmpty();
    gv_bindTarget = UnitGroupEmpty();
    gv_powerupTimer = 30;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_GameStart ();
void gf_GameEnd (int lp_winners, int lp_loosers);
void gf_TipsDisplay ();
void gf_WeaponsCheck (int lp_player);
void gf_TalentsCheck (int lp_player);
void gf_CharacterCheck (int lp_player);
void gf_StreaksCheck (int lp_player);
void gf_ItemsCheck (int lp_player);
bool gf_SpawnAreaCheck (int lp_player);
unit gf_SpawnHero (int lp_player, string lp_hero, point lp_point);
unit gf_SpawnObject (int lp_player, string lp_object, point lp_point);
unit gf_SpawnObjectHeight (int lp_player, string lp_object, point lp_point, fixed lp_height);
void gf_FlagoffMap (unit lp_u);
void gf_Ranks ();
void gf_UpdateExp (int lp_player, int lp_experience);
void gf_RankSetLevels ();
int gf_RankGetBar (int lp_experience);
text gf_RankGetTitle (int lp_experience);
int gf_RankGetCur (int lp_experience);
text gf_RankGetExp (int lp_experience);
string gf_RankGetIcon (int lp_experience);
void gf_DialogUIInterface ();
void gf_DialogsMapVoting ();
void gf_DialogsMenu ();
void gf_DialogsInterface ();
void gf_InterfaceWeaponry (int lp_player);
void gf_InterfaceArmory (int lp_player);
void gf_InterfaceKillStreaks (int lp_player);
void gf_InterfaceMerchant (int lp_player);
void gf_DialogsScore ();
void gf_DialogsStats ();
void gf_UpdateStats ();
void gf_UpdateCredits (int lp_player, int lp_money);
void gf_CreateFlags ();
void gf_PowerupCreate (point lp_point);
bool gf_HeroNearbyCheck (point lp_p, fixed lp_radius);
void gf_LowSteakEarned (int lp_player);
void gf_MidStreakEarned (int lp_player);
void gf_ScannerSweepUsed (int lp_player);
void gf_SupplyDropUsed (int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_initphysics;
trigger gt_LoopTrigger;
trigger gt_MeleeInitialization;
trigger gt_PlayerSelection;
trigger gt_FlagCarrierDies;
trigger gt_PlayerDies;
trigger gt_Suicide;
trigger gt_MultikillTimerExpires;
trigger gt_GameTimer;
trigger gt_RespawnTimer;
trigger gt_TipsInit;
trigger gt_Economics;
trigger gt_EnterReweaponTeam1;
trigger gt_EnterReweaponTeam2;
trigger gt_LeaversTeamLeft;
trigger gt_SewersSlowingWater;
trigger gt_Initks;
trigger gt_initOverflagUI2;
trigger gt_InitItems;
trigger gt_ShopItemPurchased;
trigger gt_Timer;
trigger gt_MapVote;
trigger gt_MenuTabBetween;
trigger gt_WeaponsChange;
trigger gt_WeaponsActivate;
trigger gt_WeaponsActivateF1;
trigger gt_AddOnsChange;
trigger gt_AddOnsUnequip;
trigger gt_InterfaceCancel;
trigger gt_InterfaceCancelEscape;
trigger gt_TalentsChange;
trigger gt_ShopActivate;
trigger gt_ShopActivateF2;
trigger gt_SkinsChange;
trigger gt_StreaksChange;
trigger gt_Tab;
trigger gt_Untab;
trigger gt_StealFlagTeam1;
trigger gt_StealFlagTeam2;
trigger gt_ScoreTeam1;
trigger gt_ScoreTeam2;
trigger gt_ReturnFlagTeam1;
trigger gt_ReturnFlagTeam2;
trigger gt_InitOverheadFlags;
trigger gt_TimedDeath3;
trigger gt_jump12;
trigger gt_jump8;
trigger gt_SmallExplosion;
trigger gt_FragExplosion;
trigger gt_grenade3;
trigger gt_toxic3;
trigger gt_toxic4;
trigger gt_toxic5;
trigger gt_desecrate5;
trigger gt_desecrate9;
trigger gt_desecrate10;
trigger gt_HellfireScatter;
trigger gt_ShrapExplosion;
trigger gt_desecrate6;
trigger gt_desecrate7;
trigger gt_MortarExplosion;
trigger gt_ShardExplosion;
trigger gt_desecrate8;
trigger gt_railgun27;
trigger gt_railgun29;
trigger gt_railgun30;
trigger gt_railgun12;
trigger gt_railgun13;
trigger gt_railgun14;
trigger gt_railgun28;
trigger gt_railgun31;
trigger gt_dispersion4;
trigger gt_dispersion5;
trigger gt_dispersion6;
trigger gt_jump4;
trigger gt_jump5;
trigger gt_jump6;
trigger gt_CreateBarrier;
trigger gt_PoisonTintCreate;
trigger gt_PoisonTintCreatePurple;
trigger gt_PoisonTintRemove;
trigger gt_PoisonTintRemovePurple;
trigger gt_DamageTags;
trigger gt_GadgetsBuy;
trigger gt_PowerupsInit;
trigger gt_PowerupsPeriodic;
trigger gt_PowerupsGrenade;
trigger gt_BarrelsPeriodic;
trigger gt_SewersBarrelDeath;
trigger gt_ExplosivesBarrelDeath;
trigger gt_RemoveMedkit;
trigger gt_Impact;
trigger gt_Pause;
trigger gt_ScannerSweep;
trigger gt_ScannerSpawn;
trigger gt_SupplyDropSuccessful;
trigger gt_SupplyDrop;
trigger gt_railgun32;
trigger gt_AutoTurretCreated;
trigger gt_PredatorAI;
trigger gt_PredatorSpawn;
trigger gt_GuardiansGrasp;
trigger gt_GuardianSpawn;
trigger gt_OrderNapalmStrike;
trigger gt_DropNapalm;
trigger gt_NapalmOver;
trigger gt_KineticImpact;

//--------------------------------------------------------------------------------------------------
// Custom Script: Debug
//--------------------------------------------------------------------------------------------------
void PrintMessage(string message)
{
    TriggerDebugOutput(1, StringToText(message), true);
}
void PrintValue(string message, fixed value)
{
    text msg;
    msg = StringToText(message) + FixedToText(value, c_fixedPrecisionAny);
    TriggerDebugOutput(1, msg, true);
}
void PrintValues2(string message, fixed value,fixed value2)
{
    text msg;
    msg = StringToText(message) + FixedToText(value, c_fixedPrecisionAny) + StringToText(", ") + FixedToText(value2, c_fixedPrecisionAny);
    TriggerDebugOutput(1, msg, true);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Archive
//--------------------------------------------------------------------------------------------------
struct talent
{
    //Percentage based bonuses
    fixed radius; // on projectiles
    fixed damage;
    fixed speed;
    fixed timestep; // irrelevant / bad idea? 
    fixed aoe; // for explosives
    fixed push; // knockback
    fixed range; // max range, for arcing projectiles mostly.
};
talent[16] talents;
typedef structref<talent> talentref;
struct vector
{
    fixed x;
    fixed y;
    fixed z;
};
typedef structref<vector> vectorref;
fixed gravaccel = 0.1;
unitgroup objectgroup = UnitGroupEmpty();
unitgroup activegroup = UnitGroupEmpty();
unitgroup projectilegroup = UnitGroupEmpty();
void blankBounce(int i);
void blankBounce(int i)
{}
void blankCollide(int i, int t);
void blankCollide(int i, int t)
{}
struct bounces
{
    bool landable;
    bool bounceable;
    fixed damage;
    int timesbounced;
    fixed restitution;
    fixed friction;
    fixed radius; 
    funcref<blankBounce> bouncefunc;
};
struct collides
{
    bool collideable;
    bool nonactivating;
    fixed damage;
    fixed explodedamage;
    fixed force;
    funcref<blankCollide> collidefunc;
    fixed hitradius;
};
    
struct object
{
    unit u;
    int owner;
    bool active;
    bool inuse;
    bool gravity;
    bool activateable;
    fixed x;
    fixed y;
    fixed z;
    fixed vx;
    fixed vy;
    fixed vz;
    fixed mass;
    fixed centerz; //To be Used once physix improves.
    fixed timestep;
};
typedef structref<object> objectref;
object[256] objects;
bounces[256] bounce;
collides[256] collide;
void InitObjects()
{
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Particles
//--------------------------------------------------------------------------------------------------
int NewObject(unit u)
{
   // int objects = UnitGroupCount(objectgroup);
    int i = 1;
    fixed height = UnitGetHeight(u);//nvm-> A standard to set new objects to a height of 1.
    point loc = UnitGetPosition(u);
    if (UnitGroupHasUnit(objectgroup, u))
    {
        return FixedToInt(UnitGetCustomValue(u,0));
    }
    while (objects[i].inuse == true && i < 128)
    {
        i = i + 1;
    }
    UnitSetCustomValue(u,0,i);
    objects[i].inuse = true;
    objects[i].owner = UnitGetOwner(u);
    UnitSetHeight(u,0,0);
    UnitSetState(u, c_unitStateIgnoreTerrainZ, true);
    objects[i].vx = 0;
    objects[i].vy = 0;
    objects[i].vz = 0;
    objects[i].x = PointGetX(loc);
    objects[i].y = PointGetY(loc);
    objects[i].z = WorldHeight(c_heightMapGround, loc);// + height;
    UnitSetHeight(u, objects[i].z, 0);
    objects[i].activateable = true;
    objects[i].mass = 1;
    objects[i].timestep = 1;
    objects[i].active = true;
    objects[i].u = u;
    collide[i].collidefunc = blankCollide;
    bounce[i].bouncefunc = blankBounce;
    UnitGroupAdd(activegroup,u);
    UnitGroupAdd(objectgroup,u);
    return i;
}
void RemoveObject(int i, string type)
{
    objects[i].inuse = false;
    objects[i].active = false;
    UnitGroupRemove(objectgroup,objects[i].u);
    UnitGroupRemove(activegroup,objects[i].u);
    if (type == "" || type == " ")
    {
        //Nothing
    }
    else if (type == "kill")
    {
        UnitKill(objects[i].u);
    }
    else if (type == "remove")
    {
        UnitRemove(objects[i].u);
    }
}
void ActivateObject(int i)
{
    point loc = UnitGetPosition(objects[i].u);
    unit u = objects[i].u;
    if (objects[i].activateable == false || objects[i].active == true)
    {
        return;
    }
    objects[i].active = true;
    objects[i].x = PointGetX(loc);
    objects[i].y = PointGetY(loc);
    objects[i].z = WorldHeight(c_heightMapGround, loc);
    objects[i].vx = 0;
    objects[i].vy = 0;
    objects[i].vz = 0;
    UnitSetState(u, c_unitStateIgnoreTerrainZ, true);
    CatalogFieldValueSet(c_gameCatalogUnit, "Raynor01","Collide[" + IntToString(1) + "]", UnitGetOwner(u), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "Raynor01","Collide[" + IntToString(8) + "]", UnitGetOwner(u), "0");
    UnitSetState(u, c_unitStateMoveSuppressed, false);
    UnitSetHeight(u,objects[i].z,0);
    UnitGroupAdd(activegroup,u);
}
void DeactivateObject(int i)
{
    unit u = objects[i].u;
    objects[i].active = false;
    UnitSetState(u, c_unitStateIgnoreTerrainZ, false);
    CatalogFieldValueSet(c_gameCatalogUnit, "Raynor01","Collide[" + IntToString(1) + "]", UnitGetOwner(u), "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "Raynor01","Collide[" + IntToString(8) + "]", UnitGetOwner(u), "1");
    UnitSetState(u, c_unitStateMoveSuppressed, true);
    objects[i].z = 0;
    UnitSetHeight(u, 0, 0.01);
    UnitGroupRemove(activegroup,u);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: General
//--------------------------------------------------------------------------------------------------
fixed ObjectGetHeight(int i)
{
    unit u;
    u = objects[i].u;
    if (objects[i].active == true)
    {
        return objects[i].z;
    }
    else
    {
        return WorldHeight(c_heightMapGround, UnitGetPosition(u)); // 0.5 Buffer? 
    }
}
void ObjectUpdateLoc(int i)
{
    if (!objects[i].active)
    {
        objects[i].x = PointGetX(UnitGetPosition(objects[i].u));
        objects[i].y = PointGetY(UnitGetPosition(objects[i].u));
        objects[i].z = WorldHeight(c_heightMapGround, UnitGetPosition(objects[i].u));
    }
}
fixed Dot6(fixed a1, fixed b1, fixed c1, fixed a2, fixed b2, fixed c2)
{
    return a1*a2+b1*b2+c1*c2;
}
fixed DistanceObjects(int a, int b)
{
    fixed dx;
    fixed dy;
    fixed dz;
    fixed d;
    //ObjectUpdateLoc(a);
    //ObjectUpdateLoc(b);
    dx = objects[a].x - objects[b].x;
    dy = objects[a].y - objects[b].y;
    dz = (ObjectGetHeight(a) - ObjectGetHeight(b));
    d = SquareRoot((dx*dx)+(dy*dy)+(dz*dz));
    return d;
       
}
fixed DistanceObjectToPoint(int ui, point p)
{
    fixed dz = objects[ui].z - WorldHeight(c_heightMapGround,p);
    fixed dx = objects[ui].x - PointGetX(p);
    fixed dy = objects[ui].y - PointGetY(p);
    return SquareRoot(dx*dx+dy*dy+dz*dz);
}
fixed Distance3(fixed x, fixed y, fixed z)
{
    return SquareRoot(x*x+y*y+z*z);
}
void CreateDamage(int ui, int ti, string effect, fixed extradmg)
{
    int owner = objects[ui].owner;
    unit u = gv_playerUnits[owner];//objects[ui].u;
    unit t = objects[ti].u;
    UnitDamage(u, effect, t, extradmg);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Area Pathing Passable
//--------------------------------------------------------------------------------------------------
bool AreaPathingPassable(point p, fixed radius)
{
    int angle = 0;
    int i = 0;
    bool possible = PointPathingPassable(p);
    fixed x = PointGetX(p);
    fixed y = PointGetY(p);
    while (i < 8 && possible == true)
    {
        if (!PointPathingPassable(Point(x + radius*Cos(angle), y + radius*Sin(angle))))
        {
            possible = false;
        }
        angle += 45;
        i += 1;
    }
    return possible;
}
    

//--------------------------------------------------------------------------------------------------
// Custom Script: Triangle Closest Point
//--------------------------------------------------------------------------------------------------
point GetClosestPointOnTriangle(point a, point b, point c, point u, fixed uz)
{
    fixed ax = PointGetX(a);
    fixed ay = PointGetY(a);
    fixed az = WorldHeight(c_heightMapGround, a);
    fixed bx = PointGetX(b);
    fixed by = PointGetY(b);
    fixed bz = WorldHeight(c_heightMapGround, b);
    fixed cx = PointGetX(c);
    fixed cy = PointGetY(c);
    fixed cz = WorldHeight(c_heightMapGround, c);
    fixed ux = PointGetX(u);
    fixed uy = PointGetY(u);
    fixed[4] ab;
    fixed[4] ac;
    fixed[4] ap;
    fixed[4] bp;
    fixed[4] cp;
    fixed[10] d;
    fixed va;
    fixed vb;
    fixed vc;
    fixed v;
    fixed w;
    fixed denom;
    ab[1] = bx - ax;
    ab[2] = by - ay;
    ab[3] = bz - az;
    ac[1] = cx - ax;
    ac[2] = cy - ay;
    ac[3] = cz - az;
    ap[1] = ux - ax;
    ap[2] = uy - ay;
    ap[3] = uz - az;
    d[1] = Dot6(ab[1], ab[2], ab[3], ap[1], ap[2], ap[3]);
    d[2] = Dot6(ac[1], ac[2], ac[3], ap[1], ap[2], ap[3]);
    if (d[1] <= 0 && d[2] < 0)
    {
        return a;
    }
    bp[1] = ux - bx;
    bp[2] = uy - by;
    bp[3] = uz - bz;
    d[3] = Dot6(ab[1], ab[2], ab[3], bp[1], bp[2], bp[3]);
    d[4] = Dot6(ac[1], ac[2], ac[3], bp[1], bp[2], bp[3]);
    if (d[3] >= 0 && d[4] <= d[3])
    {
        return b;
    }
    vc = (d[1] * d[4]) - (d[3] * d[2]);
    v = d[1] - d[3];
    if (vc <= 0 && d[1] >= 0 && d[3] <= 0) // Region AB
    {
        if (v == 0) //TEMPORARY FIX (or maybe just crash absolver?)
        {
            v = 0.01;
        }
        v = d[1] / v;
        
        ab[1] = ab[1]*v;
        ab[2] = ab[2]*v;
        ab[3] = ab[3]*v;
        ab[1] += ax;
        ab[2] += ay;
        return Point(ab[1],ab[2]);
    }
    cp[1] = ux - cx;
    cp[2] = uy - cy;
    cp[3] = uz - cz;
    d[5] = Dot6(ab[1], ab[2], ab[3], cp[1], cp[2], cp[3]);
    d[6] = Dot6(ac[1],ac[2], ac[3],cp[1],cp[2],cp[3]);
    if (d[6] >= 0 && d[5] <= d[6])
    {
        return c;
    }
    vb = d[5] * d[2] - d[1] * d[6];
    if (vb <= 0 && d[2] >= 0 && d[6] <= 0)
    {
        w = d[2] / (d[2] - d[6]);
        ac[1] = ac[1]*w + ax;
        ac[2] = ac[2]*w + ay;
        return Point(ac[1],ac[2]);
    }
    va = d[3] * d[6] - d[5] * d[4];
    w = ((d[4] - d[3]) + (d[5] - d[6]));
    if (va <= 0 && (d[4] - d[3]) >= 0 && (d[5] - d[6]) >= 0)
    {
        if (w == 0) { w = 0.01;}
        w = (d[4] - d[3]) / w;
        ac[1] = (cx - bx)*w + bx;
        ac[2] = (cy - by)*w + by;
        return Point(ac[1],ac[2]);
    }
    denom = 1 / (va + vb + vc);
    v = vb * denom;
    w = vc * denom;
    ab[1] = (ab[1]*v + ax) + (ac[1]*w);
    ab[2] = (ab[2]*v + ay) + (ac[3]*w);    
    return Point(ab[1],ab[2]);
}
point ObjectCheckTerrainPoint(int ui)
{
    fixed px = objects[ui].x;
    fixed py = objects[ui].y;
    point p = Point(px,py);
    fixed pxd = px - Floor(px);
    fixed pyd = py - Floor(py);
    point pt;
    point a = Point(Floor(px),Floor(py));
    point c = Point(Ceiling(px),Ceiling(py));
    if (pxd > pyd)
    {
         pt = GetClosestPointOnTriangle(Point(Ceiling(px),Floor(py)), a, c,p,objects[ui].z - objects[ui].centerz);
    }
    else
    {
         pt = GetClosestPointOnTriangle(Point(Floor(px),Ceiling(py)), c, a,p,objects[ui].z - objects[ui].centerz);
    }
    return pt;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Normal T
//--------------------------------------------------------------------------------------------------
void GetTriangleNormal(point a, point b, point c, vectorref normal)
{
    fixed ax = PointGetX(a);
    fixed ay = PointGetY(a);
    fixed az = WorldHeight(c_heightMapGround, a);
    fixed bx = PointGetX(b);
    fixed by = PointGetY(b);
    fixed bz = WorldHeight(c_heightMapGround, b);
    fixed cx = PointGetX(c);
    fixed cy = PointGetY(c);
    fixed cz = WorldHeight(c_heightMapGround, c);
    fixed[4] ab;
    fixed[4] ac;
    fixed nx;
    fixed ny;
    fixed nz;
    fixed n;
    int ph = 1;
    fixed normalLength;
    //ab.ac
    ab[1] = bx - ax; //vx
    ab[2] = by - ay; //vy
    ab[3] = bz - az; //vz
    ac[1] = cx - ax; //wx
    ac[2] = cy - ay; //wy
    ac[3] = cz - az; //wz
    nx = (ab[2]*ac[3])-(ab[3]*ac[2]);
    ny = (ab[3]*ac[1])-(ab[1]*ac[3]);
    nz = (ab[1]*ac[2])-(ab[2]*ac[1]);
    n = SquareRoot((nx*nx)+(ny*ny)+(nz*nz));
    nx = nx/n;
    ny = ny/n;
    nz = nz/n;
    if (AbsF(nx) + AbsF(ny) < 0)
    {
        nx = 0;
        ny = 0;
        nz = 1;
    }
    else if (nz < 0) { 
        //ph = -1;
    } ////This is a temporary fix in order to get correct normals  all the time. Might sitll be wrong?
    normal.x = nx*ph;
    normal.y = ny*ph;
    normal.z = nz*ph;
}
void GetTerrainNormal(point p, vectorref normal)
{
    fixed px = PointGetX(p);
    fixed py = PointGetY(p);
    fixed pxd = px - Floor(px);
    fixed pyd = py - Floor(py);
    point a = Point(Floor(px),Floor(py));
    point c = Point(Ceiling(px),Ceiling(py));
    if (pxd > pyd)
    {
        GetTriangleNormal(Point(Ceiling(px),Floor(py)), a, c, normal);
    }
    else
    {
        GetTriangleNormal(Point(Floor(px),Ceiling(py)), c, a, normal);
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Response
//--------------------------------------------------------------------------------------------------
void UpdateObject(int i)
{
    fixed time = objects[i].timestep;
    objects[i].x += objects[i].vx*time;
    objects[i].y += objects[i].vy*time;
    objects[i].z += objects[i].vz*time;
    if (objects[i].gravity == true)
    {
        objects[i].vz -= gravaccel*time;
    }
    UnitSetPosition(objects[i].u, Point(objects[i].x,objects[i].y), true);
    UnitSetHeight(objects[i].u,objects[i].z,0.001);
}
void BounceObject(int i)
{
    bounce[i].bouncefunc(i);
}
void CollideObjects(int i, int t)
{
    collide[i].collidefunc(i,t);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Collision Step
//--------------------------------------------------------------------------------------------------
void CollisionStep()
{
    unitgroup particles2;
    unitgroup objects2;
    unit u;
    unit c;
    int ui;
    int ci;
    fixed d;
    fixed r;
    bool stepped;
    point pt;
    fixed dz;
    particles2 = UnitGroupEmpty();
    objects2 = UnitGroupEmpty();
    UnitGroupAddUnitGroup(particles2, projectilegroup);
    UnitGroupAddUnitGroup(objects2, objectgroup); 
    UnitGroupRemoveUnitGroup(objects2, projectilegroup);
    UnitGroupLoopBegin(particles2);
    while (!UnitGroupLoopDone()) 
    {    
        u = UnitGroupLoopCurrent();
        UnitGroupRemove(objects2, u);
        //Check Unit Collisions
        ui = FixedToInt(UnitGetCustomValue(u,0));
        if (objects[ui].active)
        {
            c = UnitGroupClosestToPoint(UnitGroupFilterAlliance(objects2, objects[ui].owner, c_unitAllianceEnemy, 0), UnitGetPosition(u));        
            ci = FixedToInt(UnitGetCustomValue(c,0));
            d = DistanceBetweenPoints(UnitGetPosition(u),UnitGetPosition(c));
            dz = AbsF(ObjectGetHeight(ui) - ObjectGetHeight(ci));
            r = collide[ui].hitradius + collide[ci].hitradius;
            if (d < r && dz < r + 0.4 && objects[ui].owner != objects[ci].owner)
            {
                CollideObjects(ui,ci);
            }
            c = null;
        }
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Step
//--------------------------------------------------------------------------------------------------
void BounceStep()
{
    unitgroup particles2;
    unit u;
    int ui;
    fixed d;
    bool stepped;
    point pt;
    fixed time;
    particles2 = UnitGroupEmpty();
    UnitGroupAddUnitGroup(particles2, activegroup);
    UnitGroupRemoveUnitGroup(particles2, projectilegroup);
    UnitGroupAddUnitGroup(particles2, projectilegroup);
    UnitGroupLoopBegin(particles2);
    while (!UnitGroupLoopDone()) 
    {    
        u = UnitGroupLoopCurrent();
            //Check Terrain Collisions
        ui = FixedToInt(UnitGetCustomValue(u,0));
            time = objects[ui].timestep;
            pt = ObjectCheckTerrainPoint(ui);
            d = DistanceObjectToPoint(ui,pt);
            if (objects[ui].z + objects[ui].vz*time <= WorldHeight(c_heightMapGround, Point(objects[ui].x,objects[ui].y)))     
            {
                BounceObject(ui);
            }
            if (objects[ui].z < gv_fallHeight && objects[ui].active)
            {
                if (u == gv_teamFlagCarrier[1] || u == gv_teamFlagCarrier[2]) 
                {
                    gf_FlagoffMap(u);
                }
                RemoveObject(ui, "kill"); // add in off map effect
            }
            if (UnitIsAlive(u))
            {
                UpdateObject(ui);
            }
        
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Projectile Setup
//--------------------------------------------------------------------------------------------------
//////////Projectile Setup//
//////////Projectile Setup//
//////////Projectile Setup//
unit CreateProjectile(point ps, point pt, fixed z,int owner, string name)
{
    unit u;
    int ui;
    libNtve_gf_UnitCreateFacingPoint(1, name, 0,0, ps, pt);
    u = UnitLastCreated();
    ui = NewObject(u);
    objects[ui].owner = owner;
    objects[ui].z = z;
    UnitSetHeight(u, objects[ui].z,0);
    UnitGroupAdd(projectilegroup, u);
    return u;
}
unit CreateProjectileSize(point ps, point pt, fixed z,int owner, string name, fixed size)
{
    unit u;
    int ui;
    libNtve_gf_UnitCreateFacingPoint(1, name, 0,0, ps, pt);
    u = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), size, size, size);
    ui = NewObject(u);
    objects[ui].owner = owner;
    objects[ui].z = z;
    UnitSetHeight(u, objects[ui].z,0);
    UnitGroupAdd(projectilegroup, u);
    return u;
    
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Set Velocity
//--------------------------------------------------------------------------------------------------
void SetVelocity(int ui,point ps, point pt, fixed zt, fixed speed)//, string type) // only for straight moving projectiles
{
    //Note: Zt should be in world height.
    fixed vx;
    fixed vy;
    fixed vz;
    fixed inc = 0;
    fixed zs;
    fixed d;
    fixed aoa;
    fixed c8;
    fixed range;
    fixed azi;
    fixed dx;
    fixed dy;
    fixed dz;
    //int cls = CliffLevel(ps);
    //int clt = CliffLevel(pt);
    azi = AngleBetweenPoints(ps,pt);
    zs = ObjectGetHeight(ui);
    zt += 0.45;
    dz = AbsF(zs - zt);
    if (dz > 0.35)
    {
        dx = PointGetX(ps)-PointGetX(pt);
        dy = PointGetY(ps)-PointGetY(pt);
        d = SquareRoot((dx*dx)+(dy*dy));
        d = MaxF(d, 0.1);
        inc = ATan((zt-zs)/d);
    }
    objects[ui].vx = Cos(azi)*Cos(inc)*speed;
    objects[ui].vy = Sin(azi)*Cos(inc)*speed;
    objects[ui].vz = Sin(inc)*speed;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Apply Friction
//--------------------------------------------------------------------------------------------------
//Let's apply some friction//
void ApplyFriction(int ui, fixed normalVelocityChange, vectorref normal)
{
    fixed ux = objects[ui].x;
    fixed uy = objects[ui].y;
    fixed uz = objects[ui].z;
    fixed cf = bounce[ui].friction;
    fixed nx = normal.x;
    fixed ny = normal.y;
    fixed nz = normal.z;
    fixed vx = objects[ui].vx;
    fixed vy = objects[ui].vy;
    fixed vz = objects[ui].vz;
    fixed VelChange;
    fixed d = (vx*nx + vy*ny + vz*nz);
    fixed[3] TanVel;
    fixed[3] TanDir;
    fixed VelAlongTan;
    fixed FrictionImpulse;
    fixed MaxFriction;
    fixed TanVelLength;
    fixed rest = bounce[ui].restitution;
    MaxFriction = normalVelocityChange*rest*cf; 
    TanVel[0] = vx - (nx*d);
    TanVel[1] = vy - (ny*d);
    TanVel[2] = vz - (nz*d);
    TanVelLength = Distance3(TanVel[0],TanVel[1],TanVel[2]) ;
    if (TanVelLength == 0)
    {
        return;
    }
    TanDir[0] = TanVel[0]/TanVelLength;
    TanDir[1] = TanVel[1]/TanVelLength;
    TanDir[2] = TanVel[2]/TanVelLength;
    TanVelLength = Distance3(TanDir[0], TanDir[1], TanDir[2]);
    TanDir[0] = TanDir[0]/TanVelLength;
    TanDir[1] = TanDir[1]/TanVelLength;
    TanDir[2] = TanDir[2]/TanVelLength;
    VelAlongTan = Dot6(vx,vy,vz,TanDir[0],TanDir[1],TanDir[2]);
    FrictionImpulse = VelAlongTan*rest;
    if (FrictionImpulse > MaxFriction)
    {
       FrictionImpulse = MaxFriction;
    }
    if (rest != 0)
    {
        objects[ui].vx -= (FrictionImpulse/rest)*TanDir[0];
        objects[ui].vy -= (FrictionImpulse/rest)*TanDir[1];
        objects[ui].vz -= (FrictionImpulse/rest)*TanDir[2];
    }
    
    
        
} 

//--------------------------------------------------------------------------------------------------
// Custom Script: Create Explosion
//--------------------------------------------------------------------------------------------------
void CreateExplosion(point p, fixed z, fixed radius, fixed force, string effect, string decaytype, int ci, fixed damage)
{
    unitgroup loopGroup;
    int loopInt;
    unit u;
    unit c = objects[ci].u;
    fixed z2;
    int ui;
    fixed mass;
    fixed dx;
    fixed dy;
    fixed dz;
    fixed distance;
    fixed distancef = 1;
    fixed dmg = damage;
    loopGroup = UnitGroupEmpty();
    UnitGroupAddUnitGroup(loopGroup, objectgroup);
    UnitGroupAddUnitGroup(loopGroup, activegroup);
    UnitGroupRemoveUnitGroup(loopGroup, projectilegroup);
    UnitGroupRemove(loopGroup, c);
    UnitGroupLoopBegin(loopGroup);
    while (!UnitGroupLoopDone() && UnitGroupLoopCurrent() != c) 
    {  
        u = UnitGroupLoopCurrent();
        ui = FixedToInt(UnitGetCustomValue(u,0));
        UnitGroupRemove(loopGroup, u);
        ObjectUpdateLoc(ui);
        dx = objects[ui].x - objects[ci].x;
        dy = objects[ui].y - objects[ci].y;
        dz = objects[ui].z - z;
        distance = SquareRoot(dx*dx+dy*dy+dz*dz);
            if (radius >= distance)
            {
                mass = objects[ui].mass;
                dmg = damage;
                if (decaytype == "linear")
                {
                    if (distance > radius *0.1)
                    {
                        distancef = (radius-distance)/radius;
                    }
                }
                dmg = damage*(.075+distancef);
                if (force > 0)
                {
                    ActivateObject(ui);
                    if (objects[ui].vz <= .1)
                    {
                        objects[ui].vz += .12;
                    }
                    objects[ui].vx += force*dx/distance/mass;
                    objects[ui].vy += force*dy/distance/mass;  
                    if (dz > 0)
                    {
                        objects[ui].vz += force*dz/distance/mass;
                    }
                                   
                }
                CreateDamage(ci, ui, effect, dmg); 
            }
        
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Collision - Machine Gun
//--------------------------------------------------------------------------------------------------
void CollideMachineGun(int ui, int ti);
void CollideMachineGun(int ui, int ti)
{
    fixed damage = collide[ui].damage;
    int owner = objects[ui].owner;
    PlayerCreateEffectUnit(objects[ui].owner, "MachineGunHit", objects[ti].u);
    CreateDamage(ui,ti,"SuppressorDamage", damage);
    RemoveObject(ui, "kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Collision - Reaper Gun
//--------------------------------------------------------------------------------------------------
void CollideReaperGun(int ui, int ti);
void CollideReaperGun(int ui, int ti)
{
    fixed damage = collide[ui].damage;
    int owner = objects[ui].owner;
    unit hero = gv_playerUnits[owner];
    fixed life = UnitGetPropertyFixed(hero, c_unitPropLife, c_unitPropCurrent);
    PlayerCreateEffectUnit(objects[ui].owner, "MachineGunHit", objects[ti].u);
    CreateDamage(ui,ti,"SuppressorDamage", damage);
    UnitSetPropertyFixed(hero, c_unitPropLife, life + 1.0);
    RemoveObject(ui, "kill");
    
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Collision - Shrapnel 3
//--------------------------------------------------------------------------------------------------
void CollideShrapnel(int ui, int ti);
void CollideShrapnel(int ui, int ti)
{
    fixed damage = collide[ui].damage;
    int owner = objects[ui].owner;
    unit u = objects[ui].u;
    unit t = objects[ti].u;
    PlayerCreateEffectUnit(owner, "ShrapnelHit", t);
    CreateDamage(ui,ti,"ShrapnelDamage", damage);
    RemoveObject(ui,"kill");    
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Collide - Shotgun 2
//--------------------------------------------------------------------------------------------------
void CollideShotgun(int ui, int ti);
void CollideShotgun(int ui, int ti)
{
    fixed damage = collide[ui].damage;
    fixed force = collide[ui].force; 
    fixed vx = objects[ui].vx;
    fixed vy = objects[ui].vy;
    fixed vz = objects[ui].vz;
    fixed v = SquareRoot((vx*vx)+(vy*vy)+(vz*vz));
    vx = vx/v;
    vy = vy/v;
    vz = vz/v;
    CreateDamage(ui,ti,"ScattershotDamage", damage);
    RemoveObject(ui,"kill");
    ActivateObject(ti);
    objects[ti].vx += vx*force;
    objects[ti].vy += vy*force;
    objects[ti].vz += vz*force;
    if (objects[ti].vz <= .07)
    {
        objects[ti].vz += .065;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Collide - Rifle 2
//--------------------------------------------------------------------------------------------------
void CollideRifle(int ui, int ti);
void CollideRifle(int ui, int ti)
{
    fixed damage = collide[ui].damage;
    unit u = objects[ui].u;
    unit t = objects[ti].u;
    int owner = objects[ui].owner;
    PlayerCreateEffectUnit(owner, "RifleHit", t);
    CreateDamage(ui,ti,"EchoRifleDamage", damage);
    RemoveObject(ui, "kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Collide - Acid 2
//--------------------------------------------------------------------------------------------------
//How To Change Effect per Upgrades/Talents
//Simply add a " if (talents[owner].UPGRADE/TALENT == #)
//UPGRADE/TALENT can be anything in the struct talent in the Archive Script
//# = 0 for no upgrade // # = 0.1 for 1 upgrade (if 0.1 is the correlating talent % upgrade for 1 upgrade)
//First if statement has "if ..." etc.
//All after that have else if... pretty much just copy current outline
//Replace "ApplyVorpalBehavior" with the ID of the appropriate effect
void CollideAcid(int ui, int ti);
void CollideAcid(int ui, int ti)
{
    fixed damage = collide[ui].damage;
    unit u = objects[ui].u;
    unit t = objects[ti].u;
    int owner = objects[ui].owner;
    CreateDamage(ui,ti,"VorpalInitialDamage", damage);
    if (talents[owner].damage == 0)
    {
        PlayerCreateEffectUnit(owner, "ApplyVorpalBehavior", t);    
    }
    else if (talents[owner].damage == 0.1) //First upgrade
    {
        PlayerCreateEffectUnit(objects[ui].owner, "ApplyVorpalBehavior", t);//Replace "ApplyVorpal.." with new effect    
    }
    else if (talents[owner].damage == 0.2) // second upgrade (btw 0.1 and 0.2 were just random #'s, replace
    {
        PlayerCreateEffectUnit(objects[ui].owner, "ApplyVorpalBehavior", t);//Replace "ApplyV.." with new effect    
    }    
    RemoveObject(ui, "kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Collide - Slime
//--------------------------------------------------------------------------------------------------
void CollideSlime(int ui, int ti);
void CollideSlime(int ui, int ti)
{
    fixed damage = collide[ui].damage;
    unit u = objects[ui].u;
    unit t = objects[ti].u;
    int owner = objects[ui].owner;
    CreateDamage(ui,ti,"VorpalInitialDamage", damage);
    if (talents[owner].damage == 0)
    {
        PlayerCreateEffectUnit(owner, "ApplyVorpalBehavior", t);    
    }
    else if (talents[owner].damage == 0.1) //First upgrade
    {
        PlayerCreateEffectUnit(objects[ui].owner, "ApplyVorpalBehavior", t);//Replace "ApplyVorpal.." with new effect    
    }
    else if (talents[owner].damage == 0.2) // second upgrade (btw 0.1 and 0.2 were just random #'s, replace
    {
        PlayerCreateEffectUnit(objects[ui].owner, "ApplyVorpalBehavior", t);//Replace "ApplyV.." with new effect    
    }    
    RemoveObject(ui, "kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Collide - Viper
//--------------------------------------------------------------------------------------------------
void CollideViper(int ui, int ti);
void CollideViper(int ui, int ti)
{
    fixed damage = collide[ui].damage;
    unit u = objects[ui].u;
    unit t = objects[ti].u;
    int owner = objects[ui].owner;
    CreateDamage(ui,ti,"VorpalInitialDamage", damage);
    if (talents[owner].damage == 0)
    {
        PlayerCreateEffectUnit(owner, "ApplyViperBehavior", t);    
    }
    else if (talents[owner].damage == 0.1) //First upgrade
    {
        PlayerCreateEffectUnit(objects[ui].owner, "ApplyVorpalBehavior", t);//Replace "ApplyVorpal.." with new effect    
    }
    else if (talents[owner].damage == 0.2) // second upgrade (btw 0.1 and 0.2 were just random #'s, replace
    {
        PlayerCreateEffectUnit(objects[ui].owner, "ApplyVorpalBehavior", t);//Replace "ApplyV.." with new effect    
    }    
    RemoveObject(ui, "kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Debug4
//--------------------------------------------------------------------------------------------------
void GetNormalFromClick(fixed x, fixed y)
{
    vector normal;
    GetTerrainNormal(Point(x,y),normal);
    if (PointPathingPassable(Point(x,y)))
    {
        PrintMessage("Pathable");
    }
    else
    {
        PrintMessage("Unpathable");
    }
    PrintValue("Wh: ", WorldHeight(c_heightMapGround, Point(x,y)));
    PrintValue("Nx: ",normal.x);
    PrintValue("Ny: ", normal.y);
    PrintValue("Nz: ", normal.z);
    
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Player 2
//--------------------------------------------------------------------------------------------------
void BouncePlayer(int ui);
void BouncePlayer(int ui)
{
    point p = Point(objects[ui].x,objects[ui].y);
    fixed x = objects[ui].x;
    fixed y = objects[ui].y;
    fixed vx = objects[ui].vx;
    fixed vy = objects[ui].vy;
    fixed vz = objects[ui].vz;
    fixed Nx;
    fixed Ny;
    fixed Nz;
    fixed velocityAlongNormal;
    fixed normalVelocityChange;
    vector normal;
    if (bounce[ui].landable && AreaPathingPassable(p, bounce[ui].radius)) // Point Pathing --> Make Area Pathingm 9 point checking square
    {
        DeactivateObject(ui);
        return;
    }
    GetTerrainNormal(p,normal);
    Nx = normal.x;
    Ny = normal.y;
    Nz = normal.z;
//    if (AbsF(Nx) + AbsF(Ny) < 0.2 && AbsF(Nz) > 0.87 && PointPathingPassable(p) && objects[ui].bounce.landable)
//    {
//        DeactivateObject(ui);
//        return;
//    }
    velocityAlongNormal = vx * Nx + vy * Ny + vz * Nz;
    if (velocityAlongNormal < 0)
    {
        //ERROR
        //DeactivateObject(ui);
        return;
    }
    if (velocityAlongNormal > 0)
    {
        normalVelocityChange = (1+bounce[ui].restitution)*velocityAlongNormal;
    }
    else
    {
        normalVelocityChange = velocityAlongNormal;
    } 
    objects[ui].vx -= (Nx*normalVelocityChange);
    objects[ui].vy -= (Ny*normalVelocityChange);
    objects[ui].vz -= (Nz*normalVelocityChange);
    
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Landable
//--------------------------------------------------------------------------------------------------
void BounceLandable(int ui);
void BounceLandable(int ui)
{
     DeactivateObject(ui); //Redundancy ---> bouncefunc = deactivate?
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Standard
//--------------------------------------------------------------------------------------------------
void BounceStandard(int ui);
void BounceStandard(int ui)
{
    fixed x = objects[ui].x;
    fixed y = objects[ui].y;
    fixed vx = objects[ui].vx;
    fixed vy = objects[ui].vy;
    fixed vz = objects[ui].vz;
    fixed Nx;
    fixed Ny;
    fixed Nz;
    fixed velocityAlongNormal;
    fixed normalVelocityChange;
    vector normal;
    GetTerrainNormal(Point(x,y),normal);
    Nx = normal.x;
    Ny = normal.y;
    Nz = normal.z;
    velocityAlongNormal = vx * Nx + vy * Ny + vz * Nz;
    if (velocityAlongNormal < 0)
    {
        //ERROR
        return;
    }
    if (velocityAlongNormal > 0)
    {
        normalVelocityChange = (1+bounce[ui].restitution)*velocityAlongNormal;
    }
    else
    {
        normalVelocityChange = velocityAlongNormal;
    }
    objects[ui].vx -= (Nx*normalVelocityChange);
    objects[ui].vy -= (Ny*normalVelocityChange);
    objects[ui].vz -= (Nz*normalVelocityChange);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Flame
//--------------------------------------------------------------------------------------------------
void BounceFlame(int ui);
void BounceFlame(int ui)
{
    fixed x = objects[ui].x;
    fixed y = objects[ui].y;
    fixed vx = objects[ui].vx;
    fixed vy = objects[ui].vy;
    fixed vz = objects[ui].vz;
    fixed Nx;
    fixed Ny;
    fixed Nz;
    fixed velocityAlongNormal;
    fixed normalVelocityChange;
    vector normal;
    GetTerrainNormal(Point(x,y),normal);
    Nx = normal.x;
    Ny = normal.y;
    Nz = normal.z;
    velocityAlongNormal = vx * Nx + vy * Ny + vz * Nz;
    if (velocityAlongNormal < 0)
    {
        //ERROR
        return;
    }
    if (velocityAlongNormal > 0)
    {
        normalVelocityChange = (1+bounce[ui].restitution)*velocityAlongNormal;
    }
    else
    {
        normalVelocityChange = velocityAlongNormal;
    }
    objects[ui].vx -= (Nx*normalVelocityChange);
    objects[ui].vy -= (Ny*normalVelocityChange);
    objects[ui].vz -= (Nz*normalVelocityChange);
    ApplyFriction(ui,normalVelocityChange, normal);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Kill 2
//--------------------------------------------------------------------------------------------------
void BounceKill(int ui);
void BounceKill(int ui)
{
    RemoveObject(ui, "kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Kinetic Rod
//--------------------------------------------------------------------------------------------------
void BounceKineticRod(int ui);
void BounceKineticRod(int ui)
{
    PlayerCreateEffectUnit(objects[ui].owner, "KineticSearch", objects[ui].u);    
    RemoveObject(ui, "kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Shrapnel
//--------------------------------------------------------------------------------------------------
void BounceShrapnel(int ui);
void BounceShrapnel(int ui)
{
    point po = UnitGetPosition(objects[ui].u);
    fixed x = PointGetX(po); //
    fixed y = PointGetY(po); //switch back to obj.x & y?
    fixed z = WorldHeight(c_heightMapGround,Point(x,y));
    fixed vx = objects[ui].vx;
    fixed vy = objects[ui].vy;
    fixed vz = objects[ui].vz;
    fixed velocityAlongNormal;
    fixed normalVelocityChange;
    int i = 0;
    unit c;
    int ci;
    int owner = objects[ui].owner;
    fixed damage = bounce[ui].damage;
    fixed speed;
    fixed ang;
    fixed ang2;
    fixed inc;
    fixed inc2;
    fixed Nx;
    fixed Ny;
    fixed Nz;
    vector normal;
    GetTerrainNormal(Point(x,y),normal);
    Nx = normal.x;
    Ny = normal.y;
    Nz = normal.z;
    velocityAlongNormal = vx * Nx + vy * Ny + vz * Nz;
    if (velocityAlongNormal < 0)
    {
        //ERROR
        return;
    }
    if (velocityAlongNormal > 0)
    {
        normalVelocityChange = (1+bounce[ui].restitution)*velocityAlongNormal;
    }
    else
    {
        normalVelocityChange = velocityAlongNormal;
    }
    vx -= (Nx*normalVelocityChange);
    vy -= (Ny*normalVelocityChange);
    vz -= (Nz*normalVelocityChange);
    ang  = AngleBetweenPoints(Point(x,y),Point(x+vx*10,y+vy*10));
    inc = ATan(vz/SquareRoot(vx*vx+vy*vy));
    PlayerCreateEffectUnit(owner, "ShrapnelDeath", objects[ui].u);
    RemoveObject(ui,"kill"); // Could replace with explode?
    while (i < 3)
    {
        inc2 = inc + RandomFixed(-2.2,2.2);    
        ang2 = ang + (i-1)*18;
        c = CreateProjectileSize(Point(x,y), Point(x,y),z + 0.6,owner, "projectileShrapnel", 95);
        ci = FixedToInt(UnitGetCustomValue(c,0));
        objects[ci].gravity = true;
        collide[ci].damage = 7*(1+talents[owner].damage);
        collide[ci].hitradius = 0.28*(1+talents[owner].radius);
        bounce[ci].bouncefunc = BounceKill;
        collide[ci].collidefunc = CollideShrapnel;
        objects[ci].vx = vx + RandomFixed(-0.25,0.25);//speed*Cos(ang2)*Cos(inc2);
        objects[ci].vy = vy + RandomFixed(-0.25,0.25);//speed*Sin(ang2)*Cos(inc2);
        objects[ci].vz = vz + RandomFixed(-0.25,0.25);//speed*Sin(inc2);
        i += 1;
    }
    
        
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Shard
//--------------------------------------------------------------------------------------------------
void BounceShard(int ui);
void BounceShard(int ui)
{
    fixed x = objects[ui].x;
    fixed y = objects[ui].y;
    fixed z = WorldHeight(c_heightMapGround,Point(x,y));
    fixed vx = objects[ui].vx;
    fixed vy = objects[ui].vy;
    fixed vz = objects[ui].vz;
    fixed velocityAlongNormal;
    fixed normalVelocityChange;
    int i = 0;
    unit c;
    int ci;
    int owner = objects[ui].owner;
    fixed damage = bounce[ui].damage;
    fixed speed;
    fixed ang;
    fixed ang2;
    fixed inc;
    fixed inc2;
    vector n;
    GetTerrainNormal(Point(x,y),n);
    velocityAlongNormal = vx * n.x + vy * n.y + vz * n.z;
    if (velocityAlongNormal < 0)
    {
        //ERROR
        RemoveObject(ui,"kill");
        return;
    }
    normalVelocityChange = velocityAlongNormal*(1+bounce[ui].restitution);//objects[ui].restitution);
    vx -= (n.x*normalVelocityChange);
    vy -= (n.y*normalVelocityChange);
    vz -= (n.z*normalVelocityChange);
    speed = SquareRoot(vx*vx+vy*vy+vz*vz);
    vx = vx/speed;
    vy = vy/speed;
    vz = vz/speed;
    ang  = AngleBetweenPoints(Point(x,y),Point(x+vx*10,y+vy*10));
    inc = ATan(vz/SquareRoot(vx*vx+vy*vy));
    PlayerCreateEffectUnit(owner, "ShardExplode", objects[ui].u);
    RemoveObject(ui,"kill"); // Could replace with explode?
    while (i < 6)
    {
        ang2 = ang + (i-2.5)*16;
        inc2 = inc + RandomFixed(-3,4);
        c = CreateProjectileSize(Point(x,y), Point(x,y),z,owner, "projectileShrapnel", 75);
        ci = FixedToInt(UnitGetCustomValue(c,0));
        objects[ci].gravity = true;
        collide[ci].damage = 4*(1+talents[owner].damage);
        collide[ci].hitradius = 0.28*(1+talents[owner].radius);
        bounce[ci].bouncefunc = BounceKill;
        collide[ci].collidefunc = CollideShrapnel;
        objects[ci].vx = vx + RandomFixed(0.2,-0.2);//speed*Cos(ang2)*Cos(inc2);
        objects[ci].vy = vy + RandomFixed(0.2,-0.2);//speed*Sin(ang2)*Cos(inc2);
        objects[ci].vz = vz + RandomFixed(0.2,-0.2);//speed*Sin(inc2);
        i += 1;
    }
    
        
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Mortar
//--------------------------------------------------------------------------------------------------
void BounceMortar(int ui);
void BounceMortar(int ui)
{
    fixed x = objects[ui].x;
    fixed y = objects[ui].y;
    fixed z = WorldHeight(c_heightMapGround,Point(x,y));
    fixed damage = bounce[ui].damage;
    PlayerCreateEffectUnit(objects[ui].owner, "MortarImpact", objects[ui].u);
    RemoveObject(ui,"kill"); // Could replace with explode?
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Rifle
//--------------------------------------------------------------------------------------------------
void BounceRifle(int ui);
void BounceRifle(int ui)
{
    fixed x = objects[ui].x;
    fixed y = objects[ui].y;
    fixed z = WorldHeight(c_heightMapGround,Point(x,y));
    fixed damage = bounce[ui].damage;
    PlayerCreateEffectUnit(objects[ui].owner, "MortarImpact", objects[ui].u);
    RemoveObject(ui,"kill"); // Could replace with explode?
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Missile Launcher
//--------------------------------------------------------------------------------------------------
void BounceMissileLauncher(int ui);
void BounceMissileLauncher(int ui)
{
    //CREATE EXPLOSION TO BE ADDED?
    int owner = objects[ui].owner;
    point p = Point(objects[ui].x,objects[ui].y);
    PlayerCreateEffectPoint(owner, "MissileLauncherDummy", p);
    if (talents[owner].radius > 0)
    {
    }
    if (talents[owner].damage == 0)
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistent", p);
    }
    else if (talents[owner].damage == 0.1) //First upgrade
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistent", p); //Replace "CircleofFire.." with new effect
    }
    else if (talents[owner].damage == 0.2) // second upgrade (btw 0.1 and 0.2 were just random #'s, replace
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistent", p); //Replace "circle of fir...."
    }        
    RemoveObject(ui,"kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Hellfire Launcher
//--------------------------------------------------------------------------------------------------
void BounceHellfireLauncher(int ui);
void BounceHellfireLauncher(int ui)
{
    int owner = objects[ui].owner;
    point p = Point(objects[ui].x,objects[ui].y);
    PlayerCreateEffectPoint(owner, "MissileLauncherDummy", p);
    if (talents[owner].radius > 0)
    {
    }
    if (talents[owner].damage == 0)
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistentHellfire", p);
    }
    else if (talents[owner].damage == 0.1) //First upgrade
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistent", p); //Replace "CircleofFire.." with new effect
    }
    else if (talents[owner].damage == 0.2) // second upgrade (btw 0.1 and 0.2 were just random #'s, replace
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistent", p); //Replace "circle of fir...."
    }        
    RemoveObject(ui,"kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Hellfire Scatter
//--------------------------------------------------------------------------------------------------
void BounceHellfireScatter(int ui);
void BounceHellfireScatter(int ui)
{
    int owner = objects[ui].owner;
    point p = Point(objects[ui].x,objects[ui].y);
    PlayerCreateEffectPoint(owner, "MissileLauncherDummy", p);
    if (talents[owner].radius > 0)
    {
    }
    if (talents[owner].damage == 0)
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistentHellfire", p);
    }
    else if (talents[owner].damage == 0.1) //First upgrade
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistent", p); //Replace "CircleofFire.." with new effect
    }
    else if (talents[owner].damage == 0.2) // second upgrade (btw 0.1 and 0.2 were just random #'s, replace
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistent", p); //Replace "circle of fir...."
    }        
    RemoveObject(ui,"kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Rocket Launcher
//--------------------------------------------------------------------------------------------------
void BounceRocketLauncher(int ui);
void BounceRocketLauncher(int ui)
{
    //CREATE EXPLOSION TO BE ADDED?
    int owner = objects[ui].owner;
    point p = Point(objects[ui].x,objects[ui].y);
    PlayerCreateEffectPoint(owner, "MissileLauncherDummy", p);
    if (talents[owner].radius > 0)
    {
    }
    if (talents[owner].damage == 0)
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistentNapalm", p);
    }
    else if (talents[owner].damage == 0.1) //First upgrade
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistent", p); //Replace "CircleofFire.." with new effect
    }
    else if (talents[owner].damage == 0.2) // second upgrade (btw 0.1 and 0.2 were just random #'s, replace
    {
        PlayerCreateEffectPoint(owner, "CircleofFirePersistent", p); //Replace "circle of fir...."
    }        
    RemoveObject(ui,"kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Acid
//--------------------------------------------------------------------------------------------------
void BounceAcid(int ui);
void BounceAcid(int ui)
{
    fixed x = objects[ui].x;
    fixed y = objects[ui].y;
    fixed vx = objects[ui].vx;
    fixed vy = objects[ui].vy;
    fixed vz = objects[ui].vz;
    fixed Nx;
    fixed Ny;
    fixed Nz;
    fixed velocityAlongNormal;
    fixed normalVelocityChange;
    vector normal;
    GetTerrainNormal(Point(x,y),normal);
    Nx = normal.x;
    Ny = normal.y;
    Nz = normal.z;
    velocityAlongNormal = vx * Nx + vy * Ny + vz * Nz;
    if (velocityAlongNormal < 0)
    {
        //ERROR
        return;
    }
    if (velocityAlongNormal > 0)
    {
        normalVelocityChange = (1+bounce[ui].restitution)*velocityAlongNormal;
    }
    else
    {
        normalVelocityChange = velocityAlongNormal;
    } 
    objects[ui].vx -= (Nx*normalVelocityChange);
    objects[ui].vy -= (Ny*normalVelocityChange);
    objects[ui].vz -= (Nz*normalVelocityChange);
    ApplyFriction(ui,normalVelocityChange, normal);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Bounce Slime
//--------------------------------------------------------------------------------------------------
void BounceSlime(int ui);
void BounceSlime(int ui)
{
    fixed x = objects[ui].x;
    fixed y = objects[ui].y;
    fixed vx = objects[ui].vx;
    fixed vy = objects[ui].vy;
    fixed vz = objects[ui].vz;
    fixed Nx;
    fixed Ny;
    fixed Nz;
    fixed velocityAlongNormal;
    fixed normalVelocityChange;
    vector normal;
    GetTerrainNormal(Point(x,y),normal);
    Nx = normal.x;
    Ny = normal.y;
    Nz = normal.z;
    velocityAlongNormal = vx * Nx + vy * Ny + vz * Nz;
    if (velocityAlongNormal < 0)
    {
        //ERROR
        return;
    }
    if (velocityAlongNormal > 0)
    {
        normalVelocityChange = (1+bounce[ui].restitution)*velocityAlongNormal;
    }
    else
    {
        normalVelocityChange = velocityAlongNormal;
    } 
    objects[ui].vx -= (Nx*normalVelocityChange);
    objects[ui].vy -= (Ny*normalVelocityChange);
    objects[ui].vz -= (Nz*normalVelocityChange);
    PlayerCreateEffectPoint(1, "SlimeCreateCreep", Point(x,y));
    ApplyFriction(ui,normalVelocityChange, normal);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: RocketJump Actions 3
//--------------------------------------------------------------------------------------------------
void RocketJumpActions(unit u, point p)
{
    fixed dx = PointGetX(p) - PointGetX(UnitGetPosition(u));
    fixed dy = PointGetY(p) - PointGetY(UnitGetPosition(u));
    fixed a = AngleBetweenPoints(UnitGetPosition(u), p);
    int ui = FixedToInt(UnitGetCustomValue(u,0));
    fixed c8;
    fixed maxrange = 8; //Max Range
    fixed range = MinF(SquareRoot(dx*dx+dy*dy), maxrange);//Actual Range
    fixed grav = gravaccel;
    fixed speed = .42;//SquareRoot(maxrange*grav); //Speed
    fixed aoa;
    fixed z;
    range = MaxF(range, 4);
    aoa = (range*grav)/(speed*speed);
    if (aoa > 1) {
        aoa = .98;
    }
    c8 = 90-(ASin(aoa)/2);
    libNtve_gf_MakeUnitFacePoint(u, p, 0.0);
    ActivateObject(ui);
    UnitSetHeight(u, UnitGetHeight(u) + .1, .001);
    z = WorldHeight(c_heightMapGround,p) - UnitGetHeight(u);
    objects[ui].vx = Cos(a)*speed;
    objects[ui].vy = Sin(a)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Jump 4
//--------------------------------------------------------------------------------------------------
void JumpActions(unit u, point p)
{
    fixed dx = PointGetX(p) - PointGetX(UnitGetPosition(u));
    fixed dy = PointGetY(p) - PointGetY(UnitGetPosition(u));
    fixed a = AngleBetweenPoints(UnitGetPosition(u), p);
    int ui = FixedToInt(UnitGetCustomValue(u,0));
    fixed c8;
    fixed maxrange = 4; //Max Range
    fixed range = MinF(SquareRoot(dx*dx+dy*dy), maxrange);//Actual Range
    fixed grav = gravaccel;
    fixed speed = .5;//SquareRoot(maxrange*grav); //Speed
    fixed aoa;
    fixed z;
    if (UnitGroupHasUnit(activegroup, u))
    {
        return;
    }
    aoa = (range*grav)/(speed*speed);
    if (aoa > 1) {
        aoa = .98;
    }
    c8 = 90-(ASin(aoa)/2);
    c8 = MinF(c8, 70);//TEST FOR JUMP
    libNtve_gf_MakeUnitFacePoint(u, p, 0.0);
    ActivateObject(ui);
    UnitSetHeight(u, UnitGetHeight(u) + .1, .001);
    objects[ui].vx = Cos(c8)*Cos(a)*speed;
    objects[ui].vy = Cos(c8)*Sin(a)*speed;
    objects[ui].vz = speed*Sin(c8);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Cold Blood Actions
//--------------------------------------------------------------------------------------------------
void ColdBloodActions(int oh, point p)
{ 
    unit u;
    fixed x = PointGetX(p);
    fixed y = PointGetY(p);
    int ui;
    point ps;
    ps = Point(x , y);
    u = CreateProjectileSize(p,p, WorldHeight(c_heightMapGround, p) + 0.6,oh,"SmallExplosive",100);
    ui = FixedToInt(UnitGetCustomValue(u,0));
    objects[ui].gravity = true;
    bounce[ui].restitution = 0.65;
    bounce[ui].radius = 0.35;
    bounce[ui].bouncefunc = BounceStandard;
    collide[ui].collideable = false;
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Frag Actions
//--------------------------------------------------------------------------------------------------
void GrenadeActions(unit h, point p)
{ 
    unit u;
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed dx = PointGetX(p) - PointGetX(UnitGetPosition(h));
    fixed dy = PointGetY(p) - PointGetY(UnitGetPosition(h));
    fixed a = AngleBetweenPoints(UnitGetPosition(h), p);
    fixed c8;
    int oh = UnitGetOwner(h);
    fixed maxrange = 7.5 + talents[oh].range; //Max Range
    fixed range = MinF(SquareRoot(dx*dx+dy*dy), maxrange);//Actual Range
    fixed grav = gravaccel;
    fixed speed =SquareRoot(maxrange*grav); //Speed
    fixed aoa;
    int ui;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    ps = Point(x + 0.5 * Cos(a), y + 0.5 * Sin(a));
    u = CreateProjectileSize(ps,p, ObjectGetHeight(hi) + 0.6,oh,"FragGrenade",80);
    if (gv_talentsActual[oh] == 8)
    {
        ActorSend(libNtve_gf_MainActorofUnit(u), libNtve_gf_SetTintColor(Color(255.00, 128.04, 0.20), 1.0, 0.0));
    }
    ui = FixedToInt(UnitGetCustomValue(u,0));
    objects[ui].gravity = true;
    bounce[ui].restitution = 0.65;
    bounce[ui].radius = 0.35;
    bounce[ui].bouncefunc = BounceStandard;
    collide[ui].collideable = false;
    aoa = (range*grav)/(speed*speed);
    if (aoa > 1) {
        aoa = .98;
    }
    c8 = 90-(ASin(aoa)/2);
    objects[ui].vx = Cos(c8)*Cos(a)*speed;
    objects[ui].vy = Cos(c8)*Sin(a)*speed;
    objects[ui].vz = speed*Sin(c8);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Acid Gun
//--------------------------------------------------------------------------------------------------
void AcidGunActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed grav = gravaccel;
    fixed speed = 0.55 *(1 +  talents[oh].speed);
    fixed maxrange = 3.5 * (1 + talents[oh].range); //Max Range
    fixed a;// = AngleBetweenPoints(ph, p);
    fixed dx = x - PointGetX(p);
    fixed dy = y - PointGetY(p);
    fixed d = MaxF(0.1,SquareRoot(dx*dx+dy*dy));
    fixed range = MinF(d, maxrange);//Actual Range
    fixed z;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    int ui;
    a = AngleBetweenPoints(ph,p);
    ps = Point(x + .6 * Cos(a), y + 0.6 * Sin(a));
    u = CreateProjectile(ps,p, ObjectGetHeight(hi) + 0.7,oh,"projectileAcid");
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.3 * (1+talents[oh].radius);
    bounce[ui].radius = 0.25 * (1+talents[oh].radius);
    collide[ui].damage = 10 * (1+talents[oh].damage);
    objects[ui].gravity = true;
    bounce[ui].restitution = 0.65;
    bounce[ui].bouncefunc = BounceAcid;
    bounce[ui].friction = 0.13;
    collide[ui].collidefunc = CollideAcid;
    z = WorldHeight(c_heightMapGround,p) + 0.7 - UnitGetHeight(u);
    objects[ui].vx = Cos(a)*speed;
    objects[ui].vy = Sin(a)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Slime Gun
//--------------------------------------------------------------------------------------------------
void SlimeGunActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed grav = gravaccel;
    fixed speed = 0.55 *(1 +  talents[oh].speed);
    fixed maxrange = 8 * (1 + talents[oh].range); //Max Range
    fixed a;// = AngleBetweenPoints(ph, p);
    fixed dx = x - PointGetX(p);
    fixed dy = y - PointGetY(p);
    fixed d = MaxF(0.1,SquareRoot(dx*dx+dy*dy));
    fixed range = MinF(d, maxrange);//Actual Range
    fixed z;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    int ui;
    a = AngleBetweenPoints(ph,p);
    ps = Point(x + .6 * Cos(a), y + 0.6 * Sin(a));
    u = CreateProjectile(ps,p, ObjectGetHeight(hi) + 0.7,oh,"projectileSlime");
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.3 * (1+talents[oh].radius);
    bounce[ui].radius = 0.25 * (1+talents[oh].radius);
    collide[ui].damage = 15 * (1+talents[oh].damage);
    objects[ui].gravity = true;
    bounce[ui].restitution = 0.65;
    bounce[ui].bouncefunc = BounceSlime;
    bounce[ui].friction = 0.13;
    collide[ui].collidefunc = CollideSlime;
    z = WorldHeight(c_heightMapGround,p)+ 0.7 - UnitGetHeight(u);
    objects[ui].vx = Cos(a)*speed;
    objects[ui].vy = Sin(a)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Viper Gun
//--------------------------------------------------------------------------------------------------
void ViperGunActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed grav = gravaccel;
    fixed speed = 0.55 *(1 +  talents[oh].speed);
    fixed maxrange = 3.5 * (1 + talents[oh].range); //Max Range
    fixed a;// = AngleBetweenPoints(ph, p);
    fixed dx = x - PointGetX(p);
    fixed dy = y - PointGetY(p);
    fixed d = MaxF(0.1,SquareRoot(dx*dx+dy*dy));
    fixed range = MinF(d, maxrange);//Actual Range
    fixed z;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    int ui;
    a = AngleBetweenPoints(ph,p);
    ps = Point(x + .6 * Cos(a), y + 0.6 * Sin(a));
    u = CreateProjectile(ps,p, ObjectGetHeight(hi) + 0.7,oh,"projectileViper");
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.3 * (1+talents[oh].radius);
    bounce[ui].radius = 0.25 * (1+talents[oh].radius);
    collide[ui].damage = 10 * (1+talents[oh].damage);
    objects[ui].gravity = true;
    bounce[ui].restitution = 0.65;
    bounce[ui].bouncefunc = BounceAcid;
    bounce[ui].friction = 0.13;
    collide[ui].collidefunc = CollideViper;
    z = WorldHeight(c_heightMapGround,p) + 0.7 - UnitGetHeight(u);
    objects[ui].vx = Cos(a)*speed;
    objects[ui].vy = Sin(a)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Missile Launcher
//--------------------------------------------------------------------------------------------------
void MissileLauncherActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed dx = PointGetX(p) - PointGetX(UnitGetPosition(h));
    fixed dy = PointGetY(p) - PointGetY(UnitGetPosition(h));
    fixed a = AngleBetweenPoints(UnitGetPosition(h), p);
    fixed maxrange = 22 * (1+talents[oh].range); //Max Range
    fixed range = MinF(SquareRoot(dx*dx+dy*dy), maxrange);//Actual Range
    fixed grav = gravaccel*0.75;
    fixed speed = 0.65 * (1+talents[oh].speed);// =SquareRoot(maxrange*grav); //Speed
    fixed z;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    int ui;
    ps = Point(x + 1 * Cos(a), y + 1 * Sin(a));
    u = CreateProjectileSize(ps,p, ObjectGetHeight(hi) + 0.7,UnitGetOwner(h),"projectileMissileLauncher",115 );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.2;
    bounce[ui].radius = 0.3;
    bounce[ui].damage = 15*(1+talents[oh].damage);
    objects[ui].gravity = true;
    bounce[ui].bouncefunc = BounceMissileLauncher;
    collide[ui].collideable = false;
    z = WorldHeight(c_heightMapGround,p) + 0.7 - UnitGetHeight(u);
    objects[ui].vx = Cos(a)*speed;
    objects[ui].vy = Sin(a)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Rocket Launcher
//--------------------------------------------------------------------------------------------------
void RocketLauncherActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed dx = PointGetX(p) - PointGetX(UnitGetPosition(h));
    fixed dy = PointGetY(p) - PointGetY(UnitGetPosition(h));
    fixed a = AngleBetweenPoints(UnitGetPosition(h), p);
    fixed maxrange = 22 * (1+talents[oh].range); //Max Range
    fixed range = MinF(SquareRoot(dx*dx+dy*dy), maxrange);//Actual Range
    fixed grav = gravaccel*0.75;
    fixed speed = 0.65 * (1+talents[oh].speed);// =SquareRoot(maxrange*grav); //Speed
    fixed z;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    int ui;
    ps = Point(x + 1 * Cos(a), y + 1 * Sin(a));
    u = CreateProjectileSize(ps,p, ObjectGetHeight(hi) + 0.7,UnitGetOwner(h),"projectileMissileLauncher",115 );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.2;
    bounce[ui].radius = 0.3;
    bounce[ui].damage = 15*(1+talents[oh].damage);
    objects[ui].gravity = true;
    bounce[ui].bouncefunc = BounceRocketLauncher;
    collide[ui].collideable = false;
    z = WorldHeight(c_heightMapGround,p) + 0.7 - UnitGetHeight(u);
    objects[ui].vx = Cos(a)*speed;
    objects[ui].vy = Sin(a)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Hellfire Launcher
//--------------------------------------------------------------------------------------------------
void HellfireLauncherActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed dx = PointGetX(p) - PointGetX(UnitGetPosition(h));
    fixed dy = PointGetY(p) - PointGetY(UnitGetPosition(h));
    fixed a = AngleBetweenPoints(UnitGetPosition(h), p);
    fixed maxrange = 22 * (1+talents[oh].range); //Max Range
    fixed range = MinF(SquareRoot(dx*dx+dy*dy), maxrange);//Actual Range
    fixed grav = gravaccel*0.75;
    fixed speed = 0.65 * (1+talents[oh].speed);// =SquareRoot(maxrange*grav); //Speed
    fixed z;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    int ui;
    ps = Point(x + 1 * Cos(a), y + 1 * Sin(a));
    u = CreateProjectileSize(ps,p, ObjectGetHeight(hi) + 0.7,UnitGetOwner(h),"projectileMissileLauncher",115 );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    PlayerCreateEffectUnit(UnitGetOwner(h), "EndowHellfire", u);
    collide[ui].hitradius = 0.1;
    bounce[ui].radius = 0.2;
    bounce[ui].damage = 9*(1+talents[oh].damage);
    objects[ui].gravity = true;
    bounce[ui].bouncefunc = BounceMissileLauncher;
    collide[ui].collideable = false;
    z = WorldHeight(c_heightMapGround,p)+ 0.7 - UnitGetHeight(u);
    objects[ui].vx = Cos(a)*speed;
    objects[ui].vy = Sin(a)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}
void CheckHellfire(unit u)
{
    int ui = FixedToInt(UnitGetCustomValue(u,0));
    fixed vx;
    fixed vy;
    fixed vz;
    int owner;
    fixed height;
    point ps;
    point pt;
    int i = 0;
    int ci;
    unit c;
    if (objects[ui].vz < 0)
    {
        vx = objects[ui].vx;
        vy = objects[ui].vy;
        vz = objects[ui].vz;
        ps = UnitGetPosition(u);
        pt = Point(PointGetX(ps) + vx*10,PointGetY(ps)+ vy*10);
        height = ObjectGetHeight(ui);
        owner = objects[ui].owner;
        RemoveObject(ui, "kill");
        while (i < 6)
        {
            c = CreateProjectileSize(ps,pt, height,owner,"projectileMissileLauncher",40 );
            ci = FixedToInt(UnitGetCustomValue(c,0));
            collide[ci].hitradius = 0.1;
            bounce[ci].radius = 0.2;
            bounce[ci].damage = 5*(1+talents[owner].damage);
            objects[ci].gravity = true;
            bounce[ci].bouncefunc = BounceHellfireScatter;
            collide[ci].collideable = false;
            objects[ci].vx = vx + RandomFixed(-.3,.3);
            objects[ci].vy = vy + RandomFixed(-.3,.3);
            objects[ci].vz = vz;
            i += 1;
        }
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Shrapnel Gun
//--------------------------------------------------------------------------------------------------
void ShrapnelGunActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed dx = PointGetX(p) - PointGetX(UnitGetPosition(h));
    fixed dy = PointGetY(p) - PointGetY(UnitGetPosition(h));
    fixed a = AngleBetweenPoints(UnitGetPosition(h), p);
    fixed maxrange = 18 * (1+ talents[oh].range); //Max Range
    fixed range = MinF(SquareRoot(dx*dx+dy*dy), maxrange);//Actual Range
    fixed grav = gravaccel;
    fixed speed = .7 * (1+talents[oh].speed);// =SquareRoot(maxrange*grav); //Speed
    fixed z;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    int ui;
    ps = Point(x + 1 * Cos(a), y + 1 * Sin(a));
    u = CreateProjectileSize(ps,p, ObjectGetHeight(hi) + 0.7,UnitGetOwner(h),"projectileShrapnel",115 );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.38;
    collide[ui].damage = 38 * (1+talents[oh].damage);
    bounce[ui].damage = 20 *(1+talents[oh].damage);
    objects[ui].gravity = true;
    bounce[ui].radius = 0.25;
    bounce[ui].restitution = 0.3;
    bounce[ui].bouncefunc = BounceShrapnel;
    collide[ui].collidefunc = CollideShrapnel;
    z = WorldHeight(c_heightMapGround,p) - UnitGetHeight(u);
    objects[ui].vx = Cos(a)*speed;
    objects[ui].vy = Sin(a)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Mortar Gun
//--------------------------------------------------------------------------------------------------
void MortarGunActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed dx = PointGetX(p) - PointGetX(UnitGetPosition(h));
    fixed dy = PointGetY(p) - PointGetY(UnitGetPosition(h));
    fixed a = AngleBetweenPoints(UnitGetPosition(h), p);
    fixed maxrange = 18 * (1+ talents[oh].range); //Max Range
    fixed range = MinF(SquareRoot(dx*dx+dy*dy), maxrange);//Actual Range
    fixed grav = gravaccel;
    fixed speed = .7 * (1+talents[oh].speed);// =SquareRoot(maxrange*grav); //Speed
    fixed z;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    int ui;
    ps = Point(x + 1 * Cos(a), y + 1 * Sin(a));
    u = CreateProjectileSize(ps,p, ObjectGetHeight(hi) + 0.7,UnitGetOwner(h),"projectileShrapnel",115 );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.38;
    collide[ui].damage = 38 * (1+talents[oh].damage);
    bounce[ui].damage = 20 *(1+talents[oh].damage);
    objects[ui].gravity = true;
    bounce[ui].radius = 0.25;
    bounce[ui].restitution = 0.3;
    collide[ui].force = 0.5;
    bounce[ui].bouncefunc = BounceMortar;
    collide[ui].collidefunc = CollideShrapnel;
    z = WorldHeight(c_heightMapGround,p) - UnitGetHeight(u);
    objects[ui].vx = Cos(a)*speed;
    objects[ui].vy = Sin(a)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Shard Gun
//--------------------------------------------------------------------------------------------------
void ShardGunActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed dx = PointGetX(p) - PointGetX(UnitGetPosition(h));
    fixed dy = PointGetY(p) - PointGetY(UnitGetPosition(h));
    fixed a = AngleBetweenPoints(UnitGetPosition(h), p);
    fixed maxrange = 18 * (1+ talents[oh].range); //Max Range
    fixed range = MinF(SquareRoot(dx*dx+dy*dy), maxrange);//Actual Range
    fixed grav = gravaccel;
    fixed speed = .7 * (1+talents[oh].speed);// =SquareRoot(maxrange*grav); //Speed
    fixed z;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    int ui;
    ps = Point(x + 1 * Cos(a), y + 1 * Sin(a));
    u = CreateProjectileSize(ps,p, ObjectGetHeight(hi) + 0.7,UnitGetOwner(h),"projectileShrapnel",115 );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.38;
    collide[ui].damage = 38 * (1+talents[oh].damage);
    bounce[ui].damage = 20 *(1+talents[oh].damage);
    objects[ui].gravity = true;
    bounce[ui].radius = 0.25;
    bounce[ui].restitution = 0.3;
    bounce[ui].bouncefunc = BounceShard;
    collide[ui].collidefunc = CollideShrapnel;
    z = WorldHeight(c_heightMapGround,p) - UnitGetHeight(u);
    objects[ui].vx = Cos(a)*speed;
    objects[ui].vy = Sin(a)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Machine Gun
//--------------------------------------------------------------------------------------------------
void MachineGunActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    point pt;
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed nx;
    fixed ny;
    fixed dx = x - PointGetX(p);
    fixed dy = y - PointGetY(p);
    fixed j;
    fixed angle = AngleBetweenPoints(ph, p);
    fixed inc = 0;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    fixed range;
    fixed maxrange = 15;
    fixed zh = WorldHeight(c_heightMapGround, p);
    fixed dz = 0;
    fixed d = SquareRoot(dx*dx+dy*dy);
    point ps; 
    int ui;
    fixed speed = 0.65 *(1 + talents[oh].speed);
    j = IntToFixed(RandomInt(0, 6)-3);       
    x += 0.5*Cos(angle);
    y += 0.5*Sin(angle);
    nx = Cos((j*4)+angle)*10 + x;
    ny = Sin((j*4)+angle)*10 + y;
    angle = (j*4)+angle;
    ps = Point(x,y);
    pt = Point(nx,ny);
    u = CreateProjectile(ps,pt, ObjectGetHeight(hi)+ 0.7,UnitGetOwner(h),"projectileMachineGun" );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.225 *(1 + talents[oh].radius);
    collide[ui].damage = 10 *(1 + talents[oh].damage);
    objects[ui].gravity = false;
    collide[ui].collidefunc = CollideMachineGun;
    bounce[ui].bouncefunc = BounceKill;
    bounce[ui].radius = 0.12;
    dz = zh+0.7-ObjectGetHeight(ui);
    if (dz < 0.35) { dz = 0;}
    inc = ATan(dz/d);
    objects[ui].vx = speed*Cos(inc)*Cos(angle);
    objects[ui].vy = speed*Cos(inc)*Sin(angle);
    objects[ui].vz = speed*Sin(inc);//???????????
        //SetVelocity(ui,ph,Point(nx,ny),zh, speed + RandomFixed(-0.1,0.1));
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Gatling Gun
//--------------------------------------------------------------------------------------------------
void GatlingGunActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    point pt;
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed dx;
    fixed dy;
    fixed nx;
    fixed ny;
    fixed j;
    fixed angle = AngleBetweenPoints(ph,p);
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    fixed zh = WorldHeight(c_heightMapGround, p) + 0.7;
    point ps;
    int ui;
    fixed speed = 0.65 *(1 + talents[oh].speed);
    fixed z;
    fixed maxrange = 13 * (1 + talents[oh].range); //Max Range
    fixed range = MinF(DistanceBetweenPoints(p,ph), maxrange);
    fixed grav = gravaccel*0.75;
    range += RandomFixed(-1.5,1.5);
    j = IntToFixed(RandomInt(0, 4)-2);
    x += 0.75*Cos(angle);
    y += 0.75*Sin(angle);
    nx = Cos((j*4)+angle)*10 + x;
    ny = Sin((j*4)+angle)*10 + y;
    ps = Point(x,y);
    pt = Point(nx,ny);
    angle = AngleBetweenPoints(ps,pt);
    u = CreateProjectile(ps,pt, ObjectGetHeight(hi)+ 0.7,UnitGetOwner(h),"projectileGatlingGun" );
    if (zh == WorldHeight(c_heightMapGround, ph))
    {
        z = 0;
    }
    else
    {
        z = zh - UnitGetHeight(u);
    }
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.225 *(1 + talents[oh].radius);
    collide[ui].damage = 10 *(1 + talents[oh].damage);
    objects[ui].gravity = true;
    collide[ui].collidefunc = CollideMachineGun;
    bounce[ui].bouncefunc = BounceKill;
    bounce[ui].radius = 0.12;
    objects[ui].vx = Cos(angle)*speed;
    objects[ui].vy = Sin(angle)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Reaper Gun
//--------------------------------------------------------------------------------------------------
void ReaperGunActions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    point pt;
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed nx;
    fixed ny;
    fixed j;
    fixed angle = AngleBetweenPoints(UnitGetPosition(h), p);
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    fixed zh = WorldHeight(c_heightMapGround, p);
    point ps;
    int ui;
    fixed speed = 0.65 *(1 + talents[oh].speed);
    j = IntToFixed(RandomInt(0, 6)-3);
    x += 0.5*Cos(angle);
    y += 0.5*Sin(angle);
    nx = Cos((j*4)+angle)*10 + x;
    ny = Sin((j*4)+angle)*10 + y;
    ps = Point(x,y);
    pt = Point(nx,ny);
    u = CreateProjectile(ps,pt, ObjectGetHeight(hi)+ 0.7,UnitGetOwner(h),"projectileMachineGun" );
    if (zh == WorldHeight(c_heightMapGround, ph))
    {
        zh = UnitGetHeight(u);
    }
    ui = FixedToInt(UnitGetCustomValue(u,0));
    bounce[ui].radius = 0.225 *(1 + talents[oh].radius);
    collide[ui].damage = 11 *(1 + talents[oh].damage);
    objects[ui].gravity = false;
    collide[ui].collidefunc = CollideReaperGun;
    bounce[ui].bouncefunc = BounceKill;
    bounce[ui].radius = 0.12;
    SetVelocity(ui,ph,Point(nx,ny),zh, speed + RandomFixed(-0.1,0.1));
    //setPointVelocitySpray(u,Point(nx,ny), p, .75);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Rifle
//--------------------------------------------------------------------------------------------------
void RifleActions(unit h, point p)
{ 
    unit u;
    int oh = UnitGetOwner(h);
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ph = UnitGetPosition(h);
    point ps;
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    int ui;
    fixed angle = AngleBetweenPoints(UnitGetPosition(h), p);
    fixed speed = 1.25*(talents[oh].speed+1);
    ps = Point(x + 1 * Cos(angle), y + 1 * Sin(angle));
    u = CreateProjectile(ps,p, ObjectGetHeight(hi) + 0.7,UnitGetOwner(h),"projectileEchoRifle" );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    objects[ui].gravity = false;
    collide[ui].damage = (40*(1 + talents[oh].damage));
    collide[ui].hitradius = 0.22*(1 + talents[oh].radius);
    bounce[ui].radius = .1;
    bounce[ui].bouncefunc = BounceKill;
    collide[ui].collidefunc = CollideRifle;
    SetVelocity(ui,ph,p,WorldHeight(c_heightMapGround,p), speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Sniper Rifle
//--------------------------------------------------------------------------------------------------
void SniperRifleActions(unit h, point p)
{ 
    unit u;
    int oh = UnitGetOwner(h);
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ph = UnitGetPosition(h);
    point ps;
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    int ui;
    fixed angle = AngleBetweenPoints(UnitGetPosition(h), p);
    fixed speed = 1.25*(talents[oh].speed+1);
    ps = Point(x + 1 * Cos(angle), y + 1 * Sin(angle));
    u = CreateProjectile(ps,p, ObjectGetHeight(hi) + 0.7,UnitGetOwner(h),"projectileSniperRifle" );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    objects[ui].gravity = false;
    collide[ui].damage = (50*(1 + talents[oh].damage));
    collide[ui].hitradius = 0.22*(1 + talents[oh].radius);
    bounce[ui].radius = .1;
    bounce[ui].bouncefunc = BounceKill;
    collide[ui].collidefunc = CollideRifle;
    SetVelocity(ui,ph,p,WorldHeight(c_heightMapGround,p), speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Assault Rifle
//--------------------------------------------------------------------------------------------------
void AssaultRifleActions(unit h, point p)
{ 
    unit u;
    int oh = UnitGetOwner(h);
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ph = UnitGetPosition(h);
    point ps;
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    int ui;
    fixed angle = AngleBetweenPoints(UnitGetPosition(h), p);
    fixed speed = 1.25*(talents[oh].speed+1);
    ps = Point(x + 1 * Cos(angle), y + 1 * Sin(angle));
    u = CreateProjectile(ps,p, ObjectGetHeight(hi) + 0.7,UnitGetOwner(h),"projectileEchoRifle" );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    objects[ui].gravity = false;
    collide[ui].damage = (40*(1 + talents[oh].damage));
    collide[ui].hitradius = 0.22*(1 + talents[oh].radius);
    bounce[ui].radius = .1;
    bounce[ui].bouncefunc = BounceKill;
    collide[ui].collidefunc = CollideRifle;
    SetVelocity(ui,ph,p,WorldHeight(c_heightMapGround,p), speed);
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Flame 2
//--------------------------------------------------------------------------------------------------
void FlameThrower2Actions(unit h, point p)
{
    unit u;
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed nx;
    fixed ny;
    fixed j;
    fixed angle = AngleBetweenPoints(ph, p);
    int ui;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    point ps;
    fixed zh = WorldHeight(c_heightMapGround, p);
    x += 0.8 * Cos(angle);
    y += 0.8 * Sin(angle);
    j = RandomFixed(-5,5);
    ps = Point(x,y);
    u = CreateProjectile(ps,p, ObjectGetHeight(hi)+ 0.6,UnitGetOwner(h),"projectileOilFlame" );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    bounce[ui].restitution = 0.33;
    bounce[ui].friction = 0.08;
    objects[ui].gravity = true;
    bounce[ui].radius = 0.3;
    bounce[ui].bouncefunc = BounceFlame;
    collide[ui].collideable = false;
    nx = Cos((j*4)+angle)*3 + x;
    ny = Sin((j*4)+angle)*3 + y;
    SetVelocity(ui,ph,Point(nx,ny),zh,0.44+ RandomFixed(0,0.05));
    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Ignitor
//--------------------------------------------------------------------------------------------------
void IgnitorActions(unit h, point p)
{
    unit u;
    point ph = UnitGetPosition(h);
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed nx;
    fixed ny;
    fixed j;
    fixed angle = AngleBetweenPoints(ph, p);
    int ui;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    int oh = UnitGetOwner(h);
    point ps;
    point pt;
    fixed zh = WorldHeight(c_heightMapGround, p);
    fixed speed = 0.65 *(1 + talents[oh].speed);
    fixed z;
    fixed maxrange = 14 * (1 + talents[oh].range); //Max Range
    fixed range = MinF(DistanceBetweenPoints(p,ph), maxrange);
    fixed grav = gravaccel*0.75;
    range += RandomFixed(-0.5,0.5);
    x += 0.8 * Cos(angle);
    y += 0.8 * Sin(angle);
    j = RandomFixed(-1.7,1.7);
    nx = Cos((j*4)+angle)*10 + x;
    ny = Sin((j*4)+angle)*10 + y;
    ps = Point(x,y);
    pt = Point(nx,ny);
    angle = AngleBetweenPoints(ps,pt);
//
    u = CreateProjectile(ps,p, ObjectGetHeight(hi)+ 0.6,UnitGetOwner(h),"projectileOilFlame" );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    if (zh == WorldHeight(c_heightMapGround, ph))
    {
        z = 0;
    }
    else
    {
        z = zh - UnitGetHeight(u);
    }
    bounce[ui].restitution = 0.225;
    objects[ui].gravity = true;
    bounce[ui].radius = 0.3;
    bounce[ui].bouncefunc = BounceStandard;
    collide[ui].collideable = false;
    objects[ui].vx = Cos(angle)*speed;
    objects[ui].vy = Sin(angle)*speed;
    objects[ui].vz = (grav*(range/speed))/2+z/(range/speed);    if (UnitHasBehavior(h, "DoubleDamage"))
    {
    }
    Wait(1.5, c_timeGame);
    RemoveObject(ui,"kill");
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Shotgun
//--------------------------------------------------------------------------------------------------
//Primary
void Shotgun2Actions(unit h, point p)
{ 
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    point ps;
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed angle = AngleBetweenPoints(ph, p);
    fixed nx;
    fixed ny;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    unit u;
    int i = -2;
    int ui;
    fixed zh;
    fixed speed = 0.65 * (1 + talents[oh].speed);
    x += .5*Cos(angle);
    y += .5*Sin(angle);
    ps = Point(x,y);
    zh = WorldHeight(c_heightMapGround, p);
    while (i < 3)
    {
        nx = Cos((i*7.5)+angle)*2 + x;
        ny = Sin((i*7.5)+angle)*2 + y;
        u = CreateProjectile(ps,Point(nx,ny),ObjectGetHeight(hi) + 0.7, UnitGetOwner(h), "projectileScattershot"); //REPLACE NAME W/ UNIT NAME
        ui = FixedToInt(UnitGetCustomValue(u,0));
        collide[ui].damage = 10.5 * (1 + talents[oh].damage);
        collide[ui].force = 0.25 * (1 + talents[oh].push);
        collide[ui].collidefunc = CollideShotgun;
        bounce[ui].bouncefunc = BounceKill;
        collide[ui].hitradius = 0.25 *(1 + talents[oh].radius);
        bounce[ui].radius = 0.12;
        SetVelocity(ui,ph, Point(nx,ny), zh,speed + RandomFixed(-0.05,0.05));
        i+=1;
        UnitCreateEffectUnit(u, "ShotgunTimedLife", u);
        if (UnitHasBehavior(h, "DoubleDamage")) // 
        {
        }
    }       
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Scattergun
//--------------------------------------------------------------------------------------------------
//Primary
void ScattergunActions(unit h, point p)
{ 
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    point ps;
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed angle = AngleBetweenPoints(ph, p);
    fixed nx;
    fixed ny;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    unit u;
    int i = -2;
    int ui;
    fixed zh;
    fixed speed = 0.65 * (1 + talents[oh].speed);
    x += .5*Cos(angle);
    y += .5*Sin(angle);
    ps = Point(x,y);
    zh = WorldHeight(c_heightMapGround, p);
    while (i < 3)
    {
        nx = Cos((i*9.5)+angle)*46 + x;
        ny = Sin((i*9.5)+angle)*46 + y;
        u = CreateProjectile(ps,Point(nx,ny),ObjectGetHeight(hi) + 0.7, UnitGetOwner(h), "projectileScattershot"); //REPLACE NAME W/ UNIT NAME
        ui = FixedToInt(UnitGetCustomValue(u,0));
        collide[ui].damage = 9 * (1 + talents[oh].damage);
        collide[ui].force = .25 * (1 + talents[oh].push);
        collide[ui].collidefunc = CollideShotgun;
        bounce[ui].bouncefunc = BounceKill;
        collide[ui].hitradius = 0.25 *(1 + talents[oh].radius);
        bounce[ui].radius= 0.12;
        SetVelocity(ui,ph, Point(nx,ny), zh,speed + RandomFixed(-0.05,0.12));
        i+=1;
        UnitCreateEffectUnit(u, "ShotgunTimedLife", u); // REPLACE WITH TIMED LIFE BEHAVIOR ADDING EFFECT
        if (UnitHasBehavior(h, "DoubleDamage")) // 
        {
        }
    }       
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Sluggun
//--------------------------------------------------------------------------------------------------
//Primary
void SluggunActions(unit h, point p)
{ 
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    point ps;
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed angle = AngleBetweenPoints(ph, p);
    fixed nx;
    fixed ny;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    unit u;
    int i = -2;
    int ui;
    fixed zh;
    fixed speed = 0.65 * (1 + talents[oh].speed);
    x += .5*Cos(angle);
    y += .5*Sin(angle);
    ps = Point(x,y);
    zh = WorldHeight(c_heightMapGround, p);
    while (i < 3)
    {
        nx = Cos((i*5.3)+angle)*11 + x;
        ny = Sin((i*5.3)+angle)*11 + y;
        u = CreateProjectile(ps,Point(nx,ny),ObjectGetHeight(hi) + 0.7, UnitGetOwner(h), "projectileScattershot"); //REPLACE NAME W/ UNIT NAME
        ui = FixedToInt(UnitGetCustomValue(u,0));
        collide[ui].damage = 9 * (1 + talents[oh].damage);
        collide[ui].force = .3 * (1 + talents[oh].push);
        collide[ui].collidefunc = CollideShotgun;
        bounce[ui].bouncefunc = BounceKill;
        collide[ui].hitradius = 0.25 *(1 + talents[oh].radius);
        bounce[ui].radius = 0.12;
        SetVelocity(ui,ph, Point(nx,ny), zh,speed + RandomFixed(-0.05,0.12));
        i+=1;
        UnitCreateEffectUnit(u, "ShotgunTimedLife", u); // REPLACE WITH TIMED LIFE BEHAVIOR ADDING EFFECT
        if (UnitHasBehavior(h, "DoubleDamage")) // 
        {
        }
    }       
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Spawn Barrel
//--------------------------------------------------------------------------------------------------
void SpawnBarrel()
{
    bool locfound;
    int map = gv_map;
    region rgn = gv_mapRegion;
    point p;
    string Barrel;
    int i = 0;
    if (map == 0)
    {
        Barrel = "ExplosiveBarrel";
    }
    else if (map == 1)
    {
        Barrel = "SewersBarrel";
    }
    else if (map == 2)
    {
        Barrel = "ExplosiveBarrel";
    }
    p = RegionRandomPoint(rgn);
    while (!PointPathingPassable(p) || gf_HeroNearbyCheck(p,7))
    {
        p = RegionRandomPoint(rgn);
        if (i > 3)
        {
            return;
        }
        i += 1;
    }
    gf_SpawnObject(15, Barrel,p);
    gv_barrels += 1;
}
    

//--------------------------------------------------------------------------------------------------
// Custom Script: Auto Machine Gun
//--------------------------------------------------------------------------------------------------
void MachineGun2Actions(unit h, point p)
{
    unit u;
    int oh = UnitGetOwner(h);
    point ph = UnitGetPosition(h);
    point pt;
    fixed x = PointGetX(ph);
    fixed y = PointGetY(ph);
    fixed nx;
    fixed ny;
    fixed dx = x - PointGetX(p);
    fixed dy = y - PointGetY(p);
    fixed j;
    fixed angle = AngleBetweenPoints(ph, p);
    fixed inc = 0;
    int hi = FixedToInt(UnitGetCustomValue(h,0));
    fixed range;
    fixed maxrange = 15;
    fixed zh = WorldHeight(c_heightMapGround, p);
    fixed dz = 0;
    fixed d = SquareRoot(dx*dx+dy*dy);
    point ps; 
    int ui;
    fixed speed = 0.65 *(1 + talents[oh].speed);
    j = IntToFixed(RandomInt(0, 6)-3);       
    x += 0.5*Cos(angle);
    y += 0.5*Sin(angle);
    nx = Cos((j*4)+angle)*10 + x;
    ny = Sin((j*4)+angle)*10 + y;
    angle = (j*4)+angle;
    ps = Point(x,y);
    pt = Point(nx,ny);
    u = CreateProjectile(ps,pt, ObjectGetHeight(hi)+ 0.7,UnitGetOwner(h),"projectileMachineGun" );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    collide[ui].hitradius = 0.225 *(1 + talents[oh].radius);
    collide[ui].damage = 25;
    objects[ui].gravity = false;
    collide[ui].collidefunc = CollideMachineGun;
    bounce[ui].bouncefunc = BounceKill;
    bounce[ui].radius = 0.12;
    dz = zh+0.7-ObjectGetHeight(ui);
    if (dz < 0.35) { dz = 0;}
    inc = ATan(dz/d);
    objects[ui].vx = speed*Cos(inc)*Cos(angle);
    objects[ui].vy = speed*Cos(inc)*Sin(angle);
    objects[ui].vz = speed*Sin(inc);//???????????
        //SetVelocity(ui,ph,Point(nx,ny),zh, speed + RandomFixed(-0.1,0.1));
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Guardian Actions
//--------------------------------------------------------------------------------------------------
void GuardianGrasp(unit c, unit t)
{
    int ti = FixedToInt(UnitGetCustomValue(t,0));
    fixed face = UnitGetFacing(c);
    point pc = UnitGetPosition(c);
    point pt = UnitGetPosition(t);
    fixed cx = PointGetX(pc);
    fixed cy = PointGetY(pc);
    fixed tx = PointGetX(pt);
    fixed ty = PointGetY(pt);
    fixed ang = AngleBetweenPoints(pc,pt);
    point pv = Point(tx + objects[ti].vx, ty + objects[ti].vy);
    fixed angv = AngleBetweenPoints(pt,pv);
    fixed d = DistanceBetweenPoints(pc,pt);
    fixed f = 1;
    fixed zt = WorldHeight(c_heightMapGround,pt) + 1.1;
    fixed dz = zt - objects[ti].z; 
    if (objects[ti].z > WorldHeight(c_heightMapGround,pt) + 3.75)
    {
        return;
    }
    PrintValue("angv: ", angv);
    PrintValue("face: ", face);
    if (d != 0 && 180 - AbsF(angv - face) > 7.5)
    {
        if (Distance3(objects[ti].vx,objects[ti].vy,objects[ti].vz) > .15)
        {
            objects[ti].vx = objects[ti].vx / 1.1;
            objects[ti].vy = objects[ti].vy / 1.1;
            objects[ti].vz = objects[ti].vz / 1.1;
        }
        if (d < 0.1)
        {
            f = -.1;
        }
        f = f*0.2/(d*d);
        objects[ti].vx -= f*Cos(ang);
        objects[ti].vy -= f*Sin(ang);
        f = 0.1/(dz*dz);
        //objects[ti].vz += (dz/AbsF(dz))*f;
    }
}

//--------------------------------------------------------------------------------------------------
// Custom Script: Napalm Strike Actions
//--------------------------------------------------------------------------------------------------
point GetRouteStart(point c, point t)
{
    region arena = gv_mapRegion;
    fixed x = PointGetX(c);
    fixed y = PointGetY(c);
    fixed dx = x-PointGetX(t);
    fixed dy = y-PointGetY(t);
    fixed d = SquareRoot((dx*dx)+(dy*dy));
    while (RegionContainsPoint(arena,Point(x,y)))
    {
        x += dx/d;
        y += dy/d;
    }
    return Point(x,y);
}
point GetRouteEnd(point c, point t)
{
    region arena = gv_mapRegion;
    fixed x = PointGetX(c);
    fixed y = PointGetY(c);
    fixed dx = x-PointGetX(t);
    fixed dy = y-PointGetY(t);
    fixed d = SquareRoot((dx*dx)+(dy*dy));
    while (RegionContainsPoint(arena,Point(x,y)))
    {
        x -= dx/d*3;
        y -= dy/d*3;
    }
    return Point(x,y);
}
void DropNapalm(unit c)
{
    unit u;
    int ui;
    int p = UnitGetOwner(c);
    point ps = UnitGetPosition(c);
    u = CreateProjectile(ps,ps,WorldHeight(c_heightMapGround,ps) + 4.5, p,"projectileHelfire" );
    ui = FixedToInt(UnitGetCustomValue(u,0));
    bounce[ui].restitution = 0.36;
    bounce[ui].friction = 0.08;
    objects[ui].gravity = true;
    bounce[ui].radius = 0.3;
    bounce[ui].bouncefunc = BounceFlame;
    collide[ui].collideable = false;
    objects[ui].vx += RandomFixed(-0.12,0.12); 
    objects[ui].vy += RandomFixed(-0.12,0.12);
}       

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_GameStart () {
    // Variable Declarations
    string lv_name;

    // Variable Initialization
    lv_name = "";

    // Implementation
    libNtve_gf_HideGameUI(true, PlayerGroupAll());
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    gf_DialogUIInterface();
    gf_DialogsMenu();
    gf_DialogsInterface();
    gf_CreateFlags();
    GameSetLighting("Agria", 0.0);
    GameTimeOfDaySet("06:00:00");
    CinematicFade(true, 2.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    if ((gv_map == 0)) {
        CameraSetBounds(PlayerGroupAll(), RegionFromId(5), true);
    }
    else if ((gv_map == 1)) {
        CameraSetBounds(PlayerGroupAll(), RegionFromId(10), true);
    }
    else if ((gv_map == 2)) {
        CameraSetBounds(PlayerGroupAll(), RegionFromId(22), true);
    }
    if ((gv_map == 0)) {
        gv_fallHeight = 1.0;
        gv_mapRegion = RegionFromId(15);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), PointFromId(13), 0.0, -1, 10.0, false);
            libNtve_gf_SwooshCamera(PlayerGroupLoopCurrent(), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 15.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(13), 7.0);
        }
        PlayerGroupLoopEnd();
    }
    else if ((gv_map == 1)) {
        gv_fallHeight = 1.5;
        gv_mapRegion = RegionFromId(16);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), PointFromId(854), 0.0, -1, 10.0, false);
            libNtve_gf_SwooshCamera(PlayerGroupLoopCurrent(), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 15.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(854), 7.0);
        }
        PlayerGroupLoopEnd();
    }
    else if ((gv_map == 2)) {
        gv_fallHeight = 1.5;
        gv_mapRegion = RegionFromId(27);
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), PointFromId(2187), 0.0, -1, 10.0, false);
            libNtve_gf_SwooshCamera(PlayerGroupLoopCurrent(), ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 15.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(2187), 7.0);
        }
        PlayerGroupLoopEnd();
    }
    Wait(1.0, c_timeGame);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gv_weaponsShowing[PlayerGroupLoopCurrent()] = true;
    }
    PlayerGroupLoopEnd();
    gf_DialogsScore();
    if ((gv_map == 0)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(1)), 9.0, -1, 10.0, false);
        }
        PlayerGroupLoopEnd();
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(2)), 9.0, -1, 10.0, false);
        }
        PlayerGroupLoopEnd();
    }
    else if ((gv_map == 1)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(6)), 9.0, -1, 10.0, false);
        }
        PlayerGroupLoopEnd();
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(7)), 9.0, -1, 10.0, false);
        }
        PlayerGroupLoopEnd();
    }
    else if ((gv_map == 2)) {
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(23)), 9.0, -1, 10.0, false);
        }
        PlayerGroupLoopEnd();
        PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraPan(PlayerGroupLoopCurrent(), RegionGetCenter(RegionFromId(24)), 9.0, -1, 10.0, false);
        }
        PlayerGroupLoopEnd();
    }
    gv_gameStarted = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1033B7E3"));
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealerEnable(gv_revealer[PlayerGroupLoopCurrent()], false);
    }
    PlayerGroupLoopEnd();
    if ((gv_map == 0)) {
        MinimapPing(GameAttributePlayersForTeam(1), PointFromId(1), 8.0, Color(100.00, 0.00, 0.00));
        MinimapPing(GameAttributePlayersForTeam(2), PointFromId(2), 8.0, Color(100.00, 0.00, 0.00));
    }
    else if ((gv_map == 1)) {
        MinimapPing(GameAttributePlayersForTeam(1), PointFromId(879), 8.0, Color(100.00, 0.00, 0.00));
        MinimapPing(GameAttributePlayersForTeam(2), PointFromId(856), 8.0, Color(100.00, 0.00, 0.00));
    }
    else if ((gv_map == 2)) {
        MinimapPing(GameAttributePlayersForTeam(1), PointFromId(2188), 8.0, Color(100.00, 0.00, 0.00));
        MinimapPing(GameAttributePlayersForTeam(2), PointFromId(2189), 8.0, Color(100.00, 0.00, 0.00));
    }
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_map == 0)) {
            gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(1)));
        }
        else if ((gv_map == 1)) {
            gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(6)));
        }
        else if ((gv_map == 2)) {
            gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(23)));
        }
        gf_WeaponsCheck(PlayerGroupLoopCurrent());
        gf_TalentsCheck(PlayerGroupLoopCurrent());
        gf_ItemsCheck(PlayerGroupLoopCurrent());
        gf_StreaksCheck(PlayerGroupLoopCurrent());
        gv_playerMinerals[PlayerGroupLoopCurrent()] += 30;
        gv_streaksActual[PlayerGroupLoopCurrent()][1] = 1;
        gv_streaksCurrent[PlayerGroupLoopCurrent()][1] = 1;
        UnitBehaviorAdd(UnitLastCreated(), "Invulnerable", UnitLastCreated(), 1);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 10.0, false);
        UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
        UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
        TextTagCreate(PlayerName(PlayerGroupLoopCurrent()), 15, UnitGetPosition(UnitLastCreated()), 2.0, true, false, GameAttributePlayersForTeam(1));
        gv_textTags[PlayerGroupLoopCurrent()] = TextTagLastCreated();
        lv_name = PlayerHandle(PlayerGroupLoopCurrent());
        if (((lv_name == "2-S2-1-232484") || (lv_name == "2-S2-1-583308"))) {
            TextTagSetColor(gv_textTags[PlayerGroupLoopCurrent()], c_textTagColorText, Color(100.00, 74.90, 0.00));
        }
        else {
            TextTagSetColor(gv_textTags[PlayerGroupLoopCurrent()], c_textTagColorText, Color(100.00, 0.00, 0.00));
        }
        TextTagAttachToUnit(gv_textTags[PlayerGroupLoopCurrent()], UnitLastCreated(), 1.5);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_map == 0)) {
            gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(2)));
        }
        else if ((gv_map == 1)) {
            gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(7)));
        }
        else if ((gv_map == 2)) {
            gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(24)));
        }
        gf_WeaponsCheck(PlayerGroupLoopCurrent());
        gf_TalentsCheck(PlayerGroupLoopCurrent());
        gf_ItemsCheck(PlayerGroupLoopCurrent());
        gf_StreaksCheck(PlayerGroupLoopCurrent());
        gv_playerMinerals[PlayerGroupLoopCurrent()] += 30;
        gv_streaksActual[PlayerGroupLoopCurrent()][1] = 1;
        gv_streaksCurrent[PlayerGroupLoopCurrent()][1] = 1;
        UnitBehaviorAdd(UnitLastCreated(), "Invulnerable", UnitLastCreated(), 1);
        CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 10.0, false);
        UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
        UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
        TextTagCreate(PlayerName(PlayerGroupLoopCurrent()), 15, UnitGetPosition(UnitLastCreated()), 2.0, true, false, GameAttributePlayersForTeam(2));
        TextTagShow(TextTagLastCreated(), GameAttributePlayersForTeam(3), true);
        gv_textTags[PlayerGroupLoopCurrent()] = TextTagLastCreated();
        lv_name = PlayerHandle(PlayerGroupLoopCurrent());
        UnitBehaviorAdd(gv_playerUnits[PlayerGroupLoopCurrent()], "Grenade", gv_playerUnits[PlayerGroupLoopCurrent()], 1);
        gv_itemsGrenade[PlayerGroupLoopCurrent()] += 1;
        PlayerCreateEffectUnit(PlayerGroupLoopCurrent(), "AddGrenadeCharge", gv_playerUnits[PlayerGroupLoopCurrent()]);
        if (((lv_name == "2-S2-1-232484") || (lv_name == "2-S2-1-583308"))) {
            TextTagSetColor(gv_textTags[PlayerGroupLoopCurrent()], c_textTagColorText, Color(100.00, 74.90, 0.00));
        }
        else {
            TextTagSetColor(gv_textTags[PlayerGroupLoopCurrent()], c_textTagColorText, Color(0,66*100/255,100));
        }
        TextTagAttachToUnit(gv_textTags[PlayerGroupLoopCurrent()], UnitLastCreated(), 1.5);
    }
    PlayerGroupLoopEnd();
    SpawnBarrel();
    SpawnBarrel();
    SpawnBarrel();
    SpawnBarrel();
    SpawnBarrel();
    SpawnBarrel();
    SpawnBarrel();
    SpawnBarrel();
    if ((gv_map == 1)) {
        TriggerEnable(gt_SewersSlowingWater, true);
    }
    else {
    }
    TriggerEnable(gt_BarrelsPeriodic, true);
    TriggerEnable(gt_PowerupsPeriodic, true);
    TriggerEnable(gt_RespawnTimer, true);
    TriggerEnable(gt_GameTimer, true);
    SoundPlay(SoundLink("UI_Bnet_MatchCountdownGo", -1), PlayerGroupAll(), 100.0, 0.0);
}

void gf_GameEnd (int lp_winners, int lp_loosers) {
    // Implementation
    if ((lp_winners == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/C8B294CF")));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/88BB4842")));
    }
    CinematicFade(false, 9.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(7.0, c_timeGame);
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(lp_winners));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(lp_loosers));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        GameOver(PlayerGroupLoopCurrent(), c_gameOverDefeat, true, true);
    }
    PlayerGroupLoopEnd();
}

void gf_TipsDisplay () {
    // Variable Declarations
    int lv_r;

    // Variable Initialization

    // Implementation
    lv_r = RandomInt(1, gv_tipsCounter);
    SoundPlay(SoundLink("UI_CampaignHintNotify", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/F8E3920C") + gv_tips[lv_r]));
    gv_tips[lv_r] = gv_tips[gv_tipsCounter];
    gv_tipsCounter -= 1;
}

void gf_WeaponsCheck (int lp_player) {
    // Implementation
    if ((gv_interfaceWeaponsCurrent[lp_player] == 1)) {
        if ((gv_interfaceAddOnsCurrent[lp_player] == 1)) {
            UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponSniperRifle", gv_playerUnits[lp_player], 1);
        }
        else {
            if ((gv_interfaceAddOnsCurrent[lp_player] == 2)) {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponAssaultRifle", gv_playerUnits[lp_player], 1);
            }
            else {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponRifle", gv_playerUnits[lp_player], 1);
            }
        }
    }
    else if ((gv_interfaceWeaponsCurrent[lp_player] == 2)) {
        if ((gv_interfaceAddOnsCurrent[lp_player] == 3)) {
            UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponGatlingGun", UnitLastCreated(), 1);
        }
        else {
            if ((gv_interfaceAddOnsCurrent[lp_player] == 4)) {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponReaperGun", gv_playerUnits[lp_player], 1);
            }
            else {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponMachineGun", gv_playerUnits[lp_player], 1);
            }
        }
    }
    else if ((gv_interfaceWeaponsCurrent[lp_player] == 3)) {
        if ((gv_interfaceAddOnsCurrent[lp_player] == 5)) {
            UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponMortarGun", gv_playerUnits[lp_player], 1);
        }
        else {
            if ((gv_interfaceAddOnsCurrent[lp_player] == 6)) {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponShardGun", gv_playerUnits[lp_player], 1);
            }
            else {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponShrapnelGun", gv_playerUnits[lp_player], 1);
            }
        }
    }
    else if ((gv_interfaceWeaponsCurrent[lp_player] == 4)) {
        if ((gv_interfaceAddOnsCurrent[lp_player] == 7)) {
            UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponSlimeGun", gv_playerUnits[lp_player], 1);
        }
        else {
            if ((gv_interfaceAddOnsCurrent[lp_player] == 8)) {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponViperGun", gv_playerUnits[lp_player], 1);
            }
            else {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponAcidGun", gv_playerUnits[lp_player], 1);
            }
        }
    }
    else if ((gv_interfaceWeaponsCurrent[lp_player] == 5)) {
        if ((gv_interfaceAddOnsCurrent[lp_player] == 9)) {
            UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponRocketLauncher", gv_playerUnits[lp_player], 1);
        }
        else {
            if ((gv_interfaceAddOnsCurrent[lp_player] == 10)) {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponHellfireLauncher", gv_playerUnits[lp_player], 1);
            }
            else {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponMissileLauncher", gv_playerUnits[lp_player], 1);
            }
        }
    }
    else if ((gv_interfaceWeaponsCurrent[lp_player] == 6)) {
        if ((gv_interfaceAddOnsCurrent[lp_player] == 11)) {
            UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponScattergun", gv_playerUnits[lp_player], 1);
        }
        else {
            if ((gv_interfaceAddOnsCurrent[lp_player] == 12)) {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponSluggun", gv_playerUnits[lp_player], 1);
            }
            else {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponShotgun", gv_playerUnits[lp_player], 1);
            }
        }
    }
    else if ((gv_interfaceWeaponsCurrent[lp_player] == 7)) {
        if ((gv_interfaceAddOnsCurrent[lp_player] == 13)) {
            UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponFlamethrower", gv_playerUnits[lp_player], 1);
        }
        else {
            if ((gv_interfaceAddOnsCurrent[lp_player] == 14)) {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponFlamethrower", gv_playerUnits[lp_player], 1);
            }
            else {
                UnitBehaviorAdd(gv_playerUnits[lp_player], "WeaponFlamethrower", gv_playerUnits[lp_player], 1);
            }
        }
    }
}

void gf_TalentsCheck (int lp_player) {
    // Implementation
    gv_talentsActual[lp_player] = gv_talentsCurrent[lp_player];
    talents[lp_player].damage = 0;
    if ((gv_talentsCurrent[lp_player] == 1)) {
        UnitBehaviorAdd(gv_playerUnits[lp_player], "Health", gv_playerUnits[lp_player], 1);
    }
    else if ((gv_talentsCurrent[lp_player] == 2)) {
        UnitBehaviorAdd(gv_playerUnits[lp_player], "Boots", gv_playerUnits[lp_player], 1);
    }
    else if ((gv_talentsCurrent[lp_player] == 3)) {
        UnitBehaviorAdd(gv_playerUnits[lp_player], "Regeneration", gv_playerUnits[lp_player], 1);
    }
    else if ((gv_talentsCurrent[lp_player] == 4)) {
        UnitBehaviorAdd(gv_playerUnits[lp_player], "FlagRunner", gv_playerUnits[lp_player], 1);
    }
    else if ((gv_talentsCurrent[lp_player] == 5)) {
        UnitBehaviorAdd(gv_playerUnits[lp_player], "FlagRunner", gv_playerUnits[lp_player], 1);
    }
    else if ((gv_talentsCurrent[lp_player] == 6)) {
        talents[lp_player].damage += 0.08;
    }
    else if ((gv_talentsCurrent[lp_player] == 7)) {
        UnitBehaviorAdd(gv_playerUnits[lp_player], "Barrier", gv_playerUnits[lp_player], 1);
        gv_itemsBarrier[lp_player] = 1;
        PlayerCreateEffectUnit(lp_player, "AddBarrierCharge", gv_playerUnits[lp_player]);
    }
    else if ((gv_talentsCurrent[lp_player] == 8)) {
        UnitBehaviorAdd(gv_playerUnits[lp_player], "Grenade", gv_playerUnits[lp_player], 1);
        gv_itemsGrenade[lp_player] = 1;
        PlayerCreateEffectUnit(lp_player, "AddGrenadeCharge", gv_playerUnits[lp_player]);
    }
    else if ((gv_talentsCurrent[lp_player] == 9)) {
        UnitBehaviorAdd(gv_playerUnits[lp_player], "CamDrone", gv_playerUnits[lp_player], 1);
        gv_itemsCamDrone[lp_player] = 1;
        PlayerCreateEffectUnit(lp_player, "AddCamCharge", gv_playerUnits[lp_player]);
    }
    else if ((gv_talentsCurrent[lp_player] == 10)) {
        UnitBehaviorAdd(gv_playerUnits[lp_player], "Shield", gv_playerUnits[lp_player], 1);
        gv_itemsShield[lp_player] = 1;
        PlayerCreateEffectUnit(lp_player, "AddShieldCharge", gv_playerUnits[lp_player]);
    }
    else if ((gv_talentsCurrent[lp_player] == 11)) {
        gv_itemsMedKit[lp_player] = 1;
        PlayerCreateEffectUnit(lp_player, "AddMedkit", gv_playerUnits[lp_player]);
    }
    else if ((gv_talentsCurrent[lp_player] == 12)) {
        UnitBehaviorAdd(gv_playerUnits[lp_player], "RocketJump", gv_playerUnits[lp_player], 1);
        gv_itemsRocketPack[lp_player] = 1;
        PlayerCreateEffectUnit(lp_player, "AddRocketJump", gv_playerUnits[lp_player]);
    }
}

void gf_CharacterCheck (int lp_player) {
    // Implementation
    if ((((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), lp_player) == true) && ((libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(11)) == true) || (libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(28)) == true))) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), lp_player) == true) && ((libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(12)) == true) || (libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(14)) == true) || (libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(29)) == true))))) {
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponRifle", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponSniperRifle", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponAssaultRifle", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponMachineGun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponGatlingGun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponReaperGun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponShrapnelGun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponMortarGun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponShardGun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponAcidGun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponSlimeGun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponViperGun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponMissileLauncher", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponRocketLauncher", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponHellfireLauncher", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponShotgun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponSluggun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponScattergun", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponFlamethrower", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponIgnitor", 1);
        UnitBehaviorRemove(gv_playerUnits[lp_player], "WeaponIgnitor", 1);
        gf_WeaponsCheck(lp_player);
    }
    else {
        if ((gv_gameStarted == false)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/D7DD497E"));
        }
        else {
        }
    }
}

void gf_StreaksCheck (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_k;
    int lv_e;

    // Variable Initialization

    // Implementation
    while ((lv_i < 3)) {
        while ((lv_k < 3)) {
            if ((gv_streaksEarned[lp_player][lv_i][lv_k] != 0)) {
                lv_e = 0;
                while ((lv_e < gv_streaksEarned[lp_player][lv_i][lv_k])) {
                    UnitInventoryCreate(gv_playerUnits[lp_player], gv_streaksItemTypes[lv_i][lv_k]);
                    lv_e += 1;
                }
            }
            else {
            }
            lv_k += 1;
        }
        lv_i += 1;
    }
}

void gf_ItemsCheck (int lp_player) {
    // Variable Declarations
    int lv_k;
    int lv_e;

    // Variable Initialization

    // Implementation
    while ((lv_k < 6)) {
        if ((gv_playerItems[lp_player][lv_k] != 0)) {
            lv_e = 0;
            UnitBehaviorAdd(gv_playerUnits[lp_player], gv_itemBehaviors[lv_k], gv_playerUnits[lp_player], 1);
            while ((lv_e < gv_playerItems[lp_player][lv_k])) {
                PlayerCreateEffectUnit(lp_player, gv_itemChargeEffects[lv_k], gv_playerUnits[lp_player]);
                lv_e += 1;
            }
        }
        else {
        }
        lv_k += 1;
    }
}

bool gf_SpawnAreaCheck (int lp_player) {
    // Implementation
    if ((((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), lp_player) == true) && ((libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(11)) == true) || (libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(13)) == true) || (libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(28)) == true))) || ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), lp_player) == true) && ((libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(12)) == true) || (libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(14)) == true) || (libNtve_gf_UnitInRegion(gv_playerUnits[lp_player], RegionFromId(29)) == true))))) {
        return true;
    }
    else {
        return false;
    }
}

unit gf_SpawnHero (int lp_player, string lp_hero, point lp_point) {
    // Variable Declarations
    string lv_str;
    int lv_i;
    int lv_j;
    int lv_tmpInt;
    unit lv_u;
    int lv_ui;
    bool lv_b;
    int lv_teamm;
    int lv_k;
    int lv_enemy;

    // Variable Initialization
    lv_str = libNtve_gf_ConvertColorToString(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)));
    lv_i = 1;
    lv_j = 1;
    lv_k = 1;

    // Implementation
    gv_streaksActual[lp_player][0] = gv_streaksCurrent[lp_player][0];
    gv_streaksActual[lp_player][1] = gv_streaksCurrent[lp_player][1];
    gv_streaksActual[lp_player][2] = gv_streaksCurrent[lp_player][2];
    CameraLockInput(lp_player, false);
    UnitCreate(1, lp_hero, c_unitCreateIgnorePlacement, lp_player, lp_point, 270.0);
    lv_u = UnitLastCreated();
    lv_ui = NewObject(lv_u);
    objects[lv_ui].z = WorldHeight(c_heightMapGround,UnitGetPosition(lv_u)) + 5;
    UnitSetHeight(lv_u, objects[lv_ui].z, 0);
    //libNtve_gf_SendActorMessageToUnit(lv_u, "HaloSetColor " + lv_str);
    collide[lv_ui].hitradius = .75;
    bounce[lv_ui].restitution = 0.98;
    bounce[lv_ui].bouncefunc = BouncePlayer;
    objects[lv_ui].gravity = true;
    bounce[lv_ui].landable = true;
    bounce[lv_ui].radius = 0.4;
    objects[lv_ui].centerz = 0.35;
    objects[lv_ui].mass = 10;
    if ((gv_skinsCurrent[lp_player] == 2)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "TextureSelectById HellfireMarine");
    }
    else if ((gv_skinsCurrent[lp_player] == 3)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "TextureSelectById EchoMarine");
    }
    else if ((gv_skinsCurrent[lp_player] == 4)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "TextureSelectById ZionMarine");
    }
    else if ((gv_skinsCurrent[lp_player] == 5)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "TextureSelectById ShockTrooper");
    }
    else if ((gv_skinsCurrent[lp_player] == 6)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "TextureSelectById GoldenGoat");
    }
    else if ((gv_skinsCurrent[lp_player] == 7)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "TextureSelectById Burninator");
    }
    else if ((gv_skinsCurrent[lp_player] == 8)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "TextureSelectById EarthMonger");
    }
    else if ((gv_skinsCurrent[lp_player] == 9)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "TextureSelectById FleshWalker");
    }
    else if ((gv_skinsCurrent[lp_player] == 10)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "TextureSelectById Reptile");
    }
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), lp_player) == true)) {
        libNtve_gf_SendActorMessageToUnit(lv_u, "HaloSetColor 255,0,0");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lv_u, "HaloSetColor 0,0,255");
    }
    libNtve_gf_SendActorMessageToUnit(lv_u, "HaloStart");
    CameraPan(lp_player, UnitGetPosition(UnitLastCreated()), 0.0, -1, 10, false);
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    UnitSelect(UnitLastCreated(), lp_player, true);
    return lv_u;
}

unit gf_SpawnObject (int lp_player, string lp_object, point lp_point) {
    // Variable Declarations
    string lv_str;
    int lv_i;
    int lv_j;
    int lv_tmpInt;
    unit lv_u;
    int lv_ui;
    bool lv_b;
    int lv_teamm;

    // Variable Initialization
    lv_str = libNtve_gf_ConvertColorToString(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)));
    lv_i = 1;
    lv_j = 1;

    // Implementation
    CameraLockInput(lp_player, false);
    UnitCreate(1, lp_object, c_unitCreateIgnorePlacement, lp_player, lp_point, 270.0);
    lv_u = UnitLastCreated();
    lv_ui = NewObject(lv_u);
    objects[lv_ui].z = WorldHeight(c_heightMapGround,UnitGetPosition(lv_u)) + 5;
    UnitSetHeight(lv_u, objects[lv_ui].z, 0);
    //libNtve_gf_SendActorMessageToUnit(lv_u, "HaloSetColor " + lv_str);
    collide[lv_ui].hitradius = .75;
    bounce[lv_ui].restitution = 0.1;
    bounce[lv_ui].bouncefunc = BounceLandable;
    objects[lv_ui].gravity = true;
    bounce[lv_ui].landable = true;
    bounce[lv_ui].radius = 0.4;
    objects[lv_ui].centerz = 0.35;
    objects[lv_ui].mass = 3;
    return lv_u;
}

unit gf_SpawnObjectHeight (int lp_player, string lp_object, point lp_point, fixed lp_height) {
    // Variable Declarations
    string lv_str;
    int lv_i;
    int lv_j;
    int lv_tmpInt;
    unit lv_u;
    int lv_ui;
    bool lv_b;
    int lv_teamm;

    // Variable Initialization
    lv_str = libNtve_gf_ConvertColorToString(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)));
    lv_i = 1;
    lv_j = 1;

    // Implementation
    CameraLockInput(lp_player, false);
    UnitCreate(1, lp_object, c_unitCreateIgnorePlacement, lp_player, lp_point, 270.0);
    lv_u = UnitLastCreated();
    lv_ui = NewObject(lv_u);
    objects[lv_ui].z = WorldHeight(c_heightMapGround,UnitGetPosition(lv_u)) + lp_height;
    UnitSetHeight(lv_u, objects[lv_ui].z, 0);
    //libNtve_gf_SendActorMessageToUnit(lv_u, "HaloSetColor " + lv_str);
    collide[lv_ui].hitradius = .75;
    bounce[lv_ui].restitution = 0.1;
    bounce[lv_ui].bouncefunc = BounceLandable;
    objects[lv_ui].gravity = true;
    bounce[lv_ui].landable = true;
    bounce[lv_ui].radius = 0.4;
    objects[lv_ui].centerz = 0.35;
    objects[lv_ui].mass = 3;
    return lv_u;
}

void gf_FlagoffMap (unit lp_u) {
    // Implementation
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), UnitGetOwner(lp_u)) == true)) {
        DialogControlSetVisible(gv_scoreFlagCaptured[1], PlayerGroupAll(), false);
        libNtve_gf_ShowHideUnit(gv_teamFlags[2], false);
        gv_teamFlagCarrier[1] = null;
        gv_teamFlagPicked[1] = false;
        gv_teamFlagActive[1] = false;
        libNtve_gf_KillModel(gv_teamFlagModels[2]);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/0A9FE73E")));
        if ((gv_map == 0)) {
            RegionSetCenter(RegionFromId(3), PointFromId(1));
            UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(3)), 270.0);
        }
        else if ((gv_map == 1)) {
            RegionSetCenter(RegionFromId(3), PointFromId(879));
            UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(9)), 270.0);
        }
        else if ((gv_map == 2)) {
            RegionSetCenter(RegionFromId(3), PointFromId(2189));
            UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(26)), 270.0);
        }
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 18.04, 90.20), 1.0, 0.0));
        gv_teamFlags[2] = UnitLastCreated();
    }
    else {
    }
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), UnitGetOwner(lp_u)) == true)) {
        DialogControlSetVisible(gv_scoreFlagCaptured[2], PlayerGroupAll(), false);
        libNtve_gf_ShowHideUnit(gv_teamFlags[1], false);
        gv_teamFlagCarrier[2] = null;
        gv_teamFlagPicked[2] = false;
        gv_teamFlagActive[2] = false;
        libNtve_gf_KillModel(gv_teamFlagModels[1]);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/C6DB2090")));
        if ((gv_map == 0)) {
            RegionSetCenter(RegionFromId(4), PointFromId(2));
            UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(4)), 270.0);
        }
        else if ((gv_map == 1)) {
            RegionSetCenter(RegionFromId(8), PointFromId(856));
            UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(8)), 270.0);
        }
        else if ((gv_map == 2)) {
            RegionSetCenter(RegionFromId(25), PointFromId(2188));
            UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(25)), 270.0);
        }
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(56.86, 0.00, 0.00), 1.0, 0.0));
        gv_teamFlags[1] = UnitLastCreated();
    }
    else {
    }
}

void gf_Ranks () {
    // Implementation
    DialogCreate(350, 150, c_anchorTopLeft, 0, 75, false);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_rankDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 80, 80, c_anchorTopLeft, 10, 0, StringExternal("Param/Value/CCF0123A"), "Assets\\Textures\\btn-hero-raynor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 225, 50, c_anchorTopLeft, 110, 45, (StringExternal("Param/Value/BCD3082C") + gf_RankGetTitle(0)), Color(100,100,100), false, 2.0);
    gv_rankTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 225, 25, c_anchorTopLeft, 100, 10, StringExternal("Param/Value/619726D9"), "Assets\\Textures\\blue2.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerGroupLoopCurrent() < 9)) {
            gv_rankExperience[PlayerGroupLoopCurrent()] = 100;
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
            libNtve_gf_SetDialogItemText(gv_rankTitle, (StringExternal("Param/Value/D0B35A7F") + gf_RankGetTitle(gv_rankExperience[PlayerGroupLoopCurrent()])), PlayerGroupSingle(PlayerGroupLoopCurrent()));
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), gf_RankGetBar(gv_rankExperience[PlayerGroupLoopCurrent()]), 25, c_anchorTopLeft, 100, 10, StringExternal("Param/Value/15C0096A"), "Assets\\Textures\\red.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_rankBar[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 170, 50, c_anchorTopLeft, 150, 13, StringExternal("Param/Value/233E7435"), Color(100,100,100), false, 2.0);
    gv_rankAmount = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((PlayerGroupLoopCurrent() < 9)) {
            libNtve_gf_SetDialogItemText(gv_rankAmount, (IntToText(gf_RankGetCur(gv_rankExperience[PlayerGroupLoopCurrent()])) + StringExternal("Param/Value/0C265904") + gf_RankGetExp(gv_rankExperience[PlayerGroupLoopCurrent()])), PlayerGroupSingle(PlayerGroupLoopCurrent()));
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
}

void gf_UpdateExp (int lp_player, int lp_experience) {
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaChat, (StringExternal("Param/Value/3D57F679") + IntToText(lp_experience) + StringExternal("Param/Value/0128533F")));
    gv_rankExperience[lp_player] += lp_experience;
    gv_totalExperience[lp_player] += lp_experience;
    libNtve_gf_SetDialogItemText(gv_rankAmount, (IntToText(gf_RankGetCur(gv_rankExperience[lp_player])) + StringExternal("Param/Value/4CB5B12F") + gf_RankGetExp(gv_rankExperience[lp_player])), PlayerGroupSingle(lp_player));
    DialogControlSetSize(gv_rankBar[lp_player], PlayerGroupAll(), gf_RankGetBar(gv_rankExperience[lp_player]), 25);
    libNtve_gf_SetDialogItemText(gv_rankTitle, (StringExternal("Param/Value/A928DFCC") + gf_RankGetTitle(gv_rankExperience[lp_player])), PlayerGroupSingle(lp_player));
}

void gf_RankSetLevels () {
    // Variable Declarations
    int lv_n;

    // Variable Initialization
    lv_n = 1000;

    // Implementation
    IntLoopBegin(1, 27);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        gv_rankLevels[IntLoopCurrent()] = lv_n;
        lv_n += 1050;
    }
    IntLoopEnd();
}

int gf_RankGetBar (int lp_experience) {
    // Variable Declarations
    fixed lv_min;
    fixed lv_max;
    fixed lv_size;

    // Variable Initialization
    lv_size = 225.0;

    // Implementation
    if ((lp_experience < gv_rankLevels[1])) {
        lv_min = (IntToFixed(lp_experience) / gv_rankLevels[1]);
    }
    else if ((lp_experience < gv_rankLevels[2])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[1])) / (gv_rankLevels[2] - gv_rankLevels[1]));
    }
    else if ((lp_experience < gv_rankLevels[3])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[2])) / (gv_rankLevels[3] - gv_rankLevels[2]));
    }
    else if ((lp_experience < gv_rankLevels[4])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[3])) / (gv_rankLevels[4] - gv_rankLevels[3]));
    }
    else if ((lp_experience < gv_rankLevels[5])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[4])) / (gv_rankLevels[5] - gv_rankLevels[4]));
    }
    else if ((lp_experience < gv_rankLevels[6])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[5])) / (gv_rankLevels[6] - gv_rankLevels[5]));
    }
    else if ((lp_experience < gv_rankLevels[7])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[6])) / (gv_rankLevels[7] - gv_rankLevels[6]));
    }
    else if ((lp_experience < gv_rankLevels[8])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[7])) / (gv_rankLevels[8] - gv_rankLevels[7]));
    }
    else if ((lp_experience < gv_rankLevels[9])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[8])) / (gv_rankLevels[9] - gv_rankLevels[8]));
    }
    else if ((lp_experience < gv_rankLevels[10])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[9])) / (gv_rankLevels[10] - gv_rankLevels[9]));
    }
    else if ((lp_experience < gv_rankLevels[11])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[10])) / (gv_rankLevels[11] - gv_rankLevels[10]));
    }
    else if ((lp_experience < gv_rankLevels[12])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[11])) / (gv_rankLevels[12] - gv_rankLevels[11]));
    }
    else if ((lp_experience < gv_rankLevels[13])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[12])) / (gv_rankLevels[13] - gv_rankLevels[12]));
    }
    else if ((lp_experience < gv_rankLevels[14])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[13])) / (gv_rankLevels[14] - gv_rankLevels[13]));
    }
    else if ((lp_experience < gv_rankLevels[15])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[14])) / (gv_rankLevels[15] - gv_rankLevels[14]));
    }
    else if ((lp_experience < gv_rankLevels[16])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[15])) / (gv_rankLevels[16] - gv_rankLevels[15]));
    }
    else if ((lp_experience < gv_rankLevels[17])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[16])) / (gv_rankLevels[17] - gv_rankLevels[16]));
    }
    else if ((lp_experience < gv_rankLevels[18])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[17])) / (gv_rankLevels[18] - gv_rankLevels[17]));
    }
    else if ((lp_experience < gv_rankLevels[19])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[18])) / (gv_rankLevels[19] - gv_rankLevels[18]));
    }
    else if ((lp_experience < gv_rankLevels[20])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[19])) / (gv_rankLevels[20] - gv_rankLevels[19]));
    }
    else if ((lp_experience < gv_rankLevels[21])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[20])) / (gv_rankLevels[21] - gv_rankLevels[20]));
    }
    else if ((lp_experience < gv_rankLevels[22])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[21])) / (gv_rankLevels[22] - gv_rankLevels[21]));
    }
    else if ((lp_experience < gv_rankLevels[23])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[22])) / (gv_rankLevels[23] - gv_rankLevels[22]));
    }
    else if ((lp_experience < gv_rankLevels[24])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[23])) / (gv_rankLevels[24] - gv_rankLevels[23]));
    }
    else if ((lp_experience < gv_rankLevels[25])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[24])) / (gv_rankLevels[25] - gv_rankLevels[24]));
    }
    else if ((lp_experience < gv_rankLevels[26])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[25])) / (gv_rankLevels[26] - gv_rankLevels[25]));
    }
    else if ((lp_experience < gv_rankLevels[27])) {
        lv_min = (IntToFixed((lp_experience - gv_rankLevels[26])) / (gv_rankLevels[27] - gv_rankLevels[26]));
    }
    lv_max = (lv_min * lv_size);
    return FixedToInt(lv_max);
}

text gf_RankGetTitle (int lp_experience) {
    // Implementation
    if ((lp_experience < gv_rankLevels[1])) {
        return StringExternal("Param/Value/A5689BD9");
    }
    else if ((lp_experience < gv_rankLevels[2])) {
        return StringExternal("Param/Value/E5DB7693");
    }
    else if ((lp_experience < gv_rankLevels[3])) {
        return StringExternal("Param/Value/1943948E");
    }
    else if ((lp_experience < gv_rankLevels[4])) {
        return StringExternal("Param/Value/12ED01D1");
    }
    else if ((lp_experience < gv_rankLevels[5])) {
        return StringExternal("Param/Value/2E8FCE2D");
    }
    else if ((lp_experience < gv_rankLevels[6])) {
        return StringExternal("Param/Value/AF780E91");
    }
    else if ((lp_experience < gv_rankLevels[7])) {
        return StringExternal("Param/Value/A1BCF0D4");
    }
    else if ((lp_experience < gv_rankLevels[8])) {
        return StringExternal("Param/Value/CD769630");
    }
    else if ((lp_experience < gv_rankLevels[9])) {
        return StringExternal("Param/Value/CB4EAABA");
    }
    else if ((lp_experience < gv_rankLevels[10])) {
        return StringExternal("Param/Value/28FD9C8B");
    }
    else if ((lp_experience < gv_rankLevels[11])) {
        return StringExternal("Param/Value/8B291E23");
    }
    else if ((lp_experience < gv_rankLevels[12])) {
        return StringExternal("Param/Value/EEDC3726");
    }
    else if ((lp_experience < gv_rankLevels[13])) {
        return StringExternal("Param/Value/27D9346B");
    }
    else if ((lp_experience < gv_rankLevels[14])) {
        return StringExternal("Param/Value/2AA621F9");
    }
    else if ((lp_experience < gv_rankLevels[15])) {
        return StringExternal("Param/Value/31637D41");
    }
    else if ((lp_experience < gv_rankLevels[16])) {
        return StringExternal("Param/Value/2D2FD2E4");
    }
    else if ((lp_experience < gv_rankLevels[17])) {
        return StringExternal("Param/Value/C2EA3FAF");
    }
    else if ((lp_experience < gv_rankLevels[18])) {
        return StringExternal("Param/Value/33C38212");
    }
    else if ((lp_experience < gv_rankLevels[19])) {
        return StringExternal("Param/Value/6EDA0339");
    }
    else if ((lp_experience < gv_rankLevels[20])) {
        return StringExternal("Param/Value/7618AC51");
    }
    else if ((lp_experience < gv_rankLevels[21])) {
        return StringExternal("Param/Value/B34B5444");
    }
    else if ((lp_experience < gv_rankLevels[22])) {
        return StringExternal("Param/Value/A133C25C");
    }
    else if ((lp_experience < gv_rankLevels[23])) {
        return StringExternal("Param/Value/3A46D61B");
    }
    else if ((lp_experience < gv_rankLevels[24])) {
        return StringExternal("Param/Value/401F7033");
    }
    else if ((lp_experience < gv_rankLevels[25])) {
        return StringExternal("Param/Value/5EE4C10A");
    }
    else if ((lp_experience < gv_rankLevels[26])) {
        return StringExternal("Param/Value/63C7278A");
    }
    else if ((lp_experience < gv_rankLevels[27])) {
        return StringExternal("Param/Value/4C1B4B81");
    }
    return StringExternal("Param/Value/25A4E351");
}

int gf_RankGetCur (int lp_experience) {
    // Implementation
    if ((lp_experience < gv_rankLevels[1])) {
        return lp_experience;
    }
    else if ((lp_experience < gv_rankLevels[2])) {
        return (lp_experience - gv_rankLevels[1]);
    }
    else if ((lp_experience < gv_rankLevels[3])) {
        return (lp_experience - gv_rankLevels[2]);
    }
    else if ((lp_experience < gv_rankLevels[4])) {
        return (lp_experience - gv_rankLevels[3]);
    }
    else if ((lp_experience < gv_rankLevels[5])) {
        return (lp_experience - gv_rankLevels[4]);
    }
    else if ((lp_experience < gv_rankLevels[6])) {
        return (lp_experience - gv_rankLevels[5]);
    }
    else if ((lp_experience < gv_rankLevels[7])) {
        return (lp_experience - gv_rankLevels[6]);
    }
    else if ((lp_experience < gv_rankLevels[8])) {
        return (lp_experience - gv_rankLevels[7]);
    }
    else if ((lp_experience < gv_rankLevels[9])) {
        return (lp_experience - gv_rankLevels[8]);
    }
    else if ((lp_experience < gv_rankLevels[10])) {
        return (lp_experience - gv_rankLevels[9]);
    }
    else if ((lp_experience < gv_rankLevels[11])) {
        return (lp_experience - gv_rankLevels[10]);
    }
    else if ((lp_experience < gv_rankLevels[12])) {
        return (lp_experience - gv_rankLevels[11]);
    }
    else if ((lp_experience < gv_rankLevels[13])) {
        return (lp_experience - gv_rankLevels[12]);
    }
    else if ((lp_experience < gv_rankLevels[14])) {
        return (lp_experience - gv_rankLevels[13]);
    }
    else if ((lp_experience < gv_rankLevels[15])) {
        return (lp_experience - gv_rankLevels[14]);
    }
    else if ((lp_experience < gv_rankLevels[16])) {
        return (lp_experience - gv_rankLevels[15]);
    }
    else if ((lp_experience < gv_rankLevels[17])) {
        return (lp_experience - gv_rankLevels[16]);
    }
    else if ((lp_experience < gv_rankLevels[18])) {
        return (lp_experience - gv_rankLevels[17]);
    }
    else if ((lp_experience < gv_rankLevels[19])) {
        return (lp_experience - gv_rankLevels[18]);
    }
    else if ((lp_experience < gv_rankLevels[20])) {
        return (lp_experience - gv_rankLevels[19]);
    }
    else if ((lp_experience < gv_rankLevels[21])) {
        return (lp_experience - gv_rankLevels[20]);
    }
    else if ((lp_experience < gv_rankLevels[22])) {
        return (lp_experience - gv_rankLevels[21]);
    }
    else if ((lp_experience < gv_rankLevels[23])) {
        return (lp_experience - gv_rankLevels[22]);
    }
    else if ((lp_experience < gv_rankLevels[24])) {
        return (lp_experience - gv_rankLevels[23]);
    }
    else if ((lp_experience < gv_rankLevels[25])) {
        return (lp_experience - gv_rankLevels[24]);
    }
    else if ((lp_experience < gv_rankLevels[26])) {
        return (lp_experience - gv_rankLevels[25]);
    }
    else if ((lp_experience < gv_rankLevels[27])) {
        return (lp_experience - gv_rankLevels[26]);
    }
    return gv_rankLevels[27];
}

text gf_RankGetExp (int lp_experience) {
    // Implementation
    if ((lp_experience < gv_rankLevels[1])) {
        return IntToText(gv_rankLevels[1]);
    }
    else if ((lp_experience < gv_rankLevels[2])) {
        return IntToText((gv_rankLevels[2] - gv_rankLevels[1]));
    }
    else if ((lp_experience < gv_rankLevels[3])) {
        return IntToText((gv_rankLevels[3] - gv_rankLevels[2]));
    }
    else if ((lp_experience < gv_rankLevels[4])) {
        return IntToText((gv_rankLevels[4] - gv_rankLevels[3]));
    }
    else if ((lp_experience < gv_rankLevels[5])) {
        return IntToText((gv_rankLevels[5] - gv_rankLevels[4]));
    }
    else if ((lp_experience < gv_rankLevels[6])) {
        return IntToText((gv_rankLevels[6] - gv_rankLevels[5]));
    }
    else if ((lp_experience < gv_rankLevels[7])) {
        return IntToText((gv_rankLevels[7] - gv_rankLevels[6]));
    }
    else if ((lp_experience < gv_rankLevels[8])) {
        return IntToText((gv_rankLevels[8] - gv_rankLevels[7]));
    }
    else if ((lp_experience < gv_rankLevels[9])) {
        return IntToText((gv_rankLevels[9] - gv_rankLevels[8]));
    }
    else if ((lp_experience < gv_rankLevels[10])) {
        return IntToText((gv_rankLevels[10] - gv_rankLevels[9]));
    }
    else if ((lp_experience < gv_rankLevels[11])) {
        return IntToText((gv_rankLevels[11] - gv_rankLevels[10]));
    }
    else if ((lp_experience < gv_rankLevels[12])) {
        return IntToText((gv_rankLevels[12] - gv_rankLevels[11]));
    }
    else if ((lp_experience < gv_rankLevels[13])) {
        return IntToText((gv_rankLevels[13] - gv_rankLevels[12]));
    }
    else if ((lp_experience < gv_rankLevels[14])) {
        return IntToText((gv_rankLevels[14] - gv_rankLevels[13]));
    }
    else if ((lp_experience < gv_rankLevels[15])) {
        return IntToText((gv_rankLevels[15] - gv_rankLevels[14]));
    }
    else if ((lp_experience < gv_rankLevels[15])) {
        return IntToText((gv_rankLevels[15] - gv_rankLevels[14]));
    }
    else if ((lp_experience < gv_rankLevels[16])) {
        return IntToText((gv_rankLevels[16] - gv_rankLevels[15]));
    }
    else if ((lp_experience < gv_rankLevels[17])) {
        return IntToText((gv_rankLevels[17] - gv_rankLevels[16]));
    }
    else if ((lp_experience < gv_rankLevels[18])) {
        return IntToText((gv_rankLevels[18] - gv_rankLevels[17]));
    }
    else if ((lp_experience < gv_rankLevels[19])) {
        return IntToText((gv_rankLevels[19] - gv_rankLevels[18]));
    }
    else if ((lp_experience < gv_rankLevels[20])) {
        return IntToText((gv_rankLevels[20] - gv_rankLevels[19]));
    }
    else if ((lp_experience < gv_rankLevels[21])) {
        return IntToText((gv_rankLevels[21] - gv_rankLevels[20]));
    }
    else if ((lp_experience < gv_rankLevels[22])) {
        return IntToText((gv_rankLevels[22] - gv_rankLevels[21]));
    }
    else if ((lp_experience < gv_rankLevels[23])) {
        return IntToText((gv_rankLevels[23] - gv_rankLevels[22]));
    }
    else if ((lp_experience < gv_rankLevels[24])) {
        return IntToText((gv_rankLevels[24] - gv_rankLevels[23]));
    }
    else if ((lp_experience < gv_rankLevels[25])) {
        return IntToText((gv_rankLevels[25] - gv_rankLevels[24]));
    }
    else if ((lp_experience < gv_rankLevels[26])) {
        return IntToText((gv_rankLevels[26] - gv_rankLevels[25]));
    }
    else if ((lp_experience < gv_rankLevels[27])) {
        return IntToText((gv_rankLevels[27] - gv_rankLevels[26]));
    }
    return IntToText(gv_rankLevels[27]);
}

string gf_RankGetIcon (int lp_experience) {
    // Implementation
    if ((lp_experience < gv_rankLevels[1])) {
        return "Badges_TGA\\NoRank.tga";
    }
    else if ((lp_experience < gv_rankLevels[2])) {
        return "Badges_TGA\\0Bronze0.tga";
    }
    else if ((lp_experience < gv_rankLevels[3])) {
        return "Badges_TGA\\0Bronze1.tga";
    }
    else if ((lp_experience < gv_rankLevels[4])) {
        return "Badges_TGA\\0Bronze2.tga";
    }
    else if ((lp_experience < gv_rankLevels[5])) {
        return "Badges_TGA\\0Bronze3.tga";
    }
    else if ((lp_experience < gv_rankLevels[6])) {
        return "Badges_TGA\\1Silver0.tga";
    }
    else if ((lp_experience < gv_rankLevels[7])) {
        return "Badges_TGA\\1Silver1.tga";
    }
    else if ((lp_experience < gv_rankLevels[8])) {
        return "Badges_TGA\\1Silver2.tga";
    }
    else if ((lp_experience < gv_rankLevels[9])) {
        return "Badges_TGA\\1Silver3.tga";
    }
    else if ((lp_experience < gv_rankLevels[10])) {
        return "Badges_TGA\\2Gold0.tga";
    }
    else if ((lp_experience < gv_rankLevels[11])) {
        return "Badges_TGA\\2Gold1.tga";
    }
    else if ((lp_experience < gv_rankLevels[12])) {
        return "Badges_TGA\\2Gold2.tga";
    }
    else if ((lp_experience < gv_rankLevels[13])) {
        return "Badges_TGA\\2Gold3.tga";
    }
    else if ((lp_experience < gv_rankLevels[14])) {
        return "Badges_TGA\\3Platinum0.tga";
    }
    else if ((lp_experience < gv_rankLevels[15])) {
        return "Badges_TGA\\3Platinum1.tga";
    }
    else if ((lp_experience < gv_rankLevels[16])) {
        return "Badges_TGA\\3Platinum2.tga";
    }
    else if ((lp_experience < gv_rankLevels[17])) {
        return "Badges_TGA\\3Platinum3.tga";
    }
    else if ((lp_experience < gv_rankLevels[18])) {
        return "Badges_TGA\\4Diamond0.tga";
    }
    else if ((lp_experience < gv_rankLevels[19])) {
        return "Badges_TGA\\4Diamond1.tga";
    }
    else if ((lp_experience < gv_rankLevels[20])) {
        return "Badges_TGA\\4Diamond2.tga";
    }
    else if ((lp_experience < gv_rankLevels[21])) {
        return "Badges_TGA\\4Diamond3.tga";
    }
    else if ((lp_experience < gv_rankLevels[22])) {
        return "Badges_TGA\\5Masters0.tga";
    }
    else if ((lp_experience < gv_rankLevels[22])) {
        return "Badges_TGA\\5Masters1.tga";
    }
    else if ((lp_experience < gv_rankLevels[23])) {
        return "Badges_TGA\\5Masters2.tga";
    }
    else if ((lp_experience < gv_rankLevels[24])) {
        return "Badges_TGA\\5Masters3.tga";
    }
    else if ((lp_experience < gv_rankLevels[25])) {
        return "Badges_TGA\\6Grandmasters0.tga";
    }
    else if ((lp_experience < gv_rankLevels[25])) {
        return "Badges_TGA\\6Grandmasters1.tga";
    }
    else if ((lp_experience < gv_rankLevels[26])) {
        return "Badges_TGA\\6Grandmasters2.tga";
    }
    else if ((lp_experience < gv_rankLevels[27])) {
        return "Badges_TGA\\6Grandmasters3.tga";
    }
    return "Badges_TGA\\6Grandmasters3.tga";
}

void gf_DialogUIInterface () {
    // Implementation
    DialogCreate(2000, 1500, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), GameAttributePlayersForTeam(1), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 900, 250, c_anchorBottom, 0, 0, StringExternal("Param/Value/CEC71431"), "Unit Pannel UI Red (2.0).tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 750, 350, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/96192CAA"), "Unreal\\Unreal Arena Minimap UI Red.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 800, 300, c_anchorBottomRight, 0, 0, StringExternal("Param/Value/3775B365"), "Unreal\\Command Card UI Red.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(2000, 1500, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetVisible(DialogLastCreated(), GameAttributePlayersForTeam(2), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 900, 250, c_anchorBottom, 0, 0, StringExternal("Param/Value/DCB49064"), "Unit Pannel UI Blue (2.0).tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 750, 350, c_anchorBottomLeft, 0, 0, StringExternal("Param/Value/01739D4D"), "Unreal\\Unreal Arena Minimap UI Blue.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 800, 300, c_anchorBottomRight, 0, 0, StringExternal("Param/Value/9884EAB7"), "Unreal\\Command Card UI Blue.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
}

void gf_DialogsMapVoting () {
    // Implementation
    DialogCreate(1400, 1050, c_anchorCenter, 0, 10, true);
    gv_mapDialog = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 30, c_anchorTop, 0, 40, StringExternal("Param/Value/A1B5EFFF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize28Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 30, c_anchorTop, 80, 80, StringExternal("Param/Value/F278F596"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_timeLeft = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 30, c_anchorTopLeft, 275, 90, StringExternal("Param/Value/88389914"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 617, 350, c_anchorTopLeft, 50, 130, StringExternal("Param/Value/ADA40CE5"), "MHighgarden.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopLeft, 250, 490, StringExternal("Param/Value/4E5260DA"), StringExternal("Param/Value/B46D34F6"), "");
    gv_mapButtons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 30, c_anchorTopLeft, 450, 500, StringExternal("Param/Value/B525AEAF"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_mapVotes[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArmoryTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 30, c_anchorTopLeft, 950, 90, StringExternal("Param/Value/7D78FE5C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 617, 350, c_anchorTopLeft, 700, 130, StringExternal("Param/Value/D7A5AC51"), "MSewers.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorTopRight, 275, 490, StringExternal("Param/Value/F7AD6835"), StringExternal("Param/Value/866F5856"), "");
    gv_mapButtons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 30, c_anchorTopRight, 225, 500, StringExternal("Param/Value/7C2214F7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_mapVotes[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArmoryTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 30, c_anchorBottomLeft, 300, 445, StringExternal("Param/Value/4BE444EE"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 617, 350, c_anchorBottomLeft, 50, 90, StringExternal("Param/Value/3A098126"), "MBunker.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottomLeft, 250, 30, StringExternal("Param/Value/4E860EA6"), StringExternal("Param/Value/725FE089"), "");
    gv_mapButtons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 50, 30, c_anchorBottomLeft, 450, 40, StringExternal("Param/Value/2CB1AD15"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_mapVotes[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArmoryTitle", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
}

void gf_DialogsMenu () {
    // Variable Declarations
    int lv_x;

    // Variable Initialization

    // Implementation
    DialogCreate(450, 100, c_anchorTopLeft, 0, 0, true);
    gv_menuDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 440, 70, c_anchorTopLeft, -2, -2, StringExternal("Param/Value/09B82634"), "Unreal Arena Top Left UI.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 175, 50, c_anchorTopLeft, 5, 5, StringExternal("Param/Value/613B0713"), StringExternal("Param/Value/F20BD6F2"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    gv_menuWeapons = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 175, 50, c_anchorTopLeft, 192, 5, StringExternal("Param/Value/C478A28A"), StringExternal("Param/Value/BD507D6A"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    gv_menuTalents = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(225, 80, c_anchorTopRight, 0, -5, true);
    gv_menu2Dialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorTopLeft, 12, 18, StringExternal("Param/Value/A2A7D46B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20Bold", PlayerGroupAll());
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

void gf_DialogsInterface () {
    // Variable Declarations
    int lv_size0;
    int lv_size1;
    int lv_size2;
    int lv_size3;
    int lv_size4;
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_size0 = 28;
    lv_size1 = 48;
    lv_size2 = 165;
    lv_size3 = 82;
    lv_size4 = 84;
    lv_x = 339;
    lv_y = 95;

    // Implementation
    DialogCreate(1000, 525, c_anchorCenter, 0, -100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_interfaceDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1000, 525, c_anchorCenter, 0, 0, StringExternal("Param/Value/05D1A634"), "Unreal Arena Outer Dialog Red.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(2), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1000, 525, c_anchorCenter, 0, 0, StringExternal("Param/Value/3CB14A04"), "Unreal Arena Outer Dialog Blue.tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(1), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 350, 100, c_anchorTop, 0, 0, StringExternal("Param/Value/BB7C4DF1"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_interfaceDialogTitle = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize28Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_size0, lv_size0, c_anchorTopRight, 36, 24, StringExternal("Param/Value/BFFE4DA6"), StringExternal("Param/Value/7D65F3ED"), "");
    gv_cancel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_size0, lv_size0, c_anchorTopRight, 36, 24, StringExternal("Param/Value/E489234A"), "Assets\\Textures\\btn-command-cancel.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_x += lv_size1;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_size1, lv_size1, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/BC64A17A"), StringExternal("Param/Value/8E5E0224"), "");
    gv_interfaceDialogTopButtons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_size1, lv_size1, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/F20ABB0C"), "Assets\\Textures\\btn-tips-mercenary.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_x += 58;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_size1, lv_size1, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/D5B8A5C3"), StringExternal("Param/Value/F143CBF5"), "");
    gv_interfaceDialogTopButtons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_size1, lv_size1, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/4466E14C"), "Assets\\Textures\\btn-ability-kerrigan-heroicfortitude.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_x += 58;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_size1, lv_size1, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/2AB7F865"), StringExternal("Param/Value/7A22B9CE"), "");
    gv_interfaceDialogTopButtons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_size1, lv_size1, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/AA379160"), "Assets\\Textures\\btn-ability-protoss-cloakfield-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_x += 58;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), lv_size1, lv_size1, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/DFF1740C"), StringExternal("Param/Value/9CC00E79"), "");
    gv_interfaceDialogTopButtons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_size1, lv_size1, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/3D756E51"), "Assets\\Textures\\btn-ability-protoss-preordain.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogCreate(1000, 525, c_anchorCenter, 0, -100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_menuWeaponryDialog = DialogLastCreated();
    gv_menuTabDialogs[2] = DialogLastCreated();
    lv_x = 100;
    lv_y = 150;
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_size2, lv_size2, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/C81CEAB4"), "btn-ability-terran-experiencedplasmagun-color-pink-1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceWeaponsMain = DialogControlLastCreated();
    lv_x += 95;
    lv_y += 160;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 92, 92, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/FA6F34A0"), StringExternal("Param/Value/0CEF824A"), "");
    gv_interfaceWeaponsAddonButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 92, 92, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/B9B266A0"), "Assets\\Textures\\btn-ability-terran-snipe-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceWeaponsAddonImage = DialogControlLastCreated();
    lv_x = 375;
    lv_y = 235;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorTopLeft, lv_x, (lv_y - 20), StringExternal("Param/Value/0A400578"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_interfaceWeaponsAddOnsText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 68, 68, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/D772840E"), StringExternal("Param/Value/939DE350"), "");
    gv_interfaceAddOnsButtons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 68, 68, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/78922DEB"), "Assets\\Textures\\btn-ability-terran-snipe-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceAddOnsIcons[1] = DialogControlLastCreated();
    lv_x += 68;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 68, 68, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/062E451C"), StringExternal("Param/Value/343D1A0D"), "");
    gv_interfaceAddOnsButtons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 68, 68, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/C79EC5A3"), "Assets\\Textures\\btn-techupgrade-terran-fullborecanisterammo.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceAddOnsIcons[2] = DialogControlLastCreated();
    lv_x = 560;
    lv_y = 200;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorTopLeft, lv_x, (lv_y - 20), StringExternal("Param/Value/2724909C"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_interfaceWeaponsWeaponsText = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/7AD421A4"), StringExternal("Param/Value/0BD994D7"), "");
    gv_interfaceWeaponsButtons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/5E8A0680"), "btn-ability-terran-experiencedplasmagun-color-pink-1.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceWeaponsImages[1] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/6D430ECA"), StringExternal("Param/Value/43A9E936"), "");
    gv_interfaceWeaponsButtons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/E53299C1"), "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel3.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceWeaponsImages[2] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/C7DBCE44"), StringExternal("Param/Value/30301A97"), "");
    gv_interfaceWeaponsButtons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/46BFDAB0"), "Assets\\Textures\\btn-ability-terran-bombardmentstrike-color.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceWeaponsImages[3] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/342BBA36"), StringExternal("Param/Value/A3B8D9D4"), "");
    gv_interfaceWeaponsButtons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/4590BD72"), "Assets\\Textures\\btn-ability-zerg-corrosiveblast.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceWeaponsImages[4] = DialogControlLastCreated();
    lv_x = 560;
    lv_y += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/1E6F6370"), StringExternal("Param/Value/F4AFEEC5"), "");
    gv_interfaceWeaponsButtons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/0D1AEB2F"), "Assets\\Textures\\btn-ability-terran-punishergrenade-color.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceWeaponsImages[5] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/B65FD1E0"), StringExternal("Param/Value/DA5B043C"), "");
    gv_interfaceWeaponsButtons[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/E866C0BB"), "btn-ability-terran-haleoflead-color.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceWeaponsImages[6] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/A16E65EF"), StringExternal("Param/Value/31CCF0F4"), "");
    gv_interfaceWeaponsButtons[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/2EAC2C91"), "Assets\\Textures\\btn-ability-terran-redlinereactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_interfaceWeaponsImages[7] = DialogControlLastCreated();
    DialogCreate(1000, 525, c_anchorCenter, 0, -100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_menuArmoryDialog = DialogLastCreated();
    gv_menuTabDialogs[3] = DialogLastCreated();
    lv_x = 110;
    lv_y = 200;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorTopLeft, lv_x, (lv_y - 20), StringExternal("Param/Value/22430F23"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_talentsText1[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/D60DE02D"), StringExternal("Param/Value/48AD4718"), "");
    gv_talentsButtons[1] = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/C0228F10"), "Assets\\Textures\\btn-research-zerg-regenerativebio-steel.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsImages[1] = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/0409DE76"), StringExternal("Param/Value/FE04F8FA"), "");
    gv_talentsButtons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/C74DC6A1"), "Assets\\Textures\\btn-ability-protoss-charge-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsImages[2] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/3527D071"), StringExternal("Param/Value/5DE5254E"), "");
    gv_talentsButtons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/D543626B"), "Assets\\Textures\\btn-upgrade-zerg-regenerativebile.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsImages[3] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/5DC84293"), StringExternal("Param/Value/DF18D975"), "");
    gv_talentsButtons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/C186544D"), "Assets\\Textures\\btn-ability-protoss-massrecall.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsImages[4] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/E7B1756E"), StringExternal("Param/Value/3220C979"), "");
    gv_talentsButtons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/2A7F871B"), "Assets\\Textures\\btn-ability-protoss-cloakfield-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsImages[5] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/1BFE81D8"), StringExternal("Param/Value/A4DC81B0"), "");
    gv_talentsButtons[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/92DAA763"), "Assets\\Textures\\btn-tips-credit.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsImages[6] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/E4CFA2F1"), StringExternal("Param/Value/653B837C"), "");
    gv_talentsButtons[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/29035B4F"), "Assets\\Textures\\btn-unit-protoss-archon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsImages[7] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/BBF2F2B9"), StringExternal("Param/Value/9C0B8296"), "");
    gv_talentsButtons[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/4EF3F4E5"), "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsImages[8] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/BC57C0B6"), StringExternal("Param/Value/182BEF82"), "");
    gv_talentsButtons[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/64C95626"), "Assets\\Textures\\btn-techupgrade-terran-maelstromrounds.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsImages[9] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/BD11A669"), StringExternal("Param/Value/2F6354AF"), "");
    gv_talentsButtons[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/2D2E9C28"), "Assets\\Textures\\btn-ability-kerrigan-abilityefficiency.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentsImages[10] = DialogControlLastCreated();
    lv_x += lv_size4;
    lv_x = 110;
    lv_y = 330;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorTopLeft, lv_x, (lv_y - 20), StringExternal("Param/Value/99E99659"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_skinsText[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/A2D9666C"), StringExternal("Param/Value/06B7DAFE"), "");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_skinsButtons[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/8C8F5BC2"), "Assets\\Textures\\btn-hero-raynor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    gv_skinsImages[1] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/678CD195"), StringExternal("Param/Value/FC92F6F4"), "");
    gv_skinsButtons[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/4510560B"), "Assets\\Textures\\btn-tips-char.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_skinsImages[2] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/36C69E9D"), StringExternal("Param/Value/14A082BB"), "");
    gv_skinsButtons[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/5B7C69A5"), "Assets\\Textures\\btn-tips-challengecounter.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_skinsImages[3] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/F382879C"), StringExternal("Param/Value/068C35D0"), "");
    gv_skinsButtons[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/D67B9E01"), "Assets\\Textures\\btn-tips-computerterminals.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_skinsImages[4] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/C063AF57"), StringExternal("Param/Value/F7B2C9B8"), "");
    gv_skinsButtons[5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/3ACF4E2F"), "Assets\\Textures\\btn-tips-terran-energynova.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_skinsImages[5] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/29B8F1F5"), StringExternal("Param/Value/D79CD63A"), "");
    gv_skinsButtons[6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/ACED3730"), "Assets\\Textures\\btn-tips-richminerals.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_skinsImages[6] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/B0B70247"), StringExternal("Param/Value/06958E14"), "");
    gv_skinsButtons[7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/70CFD852"), "Assets\\Textures\\btn-ability-zerg-frenzied-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_skinsImages[7] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/EE4EAF73"), StringExternal("Param/Value/D1C6E686"), "");
    gv_skinsButtons[8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/73B2B05E"), "Assets\\Textures\\btn-upgrade-zerg-rapidincubation.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_skinsImages[8] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/D5416AFD"), StringExternal("Param/Value/25BEC511"), "");
    gv_skinsButtons[9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/8FA53E54"), "Assets\\Textures\\btn-research-zerg-cellularreactor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_skinsImages[9] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/35248BED"), StringExternal("Param/Value/6D9DD381"), "");
    gv_skinsButtons[10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/BA9C4584"), "Assets\\Textures\\btn-ability-zerg-noxiouscloud.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_skinsImages[10] = DialogControlLastCreated();
    lv_x += lv_size4;
    DialogCreate(1000, 525, c_anchorCenter, 0, -100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_menuArmoryDialog = DialogLastCreated();
    gv_menuTabDialogs[4] = DialogLastCreated();
    lv_x = 110;
    lv_y = 180;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorTopLeft, lv_x, (lv_y - 20), StringExternal("Param/Value/549137B7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/75101848"), StringExternal("Param/Value/F2CC8E44"), "");
    gv_streaksButtons[0][0] = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/D2B99674"), "Assets\\Textures\\btn-ability-terran-scannersweep-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_streaksImages[0][0] = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/D63480AD"), StringExternal("Param/Value/980BC53E"), "");
    gv_streaksButtons[0][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/5A78069C"), "Assets\\Textures\\btn-ability-terran-calldownextrasupplies-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_streaksImages[0][1] = DialogControlLastCreated();
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/D0A719D2"), StringExternal("Param/Value/DD4C2DE2"), "");
    gv_streaksButtons[0][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/30340956"), "Assets\\Textures\\btn-research-zerg-shriketurret.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_streaksImages[0][2] = DialogControlLastCreated();
    lv_x += lv_size4;
    lv_x = 110;
    lv_y = 350;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 100, c_anchorTopLeft, lv_x, (lv_y - 20), StringExternal("Param/Value/C3BF6937"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/F3AAF626"), StringExternal("Param/Value/3FDE2399"), "");
    gv_streaksButtons[1][1] = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/B0876B70"), "Assets\\Textures\\btn-research-zerg-predator.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_streaksImages[1][1] = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/3E7EA42D"), StringExternal("Param/Value/6BC52E34"), "");
    gv_streaksButtons[1][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/464060DD"), "Assets\\Textures\\btn-tips-walloffire.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_streaksImages[1][2] = DialogControlLastCreated();
    lv_x += lv_size4;
    DialogCreate(1000, 525, c_anchorCenter, 0, -100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_menuMerchantDialog = DialogLastCreated();
    gv_menuTabDialogs[5] = DialogLastCreated();
    lv_x = 110;
    lv_y = 180;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 100, c_anchorTopLeft, lv_x, (lv_y - 20), StringExternal("Param/Value/1331A67B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 100, c_anchorTopLeft, (lv_x + 530), (lv_y - 45), StringExternal("Param/Value/D5A625E7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_merchantMinerals = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/E297E1B5"), StringExternal("Param/Value/A15D1959"), "");
    gv_menuItemButton[0] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/61907D61"), "btn-ability-terran-raynortossgrenade-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/47350A02"), StringExternal("Param/Value/4DDB4445"), "");
    gv_menuItemButton[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/566E7194"), "Assets\\Textures\\btn-ability-terran-heal-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/4F27032B"), StringExternal("Param/Value/8454BB5B"), "");
    gv_menuItemButton[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/6283C87A"), "Assets\\Textures\\btn-unit-terran-targetingdrone.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/4E19545B"), StringExternal("Param/Value/07C4D66E"), "");
    gv_menuItemButton[3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/217B02AA"), "Assets\\Textures\\btn-tips-terran-psishield.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_x += lv_size4;
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/4D6D4559"), StringExternal("Param/Value/45E3332F"), "");
    gv_menuItemButton[4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 76, 76, c_anchorTopLeft, lv_x, lv_y, StringExternal("Param/Value/0D13B8C3"), "Assets\\Textures\\btn-upgrade-terran-reapernitropacks.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    lv_x += lv_size4;
    DialogControlSetEnabled(gv_interfaceWeaponsButtons[1], PlayerGroupAll(), false);
    DialogControlSetEnabled(gv_interfaceDialogTopButtons[2], PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 550, 100, c_anchorBottom, 0, -15, StringExternal("Param/Value/51DAB9AA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_interfaceBottomText = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
}

void gf_InterfaceWeaponry (int lp_player) {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_interfaceDialogTitle, StringExternal("Param/Value/BCA0AEC5"), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_interfaceBottomText, gv_interfaceWeaponsSavedText[lp_player], PlayerGroupSingle(lp_player));
    DialogControlSetEnabled(gv_interfaceDialogTopButtons[gv_interfaceDialogCurrent[lp_player]], PlayerGroupSingle(lp_player), true);
    DialogSetVisible(gv_menuTabDialogs[gv_interfaceDialogCurrent[lp_player]], PlayerGroupSingle(lp_player), false);
    gv_interfaceDialogCurrent[lp_player] = 2;
    gv_weaponsShowing[EventPlayer()] = true;
    DialogControlSetEnabled(gv_interfaceDialogTopButtons[2], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_menuWeaponryDialog, PlayerGroupSingle(lp_player), true);
}

void gf_InterfaceArmory (int lp_player) {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_interfaceDialogTitle, StringExternal("Param/Value/9B28CB6D"), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_interfaceBottomText, gv_talentsSavedText[lp_player], PlayerGroupSingle(lp_player));
    DialogControlSetEnabled(gv_interfaceDialogTopButtons[gv_interfaceDialogCurrent[lp_player]], PlayerGroupSingle(lp_player), true);
    DialogSetVisible(gv_menuTabDialogs[gv_interfaceDialogCurrent[lp_player]], PlayerGroupSingle(lp_player), false);
    gv_interfaceDialogCurrent[lp_player] = 3;
    DialogControlSetEnabled(gv_interfaceDialogTopButtons[3], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_menuTabDialogs[3], PlayerGroupSingle(lp_player), true);
}

void gf_InterfaceKillStreaks (int lp_player) {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_interfaceDialogTitle, StringExternal("Param/Value/B5451AE2"), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/DA61B7A7"), PlayerGroupSingle(lp_player));
    DialogControlSetEnabled(gv_interfaceDialogTopButtons[gv_interfaceDialogCurrent[lp_player]], PlayerGroupSingle(lp_player), true);
    DialogSetVisible(gv_menuTabDialogs[gv_interfaceDialogCurrent[lp_player]], PlayerGroupSingle(lp_player), false);
    gv_interfaceDialogCurrent[lp_player] = 4;
    DialogControlSetEnabled(gv_interfaceDialogTopButtons[4], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_menuTabDialogs[4], PlayerGroupSingle(lp_player), true);
}

void gf_InterfaceMerchant (int lp_player) {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_interfaceDialogTitle, StringExternal("Param/Value/D23BAE19"), PlayerGroupSingle(lp_player));
    libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/22D740ED"), PlayerGroupSingle(lp_player));
    DialogControlSetEnabled(gv_interfaceDialogTopButtons[gv_interfaceDialogCurrent[lp_player]], PlayerGroupSingle(lp_player), true);
    DialogSetVisible(gv_menuTabDialogs[gv_interfaceDialogCurrent[lp_player]], PlayerGroupSingle(lp_player), false);
    gv_interfaceDialogCurrent[lp_player] = 5;
    gv_interfaceShopShowing[EventPlayer()] = true;
    DialogControlSetEnabled(gv_interfaceDialogTopButtons[5], PlayerGroupSingle(lp_player), false);
    DialogSetVisible(gv_menuTabDialogs[5], PlayerGroupSingle(lp_player), true);
}

void gf_DialogsScore () {
    // Implementation
    DialogCreate(630, 150, c_anchorTop, 0, 0, true);
    gv_scoreDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 630, 150, c_anchorTop, 0, 0, StringExternal("Param/Value/273D0E41"), "Unreal\\Unreal Arena Scoreboard2.1.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 630, 150, c_anchorTop, 0, 0, StringExternal("Param/Value/3B2B8912"), "Unreal\\Unreal Arena Scoreboard2.1 (Mid Flag).tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 630, 150, c_anchorTop, 0, 0, StringExternal("Param/Value/37C8CA6A"), "Unreal\\Unreal Arena Scoreboard2.1 (Left Flag).tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_scoreFlagCaptured[1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 630, 150, c_anchorTop, 0, 0, StringExternal("Param/Value/3048352F"), "Unreal\\Unreal Arena Scoreboard2.1 (Right Flag).tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_scoreFlagCaptured[2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 50, c_anchorCenter, -25, -30, StringExternal("Param/Value/2503783C"), Color(100.00, 100.00, 100.00), false, 2.0);
    gv_scoreFlagPoints[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreText", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 50, c_anchorCenter, 68, -30, StringExternal("Param/Value/9CD05534"), Color(100.00, 100.00, 100.00), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ArcadeFighterLevelScoreText", PlayerGroupAll());
    gv_scoreFlagPoints[2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 80, 50, c_anchorCenter, 0, 12, StringExternal("Param/Value/1752E542"), Color(100.00, 100.00, 100.00), false, 2.0);
    gv_scoreGameTimeDialog = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    DialogCreate(600, 120, c_anchorTop, 0, 100, true);
    gv_notificationDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 600, 120, c_anchorTop, 0, 0, StringExternal("Param/Value/14D05FE7"), "promod\\promod\\Unreal\\Flag Taken Blue.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_notificationImage = DialogControlLastCreated();
}

void gf_DialogsStats () {
    // Variable Declarations
    int lv_y;
    int lv_n;

    // Variable Initialization
    lv_y = 25;
    lv_n = 1;

    // Implementation
    DialogCreate(400, 1000, c_anchorTopLeft, 0, 0, true);
    gv_statsDialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 10, lv_y, StringExternal("Param/Value/8F9891CB"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 200, lv_y, StringExternal("Param/Value/CBC2E981"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 245, lv_y, StringExternal("Param/Value/B9EAB369"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_y += 30;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 10, lv_y, StringExternal("Param/Value/44FE1330"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_y += 25;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 20, lv_y, (StringExternal("Param/Value/5D73DE0F") + PlayerName(PlayerGroupLoopCurrent())), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsNames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 200, lv_y, StringExternal("Param/Value/87700543"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsKillsDeaths[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 245, lv_y, StringExternal("Param/Value/43976570"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsScore[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        lv_y += 25;
        lv_n += 1;
    }
    PlayerGroupLoopEnd();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 10, lv_y, StringExternal("Param/Value/91819D9B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_y += 25;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 20, lv_y, (StringExternal("Param/Value/1E615D92") + PlayerName(PlayerGroupLoopCurrent())), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsNames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 200, lv_y, StringExternal("Param/Value/B7DEC7C4"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsKillsDeaths[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 30, c_anchorTopLeft, 245, lv_y, StringExternal("Param/Value/5BCE485B"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsScore[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        lv_y += 25;
        lv_n += 1;
    }
    PlayerGroupLoopEnd();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
}

void gf_UpdateStats () {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_statsKillsDeaths[1], IntToText(gv_playerKills[1]), PlayerGroupAll());
}

void gf_UpdateCredits (int lp_player, int lp_money) {
    // Implementation
    gv_playerCredits[lp_player] += lp_money;
    libNtve_gf_SetDialogItemText(gv_creditsMoney[lp_player], (StringExternal("Param/Value/348498D8") + IntToText(gv_playerCredits[lp_player])), PlayerGroupSingle(lp_player));
}

void gf_CreateFlags () {
    // Variable Declarations
    color lv_color;
    int lv_i;
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_color = Color(100.00, 0.00, 0.00);
    lv_i = 1;

    // Implementation
    if ((gv_map == 0)) {
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(4)), 270.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(56.86, 0.00, 0.00), 1.0, 0.0));
        gv_teamFlags[1] = UnitLastCreated();
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(3)), 270.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 18.04, 90.20), 1.0, 0.0));
        gv_teamFlags[2] = UnitLastCreated();
    }
    else if ((gv_map == 1)) {
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(8)), 270.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(56.86, 0.00, 0.00), 1.0, 0.0));
        gv_teamFlags[1] = UnitLastCreated();
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(9)), 270.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 18.04, 90.20), 1.0, 0.0));
        gv_teamFlags[2] = UnitLastCreated();
    }
    else if ((gv_map == 2)) {
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(25)), 270.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(56.86, 0.00, 0.00), 1.0, 0.0));
        gv_teamFlags[1] = UnitLastCreated();
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(26)), 270.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 18.04, 90.20), 1.0, 0.0));
        gv_teamFlags[2] = UnitLastCreated();
    }
    DialogCreate(400, 200, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3, 50, c_anchorTopLeft, 0, 3, StringExternal("Param/Value/19684FE7"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3, 50, c_anchorTopLeft, 53, 3, StringExternal("Param/Value/6FFFD7CF"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 56, 3, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/E87B4C98"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 56, 3, c_anchorTopLeft, 0, 53, StringExternal("Param/Value/5E91CA69"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 40);
    while ((lv_i <= 28)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_i*2, 1, c_anchorTopLeft, 28-lv_i, 60 + 28 - lv_i, StringExternal("Param/Value/8376652C"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100 - lv_i*2);
        lv_i += 1;
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 3, 3, StringExternal("Param/Value/8CD789CE"), "Assets\\Textures\\btn-ability-zerg-advancedmutation.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 20);
    DialogSetPositionRelativeToUnit(DialogLastCreated(), gv_teamFlags[1], "Ref_Attacher", 0, -40);
}

void gf_PowerupCreate (point lp_point) {
    // Implementation
    if ((RandomInt(1, 2) == 1)) {
        UnitCreate(1, "PickupHealth25", 0, 0, lp_point, libNtve_gf_RandomAngle());
    }
    else {
        UnitCreate(1, "PickupGrenades", 0, 0, lp_point, libNtve_gf_RandomAngle());
    }
}

bool gf_HeroNearbyCheck (point lp_p, fixed lp_radius) {
    // Implementation
    UnitGroupLoopBegin(UnitGroupSearch("Raynor01", c_playerAny, lp_p, lp_radius, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        return true;
    }
    UnitGroupLoopEnd();
    return false;
}

void gf_LowSteakEarned (int lp_player) {
    // Variable Declarations
    int lv_streak;

    // Variable Initialization
    lv_streak = gv_streaksActual[lp_player][0];

    // Implementation
    gv_streaksEarned[lp_player][0][lv_streak] += 1;
    if ((UnitIsAlive(gv_playerUnits[lp_player]) == true)) {
        UnitInventoryCreate(gv_playerUnits[lp_player], gv_streaksItemTypes[0][lv_streak]);
    }
    else {
    }
}

void gf_MidStreakEarned (int lp_player) {
    // Variable Declarations
    int lv_streak;

    // Variable Initialization
    lv_streak = gv_streaksActual[lp_player][1];

    // Implementation
    gv_streaksEarned[lp_player][1][lv_streak] += 1;
    if ((UnitIsAlive(gv_playerUnits[lp_player]) == true)) {
        UnitInventoryCreate(gv_playerUnits[lp_player], gv_streaksItemTypes[1][lv_streak]);
    }
    else {
    }
}

void gf_ScannerSweepUsed (int lp_player) {
    // Implementation
    UnitGroupLoopBegin(UnitGroupAlliance(lp_player, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gv_talentsActual[lp_player] != 5)) {
            PlayerCreateEffectUnit(lp_player, "RevelationSet", UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
}

void gf_SupplyDropUsed (int lp_player) {
}

//--------------------------------------------------------------------------------------------------
// Trigger: init physics
//--------------------------------------------------------------------------------------------------
bool gt_initphysics_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    InitObjects();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_initphysics_Init () {
    gt_initphysics = TriggerCreate("gt_initphysics_Func");
    TriggerAddEventMapInit(gt_initphysics);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Loop Trigger
//--------------------------------------------------------------------------------------------------
bool gt_LoopTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerQueueEnter();
    CollisionStep();
    BounceStep();
    TriggerQueueExit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoopTrigger_Init () {
    gt_LoopTrigger = TriggerCreate("gt_LoopTrigger_Func");
    TriggerAddEventTimePeriodic(gt_LoopTrigger, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Melee Initialization
//--------------------------------------------------------------------------------------------------
bool gt_MeleeInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_y = 100;

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/67E46D52"), 24, RegionGetCenter(RegionFromId(11)), 1.0, true, false, GameAttributePlayersForTeam(1));
    TextTagCreate(StringExternal("Param/Value/9BB707FA"), 24, RegionGetCenter(RegionFromId(13)), 1.0, true, false, GameAttributePlayersForTeam(1));
    TextTagCreate(StringExternal("Param/Value/F1AEDAE9"), 24, RegionGetCenter(RegionFromId(28)), 1.0, true, false, GameAttributePlayersForTeam(1));
    TextTagCreate(StringExternal("Param/Value/8C80C3D0"), 24, RegionGetCenter(RegionFromId(12)), 1.0, true, false, GameAttributePlayersForTeam(2));
    TextTagCreate(StringExternal("Param/Value/02212ABF"), 24, RegionGetCenter(RegionFromId(14)), 1.0, true, false, GameAttributePlayersForTeam(2));
    TextTagCreate(StringExternal("Param/Value/C1F1AD47"), 24, RegionGetCenter(RegionFromId(29)), 1.0, true, false, GameAttributePlayersForTeam(2));
    UIUnitColorStyleOverride(PlayerGroupAll(), c_unitColorStyleNormal);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealerCreate(PlayerGroupLoopCurrent(), RegionEntireMap());
        gv_revealer[PlayerGroupLoopCurrent()] = VisRevealerLastCreated();
        VisRevealerEnable(VisRevealerLastCreated(), true);
    }
    PlayerGroupLoopEnd();
    DialogCreate(1420, 590, c_anchorCenter, 0, -200, true);
    DialogSetTransparency(DialogLastCreated(), 25.0);
    gv_statsDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1420, 590, c_anchorCenter, 0, 0, StringExternal("Param/Value/F986AE96"), "Unreal\\Scoreboard Dialog (2.1).tga", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTop, 0, 25, StringExternal("Param/Value/44E5A665"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize32Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
    lv_y = 95;
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 25, lv_y, StringExternal("Param/Value/500EF754"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 375, lv_y, StringExternal("Param/Value/71A09224"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 505, lv_y, StringExternal("Param/Value/FF26C95B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 590, lv_y, StringExternal("Param/Value/074B23A7"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100.00, 0.00, 0.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 755, lv_y, StringExternal("Param/Value/A514F309"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 50.20, 100.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 1110, lv_y, StringExternal("Param/Value/A6BC638B"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 50.20, 100.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 1235, lv_y, StringExternal("Param/Value/0A625772"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 50.20, 100.00), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 1320, lv_y, StringExternal("Param/Value/AC8ECD5F"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModLeftSize20Bold", PlayerGroupAll());
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(0.00, 50.20, 100.00), PlayerGroupAll());
    lv_y = 140;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (((IntLoopCurrent() == 1) || (IntLoopCurrent() == 3) || (IntLoopCurrent() == 5))) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 650, 45, c_anchorTopLeft, 20, (lv_y - 12), StringExternal("Param/Value/9DD86FE9"), "Scoreboard Dialog Red Line.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else {
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 25, lv_y, PlayerName(PlayerGroupLoopCurrent()), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsNames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 390, lv_y, StringExternal("Param/Value/D4080698"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsScore[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 505, lv_y, StringExternal("Param/Value/D526088D"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsKillsDeaths[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 610, lv_y, StringExternal("Param/Value/B3EBFD56"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsFlags[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
        lv_y += 45;
    }
    PlayerGroupLoopEnd();
    lv_y = 140;
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(2));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (((IntLoopCurrent() == 1) || (IntLoopCurrent() == 3) || (IntLoopCurrent() == 5))) {
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 650, 45, c_anchorTopLeft, 720, (lv_y - 12), StringExternal("Param/Value/77AB27E6"), "Scoreboard Dialog Blue Line.tga", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else {
        }
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 755, lv_y, PlayerName(PlayerGroupLoopCurrent()), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsNames[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 1120, lv_y, StringExternal("Param/Value/D4C16574"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsScore[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 1235, lv_y, StringExternal("Param/Value/1B658440"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsKillsDeaths[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 400, 40, c_anchorTopLeft, 1340, lv_y, StringExternal("Param/Value/DE3A5327"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_statsFlags[PlayerGroupLoopCurrent()] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "AISurrenderTitle", PlayerGroupAll());
        lv_y += 45;
    }
    PlayerGroupLoopEnd();
    libNtve_gf_SendActorMessageToUnit(UnitFromId(17), libNtve_gf_SetTintColor(Color(56.86, 0.00, 0.00), 1.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1171), libNtve_gf_SetTintColor(Color(56.86, 0.00, 0.00), 1.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(18), libNtve_gf_SetTintColor(Color(0.00, 18.04, 90.20), 1.0, 0.0));
    libNtve_gf_SendActorMessageToUnit(UnitFromId(1182), libNtve_gf_SetTintColor(Color(0.00, 18.04, 90.20), 1.0, 0.0));
    GameSetSpeedValue(c_gameSpeedFast);
    GameSetSpeedLocked(true);
    gf_DialogsMapVoting();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeleeInitialization_Init () {
    gt_MeleeInitialization = TriggerCreate("gt_MeleeInitialization_Func");
    TriggerAddEventMapInit(gt_MeleeInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Selection
//--------------------------------------------------------------------------------------------------
bool gt_PlayerSelection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_playerUnits[EventPlayer()] != EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(EventUnit(), EventPlayer(), false);
    UnitSelect(gv_playerUnits[EventPlayer()], EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerSelection_Init () {
    gt_PlayerSelection = TriggerCreate("gt_PlayerSelection_Func");
    TriggerAddEventUnitSelected(gt_PlayerSelection, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flag Carrier Dies
//--------------------------------------------------------------------------------------------------
bool gt_FlagCarrierDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_teamFlagCarrier[1] == EventUnit())) {
        gv_teamFlagActive[1] = false;
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()), 270.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 18.04, 90.20), 1.0, 0.0));
        if ((gv_map == 0)) {
            RegionAttachToUnit(RegionFromId(3), UnitLastCreated(), Point(0.0, 0.0));
        }
        else if ((gv_map == 1)) {
            RegionAttachToUnit(RegionFromId(9), UnitLastCreated(), Point(0.0, 0.0));
        }
        else if ((gv_map == 2)) {
            RegionAttachToUnit(RegionFromId(26), UnitLastCreated(), Point(0.0, 0.0));
        }
        gv_teamFlags[2] = UnitLastCreated();
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/10D77BD0"));
        gv_teamFlagCarrier[1] = null;
    }
    else {
    }
    if ((gv_teamFlagCarrier[2] == EventUnit())) {
        gv_teamFlagActive[2] = false;
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, UnitGetPosition(EventUnit()), 270.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(56.86, 0.00, 0.00), 1.0, 0.0));
        if ((gv_map == 0)) {
            RegionAttachToUnit(RegionFromId(4), UnitLastCreated(), Point(0.0, 0.0));
        }
        else if ((gv_map == 1)) {
            RegionAttachToUnit(RegionFromId(8), UnitLastCreated(), Point(0.0, 0.0));
        }
        else if ((gv_map == 2)) {
            RegionAttachToUnit(RegionFromId(25), UnitLastCreated(), Point(0.0, 0.0));
        }
        gv_teamFlags[1] = UnitLastCreated();
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/E111373D"));
        gv_teamFlagCarrier[2] = null;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FlagCarrierDies_Init () {
    gt_FlagCarrierDies = TriggerCreate("gt_FlagCarrierDies_Func");
    TriggerAddEventUnitDied(gt_FlagCarrierDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Dies
//--------------------------------------------------------------------------------------------------
bool gt_PlayerDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_uif;
    int lv_ui;
    text lv_color;
    int lv_i;
    int lv_k;
    point lv_pd;

    // Variable Initialization
    lv_uif = UnitGetCustomValue(EventUnit(), 0);
    lv_i = 1;
    lv_pd = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ui = FixedToInt(lv_uif);
    RemoveObject(lv_ui, "");
    gv_playerDeathTimer[EventPlayer()] = 10;
    if ((gv_talentsActual[EventPlayer()] == 7) && (UnitIsAlive(gv_playerUnits[libNtve_gf_KillingPlayer()]) == true)) {
        PlayerCreateEffectUnit(EventPlayer(), "RevelationSet", gv_playerUnits[libNtve_gf_KillingPlayer()]);
    }
    else {
        if ((gv_talentsActual[EventPlayer()] == 10)) {
            ColdBloodActions(EventPlayer(),lv_pd);
        }
        else {
        }
    }
    gv_playerSpree[EventPlayer()] = 0;
    gv_playerMultikills[EventPlayer()] = 0;
    gv_playerDeaths[EventPlayer()] += 1;
    gv_playerScore[EventPlayer()] -= 5;
    libNtve_gf_SetDialogItemText(gv_statsScore[EventPlayer()], IntToText(gv_playerScore[EventPlayer()]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_statsKillsDeaths[EventPlayer()], (IntToText(gv_playerKills[EventPlayer()]) + StringExternal("Param/Value/494FEFFB") + IntToText(gv_playerDeaths[EventPlayer()])), PlayerGroupAll());
    if ((libNtve_gf_KillingPlayer() < 15) && (PlayerGetAlliance(libNtve_gf_KillingPlayer(), c_allianceIdPassive, EventPlayer()) == false)) {
        gv_playerKills[libNtve_gf_KillingPlayer()] += 1;
        gv_playerSpree[libNtve_gf_KillingPlayer()] += 1;
        gv_playerMultikills[libNtve_gf_KillingPlayer()] += 1;
        gv_playerScore[libNtve_gf_KillingPlayer()] += 10;
        gv_playerMinerals[libNtve_gf_KillingPlayer()] += 8;
        if ((gv_talentsActual[libNtve_gf_KillingPlayer()] == 6)) {
            gv_playerMinerals[libNtve_gf_KillingPlayer()] += 4;
        }
        else {
        }
        TimerStart(gv_multikillTimer[libNtve_gf_KillingPlayer()], 5.0, false, c_timeGame);
        libNtve_gf_SetDialogItemText(gv_statsScore[libNtve_gf_KillingPlayer()], IntToText(gv_playerScore[libNtve_gf_KillingPlayer()]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_statsKillsDeaths[libNtve_gf_KillingPlayer()], (IntToText(gv_playerKills[libNtve_gf_KillingPlayer()]) + StringExternal("Param/Value/2935E3EC") + IntToText(gv_playerDeaths[libNtve_gf_KillingPlayer()])), PlayerGroupAll());
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), libNtve_gf_KillingPlayer()) == true)) {
            lv_color = StringExternal("Param/Value/99202B39");
        }
        else {
        }
        if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), libNtve_gf_KillingPlayer()) == true)) {
            lv_color = StringExternal("Param/Value/B6E82103");
        }
        else {
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + lv_color + StringExternal("Param/Value/03880BCD") + PlayerName(EventPlayer())));
        if ((gv_firstBlood == false)) {
            gv_firstBlood = true;
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00144", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/762A93ED") + lv_color + StringExternal("Param/Value/992276B2")));
        }
        else {
        }
        if ((gv_playerMultikills[libNtve_gf_KillingPlayer()] == 2)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00145", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/7C52023A") + lv_color + StringExternal("Param/Value/7BDA626C")));
        }
        else if ((gv_playerMultikills[libNtve_gf_KillingPlayer()] == 3)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00146", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/F45E3C80") + lv_color + StringExternal("Param/Value/339CE288")));
        }
        else if ((gv_playerMultikills[libNtve_gf_KillingPlayer()] == 4)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/91185174") + lv_color + StringExternal("Param/Value/1A1AD2A2")));
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00149", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
        }
        else if ((gv_playerMultikills[libNtve_gf_KillingPlayer()] == 5)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/E3AB875E") + lv_color + StringExternal("Param/Value/81B9C21C")));
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00151", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
        }
        else if ((gv_playerMultikills[libNtve_gf_KillingPlayer()] == 6)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/7A6A14EF") + lv_color + StringExternal("Param/Value/61792BE4")));
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00153", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
        }
        else if ((gv_playerMultikills[libNtve_gf_KillingPlayer()] == 7)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/D99FA4A4") + lv_color + StringExternal("Param/Value/C0F5BF9E")));
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00154", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
        }
        else if ((gv_playerMultikills[libNtve_gf_KillingPlayer()] > 7)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/5367182F") + lv_color + StringExternal("Param/Value/D5806237")));
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00125", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
        }
        if ((gv_playerSpree[libNtve_gf_KillingPlayer()] == 3)) {
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00150", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/C28488A6") + lv_color + StringExternal("Param/Value/702209ED")));
            gf_LowSteakEarned(libNtve_gf_KillingPlayer());
        }
        else if ((gv_playerSpree[libNtve_gf_KillingPlayer()] == 5)) {
            gf_MidStreakEarned(libNtve_gf_KillingPlayer());
        }
        else if ((gv_playerSpree[libNtve_gf_KillingPlayer()] == 7)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/B34BF1D5") + lv_color + StringExternal("Param/Value/610AE800")));
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00155", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
        }
        else if ((gv_playerSpree[libNtve_gf_KillingPlayer()] == 15)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/507B524A") + lv_color + StringExternal("Param/Value/42E2569E")));
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00126", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
        }
        else if ((gv_playerSpree[libNtve_gf_KillingPlayer()] == 20)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/802F19CB") + lv_color + StringExternal("Param/Value/A5635C80")));
            SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00085", -1), PlayerGroupSingle(libNtve_gf_KillingPlayer()), 100.0, 0.0);
        }
    }
    else {
        if (((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), libNtve_gf_KillingPlayer()) == true) || (PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), libNtve_gf_KillingPlayer()) == true))) {
            if ((EventPlayer() == libNtve_gf_KillingPlayer())) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/567385D2")));
                gv_playerMinerals[EventPlayer()] -= 5;
            }
            else {
                if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), libNtve_gf_KillingPlayer()) == true)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/DAF7FDC1") + PlayerName(EventPlayer())));
                    gv_playerMinerals[libNtve_gf_KillingPlayer()] -= 5;
                }
                else {
                }
                if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), libNtve_gf_KillingPlayer()) == true)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/89F6125E") + PlayerName(EventPlayer())));
                    gv_playerMinerals[libNtve_gf_KillingPlayer()] -= 5;
                }
                else {
                }
                if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/465EB262")));
                    gv_playerMinerals[libNtve_gf_KillingPlayer()] -= 5;
                }
                else {
                }
                if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true)) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/B97441D9")));
                    gv_playerMinerals[EventPlayer()] -= 5;
                }
                else {
                }
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerDies_Init () {
    gt_PlayerDies = TriggerCreate("gt_PlayerDies_Func");
    TriggerAddEventUnitDied(gt_PlayerDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Suicide
//--------------------------------------------------------------------------------------------------
bool gt_Suicide_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_playerUnits[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Suicide_Init () {
    gt_Suicide = TriggerCreate("gt_Suicide_Func");
    TriggerAddEventChatMessage(gt_Suicide, c_playerAny, "-suicide", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Multikill Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_MultikillTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timer;
    int lv_i;

    // Variable Initialization
    lv_timer = EventTimer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 1;
    while (lv_i < 13)
    {
        if (lv_timer == gv_multikillTimer[lv_i])
        {
            gv_playerMultikills[lv_i] = 0;
            break;
        }
        else
        {
            lv_i += 1;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MultikillTimerExpires_Init () {
    gt_MultikillTimerExpires = TriggerCreate("gt_MultikillTimerExpires_Func");
    TriggerAddEventTimer(gt_MultikillTimerExpires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Timer
//--------------------------------------------------------------------------------------------------
bool gt_GameTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_m;
    text lv_s;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_scoreGameMinutes > 0) || (gv_scoreGameSeconds > 0))) {
        gv_scoreGameSeconds -= 1;
        if ((gv_scoreGameSeconds < 0)) {
            gv_scoreGameSeconds = 59;
            gv_scoreGameMinutes -= 1;
        }
        else {
        }
        if ((gv_scoreGameMinutes < 10)) {
            lv_m = (StringExternal("Param/Value/5CF9987C") + IntToText(gv_scoreGameMinutes));
        }
        else {
            lv_m = IntToText(gv_scoreGameMinutes);
        }
        if ((gv_scoreGameSeconds < 10)) {
            lv_s = (StringExternal("Param/Value/D3625D30") + IntToText(gv_scoreGameSeconds));
        }
        else {
            lv_s = IntToText(gv_scoreGameSeconds);
        }
        libNtve_gf_SetDialogItemText(gv_scoreGameTimeDialog, (lv_m + StringExternal("Param/Value/0ABC25E6") + lv_s), PlayerGroupAll());
        if ((gv_scoreGameMinutes == 1) && (gv_scoreGameSeconds == 0)) {
            SoundPlay(SoundLink("UI_Bnet_MatchCountdownGo", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/96511D54")));
        }
        else {
        }
        if ((gv_scoreGameMinutes == 14) && (gv_scoreGameSeconds == 30)) {
            gf_TipsDisplay();
        }
        else if ((gv_scoreGameMinutes == 9) && (gv_scoreGameSeconds == 30)) {
            gf_TipsDisplay();
        }
        else if ((gv_scoreGameMinutes == 4) && (gv_scoreGameSeconds == 30)) {
            gf_TipsDisplay();
        }
    }
    else {
        SoundPlay(SoundLink("UI_Bnet_MatchCountdownGo", -1), PlayerGroupAll(), 100.0, 0.0);
        if ((gv_teamScore[1] > gv_teamScore[2])) {
            gf_GameEnd(1, 2);
            TriggerEnable(TriggerGetCurrent(), false);
        }
        else {
            if ((gv_teamScore[2] > gv_teamScore[1])) {
                gf_GameEnd(2, 1);
                TriggerEnable(TriggerGetCurrent(), false);
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/756072FE")));
                libNtve_gf_SetDialogItemText(gv_scoreGameTimeDialog, StringExternal("Param/Value/3D586ACC"), PlayerGroupAll());
                TriggerEnable(TriggerGetCurrent(), false);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameTimer_Init () {
    gt_GameTimer = TriggerCreate("gt_GameTimer_Func");
    TriggerEnable(gt_GameTimer, false);
    TriggerAddEventTimePeriodic(gt_GameTimer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Respawn Timer
//--------------------------------------------------------------------------------------------------
bool gt_RespawnTimer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_gameEnded == false) && (gv_playerDeathTimer[PlayerGroupLoopCurrent()] > 0)) {
            gv_playerDeathTimer[PlayerGroupLoopCurrent()] -= 1;
            if ((gv_playerDeathTimer[PlayerGroupLoopCurrent()] <= 0)) {
                if ((gv_map == 0)) {
                    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), PlayerGroupLoopCurrent()) == true)) {
                        gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(1)));
                    }
                    else {
                        gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(2)));
                    }
                }
                else if ((gv_map == 1)) {
                    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), PlayerGroupLoopCurrent()) == true)) {
                        gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(6)));
                    }
                    else {
                        gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(7)));
                    }
                }
                else if ((gv_map == 2)) {
                    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), PlayerGroupLoopCurrent()) == true)) {
                        gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(23)));
                    }
                    else {
                        gv_playerUnits[PlayerGroupLoopCurrent()] = gf_SpawnHero(PlayerGroupLoopCurrent(), "Raynor01", RegionRandomPoint(RegionFromId(24)));
                    }
                }
                gf_WeaponsCheck(PlayerGroupLoopCurrent());
                gf_TalentsCheck(PlayerGroupLoopCurrent());
                gf_StreaksCheck(PlayerGroupLoopCurrent());
                gf_ItemsCheck(PlayerGroupLoopCurrent());
                UnitBehaviorAdd(UnitLastCreated(), "NexusInvulnerability", UnitLastCreated(), 1);
                CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitLastCreated()), 0.0, -1, 10.0, false);
                UnitSelect(UnitLastCreated(), PlayerGroupLoopCurrent(), true);
                TextTagAttachToUnit(gv_textTags[PlayerGroupLoopCurrent()], UnitLastCreated(), 1.5);
                UIDisplayMessage(PlayerGroupSingle(PlayerGroupLoopCurrent()), c_messageAreaSubtitle, StringExternal("Param/Value/2429A2BE"));
                UnitControlGroupAddUnit(PlayerGroupLoopCurrent(), 1, UnitLastCreated());
                SoundPlay(SoundLink("Raynor_Ready", -1), PlayerGroupSingle(PlayerGroupLoopCurrent()), 100.0, 0.0);
            }
            else {
            }
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RespawnTimer_Init () {
    gt_RespawnTimer = TriggerCreate("gt_RespawnTimer_Func");
    TriggerEnable(gt_RespawnTimer, false);
    TriggerAddEventTimePeriodic(gt_RespawnTimer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tips Init
//--------------------------------------------------------------------------------------------------
bool gt_TipsInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_tips[1] = StringExternal("Param/Value/4C9BCCA7");
    gv_tips[2] = StringExternal("Param/Value/606AEF28");
    gv_tips[3] = StringExternal("Param/Value/FFC4A852");
    gv_tips[4] = StringExternal("Param/Value/245D4656");
    gv_tips[5] = StringExternal("Param/Value/C60E556B");
    gv_tips[6] = StringExternal("Param/Value/868FB951");
    gv_tips[7] = StringExternal("Param/Value/2F1F911D");
    gv_tips[8] = StringExternal("Param/Value/D82EAAE7");
    gv_tips[9] = StringExternal("Param/Value/D8A4EEF2");
    gv_tips[10] = StringExternal("Param/Value/6AB31D4C");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TipsInit_Init () {
    gt_TipsInit = TriggerCreate("gt_TipsInit_Func");
    TriggerAddEventTimeElapsed(gt_TipsInit, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Economics
//--------------------------------------------------------------------------------------------------
bool gt_Economics_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(0, 13);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        gv_playerMinerals[IntLoopCurrent()] += 8;
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Economics_Init () {
    gt_Economics = TriggerCreate("gt_Economics_Func");
    TriggerAddEventTimePeriodic(gt_Economics, 20.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Reweapon Team1
//--------------------------------------------------------------------------------------------------
bool gt_EnterReweaponTeam1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CharacterCheck(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterReweaponTeam1_Init () {
    gt_EnterReweaponTeam1 = TriggerCreate("gt_EnterReweaponTeam1_Func");
    TriggerAddEventUnitRegion(gt_EnterReweaponTeam1, null, RegionFromId(11), true);
    TriggerAddEventUnitRegion(gt_EnterReweaponTeam1, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_EnterReweaponTeam1, null, RegionFromId(28), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Reweapon Team2
//--------------------------------------------------------------------------------------------------
bool gt_EnterReweaponTeam2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CharacterCheck(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterReweaponTeam2_Init () {
    gt_EnterReweaponTeam2 = TriggerCreate("gt_EnterReweaponTeam2_Func");
    TriggerAddEventUnitRegion(gt_EnterReweaponTeam2, null, RegionFromId(12), true);
    TriggerAddEventUnitRegion(gt_EnterReweaponTeam2, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_EnterReweaponTeam2, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leavers - Team Left
//--------------------------------------------------------------------------------------------------
bool gt_LeaversTeamLeft_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameEnded == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true) && (PlayerGroupCount(GameAttributePlayersForTeam(1)) <= 0)) {
        gf_GameEnd(2, 1);
    }
    else {
    }
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true) && (PlayerGroupCount(GameAttributePlayersForTeam(2)) <= 0)) {
        gf_GameEnd(1, 2);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LeaversTeamLeft_Init () {
    gt_LeaversTeamLeft = TriggerCreate("gt_LeaversTeamLeft_Func");
    TriggerAddEventPlayerLeft(gt_LeaversTeamLeft, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewers - Slowing Water
//--------------------------------------------------------------------------------------------------
bool gt_SewersSlowingWater_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(18), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Raynor01") && (UnitGetHeight(UnitGroupLoopCurrent()) < 1.0)) {
            UnitGroupAdd(gv_sewersGroup, UnitGroupLoopCurrent());
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Slowed", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(17), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Raynor01") && (UnitGetHeight(UnitGroupLoopCurrent()) < 1.0)) {
            UnitGroupAdd(gv_sewersGroup, UnitGroupLoopCurrent());
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Slowed", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(19), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Raynor01") && (UnitGetHeight(UnitGroupLoopCurrent()) < 1.0)) {
            UnitGroupAdd(gv_sewersGroup, UnitGroupLoopCurrent());
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Slowed", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(20), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Raynor01") && (UnitGetHeight(UnitGroupLoopCurrent()) < 1.0)) {
            UnitGroupAdd(gv_sewersGroup, UnitGroupLoopCurrent());
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Slowed", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(21), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Raynor01") && (UnitGetHeight(UnitGroupLoopCurrent()) < 1.0)) {
            UnitGroupAdd(gv_sewersGroup, UnitGroupLoopCurrent());
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Slowed", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupFilter(null, c_playerAny, gv_sewersGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(18)) != true) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(17)) != true) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(19)) != true) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(20)) != true) && (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(21)) != true)) || (UnitIsAlive(UnitGroupLoopCurrent()) != true) || (UnitGetHeight(UnitGroupLoopCurrent()) > 1.0))) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "Slowed", 1);
            UnitGroupRemove(gv_sewersGroup, UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewersSlowingWater_Init () {
    gt_SewersSlowingWater = TriggerCreate("gt_SewersSlowingWater_Func");
    TriggerEnable(gt_SewersSlowingWater, false);
    TriggerAddEventTimePeriodic(gt_SewersSlowingWater, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init ks
//--------------------------------------------------------------------------------------------------
bool gt_Initks_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_kSName[0][0] = "Scanner Sweep";
    gv_kSName[0][1] = "Supply Drop";
    gv_kSName[0][2] = "Turret Calldown";
    gv_kSName[1][0] = "Guardian";
    gv_kSName[1][1] = "Predator Sentries";
    gv_kSName[1][2] = "Helfire Strike";
    gv_kSName[2][0] = "Kinetic Bombardment";
    gv_kSName[2][1] = "Valkyrie";
    gv_kSName[2][2] = "Meteor Storm";
    gv_kSImage[0][0] = "Assets\\Textures\\btn-ability-terran-scannersweep-color.dds";
    gv_kSImage[0][1] = "Assets\\Textures\\btn-ability-terran-calldownextrasupplies-color.dds";
    gv_kSImage[0][2] = "Assets\\Textures\\btn-research-zerg-shriketurret.dds";
    gv_kSImage[1][0] = "Assets\\Textures\\btn-ability-protoss-replicate.dds";
    gv_kSImage[1][1] = "Assets\\Textures\\btn-research-zerg-predator.dds";
    gv_kSImage[1][2] = "Assets\\Textures\\btn-tips-walloffire.dds";
    gv_streaksItemTypes[0][0] = "ScannerSweep";
    gv_streaksItemTypes[0][1] = "SupplyDrop2";
    gv_streaksItemTypes[0][2] = "AutoTurretItem";
    gv_streaksItemTypes[1][0] = "GuardianItem";
    gv_streaksItemTypes[1][1] = "PredatorSentries";
    gv_streaksItemTypes[1][2] = "HelfireStrike";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initks_Init () {
    gt_Initks = TriggerCreate("gt_Initks_Func");
    TriggerAddEventTimeElapsed(gt_Initks, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init Overflag UI 2
//--------------------------------------------------------------------------------------------------
bool gt_initOverflagUI2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    color lv_color;

    // Variable Initialization
    lv_color = Color(100.00, 0.00, 0.00);

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(300, 300, c_anchorTopLeft, 0, 0, true);
    gv_overflagDialog2[1] = DialogLastCreated();
    while ((lv_i < 80)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_i, 1, c_anchorBottomLeft, 40-(lv_i/2), lv_i, StringExternal("Param/Value/6073AA35"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100-(lv_i/2));
        lv_i += 1;
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 80, 80, c_anchorBottomLeft, 0, 90, StringExternal("Param/Value/64261A59"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 80, 80, c_anchorBottomLeft, 0, 90, StringExternal("Param/Value/49DFDF55"), "Assets\\Textures\\btn-ability-zerg-advancedmutation.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 32);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 150, 80, c_anchorBottomLeft, 85, 90, StringExternal("Param/Value/60FD0BEE"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 80, c_anchorBottomLeft, 85, 90, StringExternal("Param/Value/611BEAAA"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_overflagHeader2[1][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(1), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 80, c_anchorBottomLeft, 85, 90, StringExternal("Param/Value/6D9DB901"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_overflagHeader2[1][2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(2), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(gv_overflagHeader2[1][1], StringExternal("Param/Value/4BF996E6"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_overflagHeader2[1][2], StringExternal("Param/Value/81FBC9DB"), PlayerGroupAll());
    DialogCreate(300, 300, c_anchorTopLeft, 0, 0, true);
    lv_color = Color(0,66*100/255,100);
    lv_i = 0;
    gv_overflagDialog2[2] = DialogLastCreated();
    while ((lv_i < 80)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_i, 1, c_anchorBottomLeft, 40-(lv_i/2), lv_i, StringExternal("Param/Value/3FCB4E10"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100-(lv_i/2));
        lv_i += 1;
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 80, 80, c_anchorBottomLeft, 0, 90, StringExternal("Param/Value/0AA90483"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 60);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 80, 80, c_anchorBottomLeft, 0, 90, StringExternal("Param/Value/09A1E3D8"), "Assets\\Textures\\btn-ability-terran-yamatogun.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 32);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 150, 80, c_anchorBottomLeft, 85, 90, StringExternal("Param/Value/E3CDFBA5"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 80);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 80, c_anchorBottomLeft, 85, 90, StringExternal("Param/Value/7AD79E72"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_overflagHeader2[2][1] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(1), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 150, 80, c_anchorBottomLeft, 85, 90, StringExternal("Param/Value/18C0B679"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_overflagHeader2[2][2] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), GameAttributePlayersForTeam(2), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(gv_overflagHeader2[2][2], StringExternal("Param/Value/39B13542"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_overflagHeader2[2][1], StringExternal("Param/Value/5DC7482A"), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_initOverflagUI2_Init () {
    gt_initOverflagUI2 = TriggerCreate("gt_initOverflagUI2_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Items
//--------------------------------------------------------------------------------------------------
bool gt_InitItems_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_itemBehaviors[0] = "Grenade";
    gv_itemBehaviors[1] = "Medkit";
    gv_itemBehaviors[2] = "CamDrone";
    gv_itemBehaviors[3] = "Shield";
    gv_itemBehaviors[4] = "RocketJump";
    gv_itemChargeEffects[0] = "AddGrenadeCharge";
    gv_itemChargeEffects[1] = "AddMedkit";
    gv_itemChargeEffects[2] = "AddCamCharge";
    gv_itemChargeEffects[3] = "AddShieldCharge";
    gv_itemChargeEffects[4] = "AddRocketJump";
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitItems_Init () {
    gt_InitItems = TriggerCreate("gt_InitItems_Func");
    TriggerAddEventTimeElapsed(gt_InitItems, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shop Item Purchased
//--------------------------------------------------------------------------------------------------
bool gt_ShopItemPurchased_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_menuItemButton[0] == EventDialogControl()) || (gv_menuItemButton[1] == EventDialogControl()) || (gv_menuItemButton[2] == EventDialogControl()) || (gv_menuItemButton[3] == EventDialogControl()) || (gv_menuItemButton[4] == EventDialogControl()) || (gv_menuItemButton[5] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_menuItemButton[0] == EventDialogControl())) {
        if ((gv_playerMinerals[EventPlayer()] >= 15)) {
            gv_playerItems[EventPlayer()][0] += 1;
            gv_playerMinerals[EventPlayer()] -= 15;
            libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/A4171DC0"), PlayerGroupSingle(EventPlayer()));
            if ((gf_SpawnAreaCheck(EventPlayer()) == true)) {
                UnitBehaviorAdd(gv_playerUnits[EventPlayer()], gv_itemBehaviors[0], gv_playerUnits[EventPlayer()], 1);
                PlayerCreateEffectUnit(EventPlayer(), gv_itemChargeEffects[0], gv_playerUnits[EventPlayer()]);
            }
            else {
            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/981437DB"), PlayerGroupSingle(EventPlayer()));
        }
    }
    else {
    }
    if ((gv_menuItemButton[1] == EventDialogControl())) {
        if ((gv_playerMinerals[EventPlayer()] >= 12)) {
            gv_playerItems[EventPlayer()][1] += 1;
            gv_playerMinerals[EventPlayer()] -= 12;
            libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/49FDE813"), PlayerGroupSingle(EventPlayer()));
            if ((gf_SpawnAreaCheck(EventPlayer()) == true)) {
                UnitBehaviorAdd(gv_playerUnits[EventPlayer()], gv_itemBehaviors[1], gv_playerUnits[EventPlayer()], 1);
                PlayerCreateEffectUnit(EventPlayer(), gv_itemChargeEffects[1], gv_playerUnits[EventPlayer()]);
            }
            else {
            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/B1B9CE0B"), PlayerGroupSingle(EventPlayer()));
        }
    }
    else {
    }
    if ((gv_menuItemButton[2] == EventDialogControl())) {
        if ((gv_playerMinerals[EventPlayer()] >= 20)) {
            gv_playerItems[EventPlayer()][2] += 1;
            gv_playerMinerals[EventPlayer()] -= 20;
            libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/B8051B2B"), PlayerGroupSingle(EventPlayer()));
            if ((gf_SpawnAreaCheck(EventPlayer()) == true)) {
                UnitBehaviorAdd(gv_playerUnits[EventPlayer()], gv_itemBehaviors[2], gv_playerUnits[EventPlayer()], 1);
                PlayerCreateEffectUnit(EventPlayer(), gv_itemChargeEffects[2], gv_playerUnits[EventPlayer()]);
            }
            else {
            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/D4357E47"), PlayerGroupSingle(EventPlayer()));
        }
    }
    else {
    }
    if ((gv_menuItemButton[3] == EventDialogControl())) {
        if ((gv_playerMinerals[EventPlayer()] >= 15)) {
            gv_playerItems[EventPlayer()][3] += 1;
            gv_playerMinerals[EventPlayer()] -= 15;
            libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/6A474304"), PlayerGroupSingle(EventPlayer()));
            if ((gf_SpawnAreaCheck(EventPlayer()) == true)) {
                UnitBehaviorAdd(gv_playerUnits[EventPlayer()], gv_itemBehaviors[3], gv_playerUnits[EventPlayer()], 1);
                PlayerCreateEffectUnit(EventPlayer(), gv_itemChargeEffects[3], gv_playerUnits[EventPlayer()]);
            }
            else {
            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/0515DA38"), PlayerGroupSingle(EventPlayer()));
        }
    }
    else {
    }
    if ((gv_menuItemButton[4] == EventDialogControl())) {
        if ((gv_playerMinerals[EventPlayer()] >= 18)) {
            gv_playerItems[EventPlayer()][4] += 1;
            gv_playerMinerals[EventPlayer()] -= 18;
            libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/BD847A1E"), PlayerGroupSingle(EventPlayer()));
            if ((gf_SpawnAreaCheck(EventPlayer()) == true)) {
                UnitBehaviorAdd(gv_playerUnits[EventPlayer()], gv_itemBehaviors[4], gv_playerUnits[EventPlayer()], 1);
                PlayerCreateEffectUnit(EventPlayer(), gv_itemChargeEffects[4], gv_playerUnits[EventPlayer()]);
            }
            else {
            }
        }
        else {
            libNtve_gf_SetDialogItemText(gv_interfaceBottomText, StringExternal("Param/Value/00E07653"), PlayerGroupSingle(EventPlayer()));
        }
    }
    else {
    }
    libNtve_gf_SetDialogItemText(gv_merchantMinerals, (StringExternal("Param/Value/2424D206") + IntToText(gv_playerMinerals[EventPlayer()])), PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShopItemPurchased_Init () {
    gt_ShopItemPurchased = TriggerCreate("gt_ShopItemPurchased_Func");
    TriggerAddEventDialogControl(gt_ShopItemPurchased, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timer
//--------------------------------------------------------------------------------------------------
bool gt_Timer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_time -= 1;
    libNtve_gf_SetDialogItemText(gv_timeLeft, (StringExternal("Param/Value/27A3C2B6") + IntToText(gv_time)), PlayerGroupAll());
    if ((gv_time < 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_mapVoted = true;
        gv_map = RandomInt(0, 2);
        DialogSetVisible(gv_mapDialog, PlayerGroupAll(), false);
        gf_GameStart();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Timer_Init () {
    gt_Timer = TriggerCreate("gt_Timer_Func");
    TriggerAddEventTimePeriodic(gt_Timer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Vote
//--------------------------------------------------------------------------------------------------
bool gt_MapVote_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_mapDone[EventPlayer()] == false))) {
            return false;
        }

        if (!((gv_mapVoted == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_mapButtons[1]) || (EventDialogControl() == gv_mapButtons[2]) || (EventDialogControl() == gv_mapButtons[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Ghost_SnipeLaunch", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_mapDone[EventPlayer()] = true;
    DialogControlSetEnabled(gv_mapButtons[1], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_mapButtons[2], PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetEnabled(gv_mapButtons[3], PlayerGroupSingle(EventPlayer()), false);
    if ((EventDialogControl() == gv_mapButtons[1])) {
        gv_mapCount[1] += 1;
        libNtve_gf_SetDialogItemText(gv_mapVotes[1], IntToText(gv_mapCount[1]), PlayerGroupAll());
        if ((gv_mapCount[1] >= (PlayerGroupCount(PlayerGroupActive()) / 2))) {
            TriggerEnable(gt_Timer, false);
            gv_mapVoted = true;
            gv_map = 0;
            DialogSetVisible(gv_mapDialog, PlayerGroupAll(), false);
            gf_GameStart();
        }
        else {
        }
    }
    else {
    }
    if ((EventDialogControl() == gv_mapButtons[2])) {
        gv_mapCount[2] += 1;
        libNtve_gf_SetDialogItemText(gv_mapVotes[2], IntToText(gv_mapCount[2]), PlayerGroupAll());
        if ((gv_mapCount[2] >= (PlayerGroupCount(PlayerGroupActive()) / 2))) {
            TriggerEnable(gt_Timer, false);
            gv_mapVoted = true;
            gv_map = 1;
            DialogSetVisible(gv_mapDialog, PlayerGroupAll(), false);
            gf_GameStart();
        }
        else {
        }
    }
    else {
    }
    if ((EventDialogControl() == gv_mapButtons[3])) {
        gv_mapCount[3] += 1;
        libNtve_gf_SetDialogItemText(gv_mapVotes[3], IntToText(gv_mapCount[3]), PlayerGroupAll());
        if ((gv_mapCount[3] >= (PlayerGroupCount(PlayerGroupActive()) / 2))) {
            TriggerEnable(gt_Timer, false);
            gv_mapVoted = true;
            gv_map = 2;
            DialogSetVisible(gv_mapDialog, PlayerGroupAll(), false);
            gf_GameStart();
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapVote_Init () {
    gt_MapVote = TriggerCreate("gt_MapVote_Func");
    TriggerAddEventDialogControl(gt_MapVote, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Menu - Tab Between
//--------------------------------------------------------------------------------------------------
bool gt_MenuTabBetween_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_interfaceDialogTopButtons[1] == EventDialogControl()) || (gv_interfaceDialogTopButtons[2] == EventDialogControl()) || (gv_interfaceDialogTopButtons[3] == EventDialogControl()) || (gv_interfaceDialogTopButtons[4] == EventDialogControl()) || (gv_interfaceDialogTopButtons[5] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_interfaceDialogTopButtons[2] == EventDialogControl())) {
        gf_InterfaceWeaponry(EventPlayer());
    }
    else if ((gv_interfaceDialogTopButtons[3] == EventDialogControl())) {
        gf_InterfaceArmory(EventPlayer());
    }
    else if ((gv_interfaceDialogTopButtons[4] == EventDialogControl())) {
        gf_InterfaceKillStreaks(EventPlayer());
    }
    else if ((gv_interfaceDialogTopButtons[5] == EventDialogControl())) {
        gf_InterfaceMerchant(EventPlayer());
        libNtve_gf_SetDialogItemText(gv_merchantMinerals, (StringExternal("Param/Value/61C36D9F") + IntToText(gv_playerMinerals[EventPlayer()])), PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MenuTabBetween_Init () {
    gt_MenuTabBetween = TriggerCreate("gt_MenuTabBetween_Func");
    TriggerAddEventDialogControl(gt_MenuTabBetween, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapons - Change
//--------------------------------------------------------------------------------------------------
bool gt_WeaponsChange_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_interfaceWeaponsButtons[1] == EventDialogControl()) || (gv_interfaceWeaponsButtons[2] == EventDialogControl()) || (gv_interfaceWeaponsButtons[3] == EventDialogControl()) || (gv_interfaceWeaponsButtons[4] == EventDialogControl()) || (gv_interfaceWeaponsButtons[5] == EventDialogControl()) || (gv_interfaceWeaponsButtons[6] == EventDialogControl()) || (gv_interfaceWeaponsButtons[7] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_interfaceAddOnsIcons[1], PlayerGroupSingle(EventPlayer()), true);
    DialogControlSetVisible(gv_interfaceAddOnsIcons[2], PlayerGroupSingle(EventPlayer()), true);
    if ((gv_interfaceWeaponsButtons[1] == EventDialogControl())) {
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[gv_interfaceWeaponsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_interfaceWeaponsCurrent[EventPlayer()] = 1;
        gv_weaponsChangesMade[EventPlayer()] = true;
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[1], PlayerGroupSingle(EventPlayer()), false);
        SoundPlay(SoundLink("Ghost_WeaponsFree", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((gv_interfaceAddOnsCurrent[EventPlayer()] == 1) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 2))) {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), false);
        }
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[1], "Assets\\Textures\\btn-ability-terran-snipe-color.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[2], "Assets\\Textures\\btn-techupgrade-terran-fullborecanisterammo.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[1], StringExternal("Param/Value/D2DEF05E"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[2], StringExternal("Param/Value/B06622A9"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsMain, "btn-ability-terran-experiencedplasmagun-color-pink-1.dds", PlayerGroupSingle(EventPlayer()));
        if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 1)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/A91D876E");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 2)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/F5C9E35F");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] != 1) && (gv_interfaceAddOnsCurrent[EventPlayer()] != 2)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), true);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = false;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/57F52C8E");
        }
    }
    else if ((gv_interfaceWeaponsButtons[2] == EventDialogControl())) {
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[gv_interfaceWeaponsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_interfaceWeaponsCurrent[EventPlayer()] = 2;
        gv_weaponsChangesMade[EventPlayer()] = true;
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[2], PlayerGroupSingle(EventPlayer()), false);
        SoundPlay(SoundLink("Ghost_WeaponsFree", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((gv_interfaceAddOnsCurrent[EventPlayer()] == 3) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 4))) {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), false);
        }
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[1], "Assets\\Textures\\btn-techupgrade-terran-minesplatter.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[2], "Assets\\Textures\\btn-ability-protoss-psytrousoxideon.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[1], StringExternal("Param/Value/0CD680BA"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[2], StringExternal("Param/Value/F29EC14D"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsMain, "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel3.dds", PlayerGroupSingle(EventPlayer()));
        if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 3)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/36DE3CF4");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 4)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/EC78A4DC");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] != 3) && (gv_interfaceAddOnsCurrent[EventPlayer()] != 4)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), true);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = false;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/3AA618AE");
        }
    }
    else if ((gv_interfaceWeaponsButtons[3] == EventDialogControl())) {
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[gv_interfaceWeaponsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_interfaceWeaponsCurrent[EventPlayer()] = 3;
        gv_weaponsChangesMade[EventPlayer()] = true;
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[3], PlayerGroupSingle(EventPlayer()), false);
        SoundPlay(SoundLink("Ghost_WeaponsFree", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((gv_interfaceAddOnsCurrent[EventPlayer()] == 5) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 6))) {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), false);
        }
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[1], "Assets\\Textures\\btn-upgrade-terran-corvidreactor.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[2], "Assets\\Textures\\btn-upgrade-terran-behemothreactor.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[1], StringExternal("Param/Value/E1E1DBF8"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[2], StringExternal("Param/Value/AA8EF08F"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsMain, "Assets\\Textures\\btn-ability-terran-bombardmentstrike-color.dds", PlayerGroupSingle(EventPlayer()));
        if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 5)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/C56E6CD5");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 6)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/C947313F");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] != 5) && (gv_interfaceAddOnsCurrent[EventPlayer()] != 6)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), true);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = false;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/CFB7E000");
        }
    }
    else if ((gv_interfaceWeaponsButtons[4] == EventDialogControl())) {
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[gv_interfaceWeaponsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_interfaceWeaponsCurrent[EventPlayer()] = 4;
        gv_weaponsChangesMade[EventPlayer()] = true;
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[4], PlayerGroupSingle(EventPlayer()), false);
        SoundPlay(SoundLink("Ghost_WeaponsFree", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((gv_interfaceAddOnsCurrent[EventPlayer()] == 7) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 8))) {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), false);
        }
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[1], "Assets\\Textures\\btn-ability-kerrigan-vespeneefficiency.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[2], "Assets\\Textures\\btn-ability-zerg-banelingspooge.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[1], StringExternal("Param/Value/10D41B0F"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[2], StringExternal("Param/Value/7C75A9EF"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsMain, "Assets\\Textures\\btn-ability-zerg-corrosiveblast.dds", PlayerGroupSingle(EventPlayer()));
        if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 7)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/F0A3CE44");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 8)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/6A183FFE");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] != 7) && (gv_interfaceAddOnsCurrent[EventPlayer()] != 8)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), true);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = false;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/A497CB67");
        }
    }
    else if ((gv_interfaceWeaponsButtons[5] == EventDialogControl())) {
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[gv_interfaceWeaponsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_interfaceWeaponsCurrent[EventPlayer()] = 5;
        gv_weaponsChangesMade[EventPlayer()] = true;
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[5], PlayerGroupSingle(EventPlayer()), false);
        SoundPlay(SoundLink("Ghost_WeaponsFree", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((gv_interfaceAddOnsCurrent[EventPlayer()] == 9) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 10))) {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), false);
        }
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[1], "Assets\\Textures\\btn-tips-walloffire.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[2], "Assets\\Textures\\btn-ability-terran-haywiremissile.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[1], StringExternal("Param/Value/3A2542FD"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[2], StringExternal("Param/Value/B7E514A7"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsMain, "Assets\\Textures\\btn-ability-terran-punishergrenade-color.dds", PlayerGroupSingle(EventPlayer()));
        if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 9)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/5BD2DBD5");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 10)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/A0E87198");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] != 9) && (gv_interfaceAddOnsCurrent[EventPlayer()] != 10)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), true);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = false;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/D66398AB");
        }
    }
    else if ((gv_interfaceWeaponsButtons[6] == EventDialogControl())) {
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[gv_interfaceWeaponsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_interfaceWeaponsCurrent[EventPlayer()] = 6;
        gv_weaponsChangesMade[EventPlayer()] = true;
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[6], PlayerGroupSingle(EventPlayer()), false);
        SoundPlay(SoundLink("Ghost_WeaponsFree", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        if (((gv_interfaceAddOnsCurrent[EventPlayer()] == 11) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 12))) {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), false);
        }
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[1], "Assets\\Textures\\btn-upgrade-terran-shipweaponslevel3.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[2], "Assets\\Textures\\btn-upgrade-terran-durablematerials.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[1], StringExternal("Param/Value/732574B2"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[2], StringExternal("Param/Value/E7D21D3B"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsMain, "btn-ability-terran-haleoflead-color.dds", PlayerGroupSingle(EventPlayer()));
        if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 11)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/DCEC02BF");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 12)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/355E5240");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] != 11) && (gv_interfaceAddOnsCurrent[EventPlayer()] != 12)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), true);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = false;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/87CD0944");
        }
    }
    else if ((gv_interfaceWeaponsButtons[7] == EventDialogControl())) {
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[gv_interfaceWeaponsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_interfaceWeaponsCurrent[EventPlayer()] = 7;
        gv_weaponsChangesMade[EventPlayer()] = true;
        DialogControlSetEnabled(gv_interfaceWeaponsButtons[7], PlayerGroupSingle(EventPlayer()), false);
        SoundPlay(SoundLink("Ghost_WeaponsFree", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[1], "Assets\\Textures\\btn-upgrade-terran-medivacemergencythrusters.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemImage(gv_interfaceAddOnsIcons[2], "Assets\\Textures\\btn-upgrade-terran-infernalpreigniter.dds", PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[1], StringExternal("Param/Value/6E05F63D"), PlayerGroupSingle(EventPlayer()));
        libNtve_gf_SetDialogItemTooltip(gv_interfaceAddOnsButtons[2], StringExternal("Param/Value/3B096D7D"), PlayerGroupSingle(EventPlayer()));
        DialogControlSetVisible(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_interfaceAddOnsIcons[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_interfaceAddOnsIcons[2], PlayerGroupSingle(EventPlayer()), false);
        libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsMain, "Assets\\Textures\\btn-ability-terran-redlinereactor.dds", PlayerGroupSingle(EventPlayer()));
        if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 13)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/ACC8237A");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] == 14)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), false);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/3F25960E");
        }
        else if ((gv_interfaceAddOnsCurrent[EventPlayer()] != 13) && (gv_interfaceAddOnsCurrent[EventPlayer()] != 14)) {
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), true);
            gv_interfaceWeaponsSavedAddon[EventPlayer()] = false;
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/6974AD89");
        }
    }
    libNtve_gf_SetDialogItemText(gv_interfaceBottomText, gv_interfaceWeaponsSavedText[EventPlayer()], PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponsChange_Init () {
    gt_WeaponsChange = TriggerCreate("gt_WeaponsChange_Func");
    TriggerAddEventDialogControl(gt_WeaponsChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapons - Activate
//--------------------------------------------------------------------------------------------------
bool gt_WeaponsActivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_menuWeapons == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_weaponsShowing[EventPlayer()] == true)) {
        if ((gv_interfaceDialogCurrent[EventPlayer()] == 2)) {
            if ((gv_weaponsChangesMade[EventPlayer()] == true) && (gv_gameStarted == true)) {
                gf_CharacterCheck(EventPlayer());
                gf_ItemsCheck(EventPlayer());
            }
            else {
            }
            gv_weaponsChangesMade[EventPlayer()] = false;
            gv_weaponsShowing[EventPlayer()] = false;
            DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_menuTabDialogs[gv_interfaceDialogCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gf_InterfaceWeaponry(EventPlayer());
            DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_weaponsShowing[EventPlayer()] = true;
        DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), true);
        gf_InterfaceWeaponry(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponsActivate_Init () {
    gt_WeaponsActivate = TriggerCreate("gt_WeaponsActivate_Func");
    TriggerAddEventDialogControl(gt_WeaponsActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapons - Activate (F1)
//--------------------------------------------------------------------------------------------------
bool gt_WeaponsActivateF1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_mapVoted == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_weaponsShowing[EventPlayer()] == true)) {
        if ((gv_interfaceDialogCurrent[EventPlayer()] == 2)) {
            if ((gv_weaponsChangesMade[EventPlayer()] == true) && (gv_gameStarted == true)) {
                gf_CharacterCheck(EventPlayer());
                gf_ItemsCheck(EventPlayer());
            }
            else {
            }
            gv_weaponsChangesMade[EventPlayer()] = false;
            gv_weaponsShowing[EventPlayer()] = false;
            DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_menuTabDialogs[gv_interfaceDialogCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gf_InterfaceWeaponry(EventPlayer());
            DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_weaponsShowing[EventPlayer()] = true;
        DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), true);
        gf_InterfaceWeaponry(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponsActivateF1_Init () {
    gt_WeaponsActivateF1 = TriggerCreate("gt_WeaponsActivateF1_Func");
    TriggerAddEventKeyPressed(gt_WeaponsActivateF1, c_playerAny, c_keyF1, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Ons - Change
//--------------------------------------------------------------------------------------------------
bool gt_AddOnsChange_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_interfaceAddOnsButtons[1] == EventDialogControl()) || (gv_interfaceAddOnsButtons[2] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_interfaceAddOnsButtons[1] == EventDialogControl())) {
        DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), false);
        gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
        gv_weaponsChangesMade[EventPlayer()] = true;
        SoundPlay(SoundLink("Ghost_Land", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), true);
        if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 1)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 1;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-ability-terran-snipe-color.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/C9FB699E");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 2)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 3;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-techupgrade-terran-minesplatter.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/96AA3326");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 3)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 5;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-upgrade-terran-corvidreactor.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/4BFE98BB");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 4)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 7;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-ability-kerrigan-vespeneefficiency.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/284560ED");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 5)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 9;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-tips-walloffire.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/D9BF34F0");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 6)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 11;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-upgrade-terran-shipweaponslevel3.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/50B05A80");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 7)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 13;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-upgrade-terran-medivacemergencythrusters.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/F171C8E2");
        }
        libNtve_gf_SetDialogItemText(gv_interfaceBottomText, gv_interfaceWeaponsSavedText[EventPlayer()], PlayerGroupSingle(EventPlayer()));
    }
    else if ((gv_interfaceAddOnsButtons[2] == EventDialogControl())) {
        DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), false);
        gv_interfaceWeaponsSavedAddon[EventPlayer()] = true;
        gv_weaponsChangesMade[EventPlayer()] = true;
        gv_interfaceAddOnsCurrent[EventPlayer()] = 2;
        SoundPlay(SoundLink("Ghost_Land", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), true);
        if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 1)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 2;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-techupgrade-terran-fullborecanisterammo.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/0B243F0A");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 2)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 4;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-ability-protoss-psytrousoxideon.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/2E2B6B27");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 3)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 6;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-upgrade-terran-behemothreactor.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/CC8FE17D");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 4)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 8;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-ability-zerg-banelingspooge.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/C9050E97");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 5)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 10;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-ability-terran-haywiremissile.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/80C543CB");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 6)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 12;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-upgrade-terran-durablematerials.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/19A82F19");
        }
        else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 7)) {
            gv_interfaceAddOnsCurrent[EventPlayer()] = 14;
            libNtve_gf_SetDialogItemImage(gv_interfaceWeaponsAddonImage, "Assets\\Textures\\btn-upgrade-terran-infernalpreigniter.dds", PlayerGroupSingle(EventPlayer()));
            gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/04402FD1");
        }
        libNtve_gf_SetDialogItemText(gv_interfaceBottomText, gv_interfaceWeaponsSavedText[EventPlayer()], PlayerGroupSingle(EventPlayer()));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddOnsChange_Init () {
    gt_AddOnsChange = TriggerCreate("gt_AddOnsChange_Func");
    TriggerAddEventDialogControl(gt_AddOnsChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Ons - Unequip
//--------------------------------------------------------------------------------------------------
bool gt_AddOnsUnequip_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_interfaceWeaponsAddonButton == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_interfaceAddOnsCurrent[EventPlayer()] = 0;
    SoundPlay(SoundLink("Ghost_AttackImpact", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    gv_weaponsChangesMade[EventPlayer()] = true;
    DialogControlSetVisible(gv_interfaceWeaponsAddonImage, PlayerGroupSingle(EventPlayer()), false);
    DialogControlSetVisible(gv_interfaceWeaponsAddonButton, PlayerGroupSingle(EventPlayer()), false);
    gv_interfaceWeaponsSavedAddon[EventPlayer()] = false;
    if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 1)) {
        gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/834F8C43");
    }
    else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 2)) {
        gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/11B94957");
    }
    else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 3)) {
        gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/5E5EA533");
    }
    else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 4)) {
        gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/9246210C");
    }
    else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 5)) {
        gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/EEB1B49E");
    }
    else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 6)) {
        gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/6C6CCCE3");
    }
    else if ((gv_interfaceWeaponsCurrent[EventPlayer()] == 7)) {
        gv_interfaceWeaponsSavedText[EventPlayer()] = StringExternal("Param/Value/BAA8B742");
    }
    if (((gv_interfaceAddOnsCurrent[EventPlayer()] == 1) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 3) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 5) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 7) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 9) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 11) || (gv_interfaceAddOnsCurrent[EventPlayer()] == 13))) {
        DialogControlSetEnabled(gv_interfaceAddOnsButtons[1], PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogControlSetEnabled(gv_interfaceAddOnsButtons[2], PlayerGroupSingle(EventPlayer()), true);
    }
    libNtve_gf_SetDialogItemText(gv_interfaceBottomText, gv_interfaceWeaponsSavedText[EventPlayer()], PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddOnsUnequip_Init () {
    gt_AddOnsUnequip = TriggerCreate("gt_AddOnsUnequip_Func");
    TriggerAddEventDialogControl(gt_AddOnsUnequip, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Interface - Cancel
//--------------------------------------------------------------------------------------------------
bool gt_InterfaceCancel_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_cancel == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_weaponsChangesMade[EventPlayer()] == true) && (gv_gameStarted == true)) {
        gf_CharacterCheck(EventPlayer());
    }
    else {
    }
    gv_weaponsChangesMade[EventPlayer()] = false;
    gv_weaponsShowing[EventPlayer()] = false;
    DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_menuTabDialogs[gv_interfaceDialogCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InterfaceCancel_Init () {
    gt_InterfaceCancel = TriggerCreate("gt_InterfaceCancel_Func");
    TriggerAddEventDialogControl(gt_InterfaceCancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Interface - Cancel (Escape)
//--------------------------------------------------------------------------------------------------
bool gt_InterfaceCancelEscape_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_mapVoted == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_weaponsChangesMade[EventPlayer()] == true) && (gv_gameStarted == true)) {
        gf_CharacterCheck(EventPlayer());
    }
    else {
    }
    gv_weaponsChangesMade[EventPlayer()] = false;
    gv_weaponsShowing[EventPlayer()] = false;
    DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), false);
    DialogSetVisible(gv_menuTabDialogs[gv_interfaceDialogCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InterfaceCancelEscape_Init () {
    gt_InterfaceCancelEscape = TriggerCreate("gt_InterfaceCancelEscape_Func");
    TriggerAddEventKeyPressed(gt_InterfaceCancelEscape, c_playerAny, c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents - Change
//--------------------------------------------------------------------------------------------------
bool gt_TalentsChange_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_talentsButtons[1] == EventDialogControl()) || (gv_talentsButtons[2] == EventDialogControl()) || (gv_talentsButtons[3] == EventDialogControl()) || (gv_talentsButtons[4] == EventDialogControl()) || (gv_talentsButtons[7] == EventDialogControl()) || (gv_talentsButtons[8] == EventDialogControl()) || (gv_talentsButtons[9] == EventDialogControl()) || (gv_talentsButtons[10] == EventDialogControl()) || (gv_talentsButtons[11] == EventDialogControl()) || (gv_talentsButtons[12] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Ghost_HoldFire", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    gv_weaponsChangesMade[EventPlayer()] = true;
    if ((gv_talentsButtons[1] == EventDialogControl())) {
        DialogControlSetEnabled(gv_talentsButtons[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_talentsCurrent[EventPlayer()] = 1;
        DialogControlSetEnabled(gv_talentsButtons[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        gv_talentsSavedText[EventPlayer()] = StringExternal("Param/Value/B50093C6");
    }
    else if ((gv_talentsButtons[2] == EventDialogControl())) {
        DialogControlSetEnabled(gv_talentsButtons[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_talentsCurrent[EventPlayer()] = 2;
        DialogControlSetEnabled(gv_talentsButtons[2], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        gv_talentsSavedText[EventPlayer()] = StringExternal("Param/Value/42859871");
    }
    else if ((gv_talentsButtons[3] == EventDialogControl())) {
        DialogControlSetEnabled(gv_talentsButtons[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_talentsCurrent[EventPlayer()] = 3;
        DialogControlSetEnabled(gv_talentsButtons[3], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        gv_talentsSavedText[EventPlayer()] = StringExternal("Param/Value/70738EA9");
    }
    else if ((gv_talentsButtons[4] == EventDialogControl())) {
        DialogControlSetEnabled(gv_talentsButtons[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_talentsCurrent[EventPlayer()] = 4;
        DialogControlSetEnabled(gv_talentsButtons[4], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        gv_talentsSavedText[EventPlayer()] = StringExternal("Param/Value/39D038B0");
    }
    else if ((gv_talentsButtons[5] == EventDialogControl())) {
        DialogControlSetEnabled(gv_talentsButtons[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_talentsCurrent[EventPlayer()] = 5;
        DialogControlSetEnabled(gv_talentsButtons[5], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        gv_talentsSavedText[EventPlayer()] = StringExternal("Param/Value/0616E48C");
    }
    else if ((gv_talentsButtons[6] == EventDialogControl())) {
        DialogControlSetEnabled(gv_talentsButtons[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_talentsCurrent[EventPlayer()] = 6;
        DialogControlSetEnabled(gv_talentsButtons[6], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        gv_talentsSavedText[EventPlayer()] = StringExternal("Param/Value/7C717DB3");
    }
    else if ((gv_talentsButtons[7] == EventDialogControl())) {
        DialogControlSetEnabled(gv_talentsButtons[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_talentsCurrent[EventPlayer()] = 7;
        DialogControlSetEnabled(gv_talentsButtons[7], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        gv_talentsSavedText[EventPlayer()] = StringExternal("Param/Value/02632A6B");
    }
    else if ((gv_talentsButtons[8] == EventDialogControl())) {
        DialogControlSetEnabled(gv_talentsButtons[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_talentsCurrent[EventPlayer()] = 8;
        DialogControlSetEnabled(gv_talentsButtons[8], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        gv_talentsSavedText[EventPlayer()] = StringExternal("Param/Value/72F32A24");
    }
    else if ((gv_talentsButtons[9] == EventDialogControl())) {
        DialogControlSetEnabled(gv_talentsButtons[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_talentsCurrent[EventPlayer()] = 9;
        DialogControlSetEnabled(gv_talentsButtons[9], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        gv_talentsSavedText[EventPlayer()] = StringExternal("Param/Value/6561DDCD");
    }
    else if ((gv_talentsButtons[10] == EventDialogControl())) {
        DialogControlSetEnabled(gv_talentsButtons[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_talentsCurrent[EventPlayer()] = 10;
        DialogControlSetEnabled(gv_talentsButtons[10], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_talentsImages[gv_talentsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        gv_talentsSavedText[EventPlayer()] = StringExternal("Param/Value/87430AD3");
    }
    libNtve_gf_SetDialogItemText(gv_interfaceBottomText, gv_talentsSavedText[EventPlayer()], PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentsChange_Init () {
    gt_TalentsChange = TriggerCreate("gt_TalentsChange_Func");
    TriggerAddEventDialogControl(gt_TalentsChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shop - Activate
//--------------------------------------------------------------------------------------------------
bool gt_ShopActivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_menuTalents == EventDialogControl()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_interfaceShopShowing[EventPlayer()] == true)) {
        if ((gv_interfaceDialogCurrent[EventPlayer()] == 5)) {
            if ((gv_weaponsChangesMade[EventPlayer()] == true) && (gv_gameStarted == true)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/646E25E5"));
            }
            else {
            }
            gv_weaponsChangesMade[EventPlayer()] = false;
            gv_weaponsShowing[EventPlayer()] = false;
            gv_interfaceShopShowing[EventPlayer()] = false;
            DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_menuTabDialogs[gv_interfaceDialogCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gf_InterfaceMerchant(EventPlayer());
            gv_interfaceShopShowing[EventPlayer()] = true;
            DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), true);
        }
    }
    else {
        gv_interfaceShopShowing[EventPlayer()] = true;
        DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), true);
        gf_InterfaceMerchant(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShopActivate_Init () {
    gt_ShopActivate = TriggerCreate("gt_ShopActivate_Func");
    TriggerAddEventDialogControl(gt_ShopActivate, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shop - Activate (F2)
//--------------------------------------------------------------------------------------------------
bool gt_ShopActivateF2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_mapVoted == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_interfaceShopShowing[EventPlayer()] == true)) {
        if ((gv_interfaceDialogCurrent[EventPlayer()] == 5)) {
            if ((gv_weaponsChangesMade[EventPlayer()] == true) && (gv_gameStarted == true)) {
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C0500808"));
            }
            else {
            }
            gv_weaponsChangesMade[EventPlayer()] = false;
            gv_weaponsShowing[EventPlayer()] = false;
            gv_interfaceShopShowing[EventPlayer()] = false;
            DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_menuTabDialogs[gv_interfaceDialogCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gf_InterfaceMerchant(EventPlayer());
            DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), true);
            gv_interfaceShopShowing[EventPlayer()] = true;
        }
    }
    else {
        gv_interfaceShopShowing[EventPlayer()] = true;
        DialogSetVisible(gv_interfaceDialog, PlayerGroupSingle(EventPlayer()), true);
        gf_InterfaceMerchant(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShopActivateF2_Init () {
    gt_ShopActivateF2 = TriggerCreate("gt_ShopActivateF2_Func");
    TriggerAddEventKeyPressed(gt_ShopActivateF2, c_playerAny, c_keyF2, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Skins - Change
//--------------------------------------------------------------------------------------------------
bool gt_SkinsChange_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_skinsButtons[1] == EventDialogControl()) || (gv_skinsButtons[2] == EventDialogControl()) || (gv_skinsButtons[3] == EventDialogControl()) || (gv_skinsButtons[4] == EventDialogControl()) || (gv_skinsButtons[5] == EventDialogControl()) || (gv_skinsButtons[6] == EventDialogControl()) || (gv_skinsButtons[7] == EventDialogControl()) || (gv_skinsButtons[8] == EventDialogControl()) || (gv_skinsButtons[9] == EventDialogControl()) || (gv_skinsButtons[10] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Ghost_HoldFire", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    gv_weaponsChangesMade[EventPlayer()] = true;
    if ((gv_skinsButtons[1] == EventDialogControl())) {
        DialogControlSetEnabled(gv_skinsButtons[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_skinsCurrent[EventPlayer()] = 1;
        DialogControlSetEnabled(gv_skinsButtons[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_skinsButtons[2] == EventDialogControl())) {
        DialogControlSetEnabled(gv_skinsButtons[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_skinsCurrent[EventPlayer()] = 2;
        DialogControlSetEnabled(gv_skinsButtons[2], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_skinsButtons[3] == EventDialogControl())) {
        DialogControlSetEnabled(gv_skinsButtons[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_skinsCurrent[EventPlayer()] = 3;
        DialogControlSetEnabled(gv_skinsButtons[3], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_skinsButtons[4] == EventDialogControl())) {
        DialogControlSetEnabled(gv_skinsButtons[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_skinsCurrent[EventPlayer()] = 4;
        DialogControlSetEnabled(gv_skinsButtons[4], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_skinsButtons[5] == EventDialogControl())) {
        DialogControlSetEnabled(gv_skinsButtons[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_skinsCurrent[EventPlayer()] = 5;
        DialogControlSetEnabled(gv_skinsButtons[5], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_skinsButtons[6] == EventDialogControl())) {
        DialogControlSetEnabled(gv_skinsButtons[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_skinsCurrent[EventPlayer()] = 6;
        DialogControlSetEnabled(gv_skinsButtons[6], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_skinsButtons[7] == EventDialogControl())) {
        DialogControlSetEnabled(gv_skinsButtons[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_skinsCurrent[EventPlayer()] = 7;
        DialogControlSetEnabled(gv_skinsButtons[7], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_skinsButtons[8] == EventDialogControl())) {
        DialogControlSetEnabled(gv_skinsButtons[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_skinsCurrent[EventPlayer()] = 8;
        DialogControlSetEnabled(gv_skinsButtons[8], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_skinsButtons[9] == EventDialogControl())) {
        DialogControlSetEnabled(gv_skinsButtons[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_skinsCurrent[EventPlayer()] = 9;
        DialogControlSetEnabled(gv_skinsButtons[9], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_skinsButtons[10] == EventDialogControl())) {
        DialogControlSetEnabled(gv_skinsButtons[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
        gv_skinsCurrent[EventPlayer()] = 10;
        DialogControlSetEnabled(gv_skinsButtons[10], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_skinsImages[gv_skinsCurrent[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SkinsChange_Init () {
    gt_SkinsChange = TriggerCreate("gt_SkinsChange_Func");
    TriggerAddEventDialogControl(gt_SkinsChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Streaks - Change
//--------------------------------------------------------------------------------------------------
bool gt_StreaksChange_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_streaksButtons[0][0] == EventDialogControl()) || (gv_streaksButtons[0][1] == EventDialogControl()) || (gv_streaksButtons[0][2] == EventDialogControl()) || (gv_streaksButtons[1][0] == EventDialogControl()) || (gv_streaksButtons[1][1] == EventDialogControl()) || (gv_streaksButtons[1][2] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Ghost_HoldFire", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    gv_weaponsChangesMade[EventPlayer()] = true;
    if ((gv_streaksButtons[0][0] == EventDialogControl())) {
        DialogControlSetEnabled(gv_streaksButtons[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_streaksImages[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), true);
        gv_streaksCurrent[EventPlayer()][0] = 0;
        DialogControlSetEnabled(gv_streaksButtons[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_streaksImages[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_streaksButtons[0][1] == EventDialogControl())) {
        DialogControlSetEnabled(gv_streaksButtons[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_streaksImages[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), true);
        gv_streaksCurrent[EventPlayer()][0] = 1;
        DialogControlSetEnabled(gv_streaksButtons[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_streaksImages[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_streaksButtons[0][2] == EventDialogControl())) {
        DialogControlSetEnabled(gv_streaksButtons[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_streaksImages[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), true);
        gv_streaksCurrent[EventPlayer()][0] = 2;
        DialogControlSetEnabled(gv_streaksButtons[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_streaksImages[0][gv_streaksCurrent[EventPlayer()][0]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_streaksButtons[1][0] == EventDialogControl())) {
        DialogControlSetEnabled(gv_streaksButtons[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_streaksImages[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), true);
        gv_streaksCurrent[EventPlayer()][1] = 0;
        DialogControlSetEnabled(gv_streaksButtons[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_streaksImages[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_streaksButtons[1][1] == EventDialogControl())) {
        DialogControlSetEnabled(gv_streaksButtons[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_streaksImages[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), true);
        gv_streaksCurrent[EventPlayer()][1] = 1;
        DialogControlSetEnabled(gv_streaksButtons[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_streaksImages[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), false);
    }
    else if ((gv_streaksButtons[1][2] == EventDialogControl())) {
        DialogControlSetEnabled(gv_streaksButtons[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetEnabled(gv_streaksImages[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), true);
        gv_streaksCurrent[EventPlayer()][1] = 2;
        DialogControlSetEnabled(gv_streaksButtons[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetEnabled(gv_streaksImages[1][gv_streaksCurrent[EventPlayer()][1]], PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StreaksChange_Init () {
    gt_StreaksChange = TriggerCreate("gt_StreaksChange_Func");
    TriggerAddEventDialogControl(gt_StreaksChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tab
//--------------------------------------------------------------------------------------------------
bool gt_Tab_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_statsDialog, PlayerGroupSingle(EventPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Tab_Init () {
    gt_Tab = TriggerCreate("gt_Tab_Func");
    TriggerAddEventKeyPressed(gt_Tab, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untab
//--------------------------------------------------------------------------------------------------
bool gt_Untab_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_statsDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Untab_Init () {
    gt_Untab = TriggerCreate("gt_Untab_Func");
    TriggerAddEventKeyPressed(gt_Untab, c_playerAny, c_keyTab, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Steal Flag - Team 1
//--------------------------------------------------------------------------------------------------
bool gt_StealFlagTeam1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }

        if (!((gv_teamFlagActive[1] == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerScore[EventPlayer()] += 50;
    libNtve_gf_SetDialogItemText(gv_statsScore[EventPlayer()], IntToText(gv_playerScore[EventPlayer()]), PlayerGroupAll());
    if ((UnitHasBehavior(EventUnit(), "FlagRunner") == true)) {
        UnitBehaviorAdd(EventUnit(), "FlagSpeedBonus", EventUnit(), 1);
    }
    else {
    }
    DialogControlSetVisible(gv_scoreFlagCaptured[1], PlayerGroupAll(), true);
    gv_teamFlagActive[1] = true;
    gv_teamFlagCarrier[1] = EventUnit();
    libNtve_gf_ShowHideUnit(gv_teamFlags[2], false);
    UnitBehaviorAdd(EventUnit(), "CarryingFlag", EventUnit(), 1);
    if ((gv_teamFlagPicked[1] == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/81CA17F6")));
        gv_teamFlagPicked[1] = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/B1DBDF72")));
    }
    libNtve_gf_AttachModelToUnit(EventUnit(), "PickupChronoRiftCharge", "Ref_Overhead");
    gv_teamFlagModels[1] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 18.04, 90.20), 1.0, 0.0));
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00011", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    SoundPlay(SoundLink("Alert_BaseUnderAttackKlaxon", -1), GameAttributePlayersForTeam(2), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StealFlagTeam1_Init () {
    gt_StealFlagTeam1 = TriggerCreate("gt_StealFlagTeam1_Func");
    TriggerAddEventUnitRegion(gt_StealFlagTeam1, null, RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_StealFlagTeam1, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_StealFlagTeam1, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Steal Flag - Team 2
//--------------------------------------------------------------------------------------------------
bool gt_StealFlagTeam2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }

        if (!((gv_teamFlagActive[2] == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerScore[EventPlayer()] += 50;
    libNtve_gf_SetDialogItemText(gv_statsScore[EventPlayer()], IntToText(gv_playerScore[EventPlayer()]), PlayerGroupAll());
    if ((UnitHasBehavior(EventUnit(), "FlagRunner") == true)) {
        UnitBehaviorAdd(EventUnit(), "FlagSpeedBonus", EventUnit(), 1);
    }
    else {
    }
    DialogControlSetVisible(gv_scoreFlagCaptured[2], PlayerGroupAll(), true);
    gv_teamFlagActive[2] = true;
    gv_teamFlagCarrier[2] = EventUnit();
    libNtve_gf_ShowHideUnit(gv_teamFlags[1], false);
    UnitBehaviorAdd(EventUnit(), "CarryingFlag", EventUnit(), 1);
    if ((gv_teamFlagPicked[2] == false)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/6AA25A0F")));
        gv_teamFlagPicked[2] = true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/AEFB17A7")));
    }
    libNtve_gf_AttachModelToUnit(EventUnit(), "PickupChronoRiftCharge", "Ref_Overhead");
    gv_teamFlagModels[2] = libNtve_gf_ActorLastCreated();
    ActorSend(libNtve_gf_ActorLastCreated(), libNtve_gf_SetTintColor(Color(56.86, 0.00, 0.00), 1.0, 0.0));
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00011", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    SoundPlay(SoundLink("Alert_BaseUnderAttackKlaxon", -1), GameAttributePlayersForTeam(1), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StealFlagTeam2_Init () {
    gt_StealFlagTeam2 = TriggerCreate("gt_StealFlagTeam2_Func");
    TriggerAddEventUnitRegion(gt_StealFlagTeam2, null, RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_StealFlagTeam2, null, RegionFromId(8), true);
    TriggerAddEventUnitRegion(gt_StealFlagTeam2, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score - Team 1
//--------------------------------------------------------------------------------------------------
bool gt_ScoreTeam1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }

        if (!((gv_teamFlagCarrier[1] == EventUnit()))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_scoreFlagCaptured[1], PlayerGroupAll(), false);
    gv_teamScore[1] += 1;
    libNtve_gf_SetDialogItemText(gv_scoreFlagPoints[1], (StringExternal("Param/Value/AD1A1AAE") + IntToText(gv_teamScore[1])), PlayerGroupAll());
    gv_playerScore[EventPlayer()] += 150;
    libNtve_gf_SetDialogItemText(gv_statsScore[EventPlayer()], IntToText(gv_playerScore[EventPlayer()]), PlayerGroupAll());
    gv_playerFlags[EventPlayer()] += 1;
    libNtve_gf_SetDialogItemText(gv_statsFlags[EventPlayer()], IntToText(gv_playerFlags[EventPlayer()]), PlayerGroupAll());
    gv_teamFlagPicked[1] = false;
    gv_teamFlagActive[1] = false;
    gv_teamFlagCarrier[1] = null;
    UnitBehaviorRemove(EventUnit(), "CarryingFlag", 1);
    libNtve_gf_KillModel(gv_teamFlagModels[1]);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/B7F8FF3A")));
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00073", -1), GameAttributePlayersForTeam(2), 100.0, 0.0);
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00072", -1), GameAttributePlayersForTeam(1), 100.0, 0.0);
    if ((gv_map == 0)) {
        RegionSetCenter(RegionFromId(3), PointFromId(1));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(3)), 270.0);
    }
    else if ((gv_map == 1)) {
        RegionSetCenter(RegionFromId(9), PointFromId(879));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(9)), 270.0);
    }
    else if ((gv_map == 2)) {
        RegionSetCenter(RegionFromId(26), PointFromId(2189));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(26)), 270.0);
    }
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 18.04, 90.20), 1.0, 0.0));
    gv_teamFlags[2] = UnitLastCreated();
    libNtve_gf_SetDialogItemText(gv_scoreFlagPoints[1], IntToText(gv_teamScore[1]), PlayerGroupAll());
    if ((((gv_scoreGameSeconds <= 0) && (gv_scoreGameMinutes <= 0)) || ((gv_teamScore[1] >= 5) && (gv_teamScore[1] >= (gv_teamScore[2] - 2))))) {
        gf_GameEnd(1, 2);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreTeam1_Init () {
    gt_ScoreTeam1 = TriggerCreate("gt_ScoreTeam1_Func");
    TriggerAddEventUnitRangePoint(gt_ScoreTeam1, null, PointFromId(2), 2.0, true);
    TriggerAddEventUnitRangePoint(gt_ScoreTeam1, null, PointFromId(856), 2.0, true);
    TriggerAddEventUnitRangePoint(gt_ScoreTeam1, null, PointFromId(2188), 2.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score - Team 2
//--------------------------------------------------------------------------------------------------
bool gt_ScoreTeam2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }

        if (!((gv_teamFlagCarrier[2] == EventUnit()))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(gv_scoreFlagCaptured[2], PlayerGroupAll(), false);
    gv_teamScore[2] += 1;
    libNtve_gf_SetDialogItemText(gv_scoreFlagPoints[2], (StringExternal("Param/Value/8C6D6267") + IntToText(gv_teamScore[2])), PlayerGroupAll());
    gv_playerScore[EventPlayer()] += 150;
    libNtve_gf_SetDialogItemText(gv_statsScore[EventPlayer()], IntToText(gv_playerScore[EventPlayer()]), PlayerGroupAll());
    gv_playerFlags[EventPlayer()] += 1;
    libNtve_gf_SetDialogItemText(gv_statsFlags[EventPlayer()], IntToText(gv_playerFlags[EventPlayer()]), PlayerGroupAll());
    gv_teamFlagPicked[2] = false;
    gv_teamFlagActive[2] = false;
    gv_teamFlagCarrier[2] = null;
    UnitBehaviorRemove(EventUnit(), "CarryingFlag", 1);
    libNtve_gf_KillModel(gv_teamFlagModels[2]);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/3E8885E1")));
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00073", -1), GameAttributePlayersForTeam(1), 100.0, 0.0);
    SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00072", -1), GameAttributePlayersForTeam(2), 100.0, 0.0);
    if ((gv_map == 0)) {
        RegionSetCenter(RegionFromId(4), PointFromId(2));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(4)), 270.0);
    }
    else if ((gv_map == 1)) {
        RegionSetCenter(RegionFromId(8), PointFromId(856));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(8)), 270.0);
    }
    else if ((gv_map == 2)) {
        RegionSetCenter(RegionFromId(25), PointFromId(2188));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(25)), 270.0);
    }
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(56.86, 0.00, 0.00), 1.0, 0.0));
    gv_teamFlags[1] = UnitLastCreated();
    libNtve_gf_SetDialogItemText(gv_scoreFlagPoints[2], IntToText(gv_teamScore[2]), PlayerGroupAll());
    if ((((gv_scoreGameSeconds <= 0) && (gv_scoreGameMinutes <= 0)) || ((gv_teamScore[2] >= 5) && (gv_teamScore[2] >= (gv_teamScore[1] - 2))))) {
        gf_GameEnd(2, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreTeam2_Init () {
    gt_ScoreTeam2 = TriggerCreate("gt_ScoreTeam2_Func");
    TriggerAddEventUnitRangePoint(gt_ScoreTeam2, null, PointFromId(1), 2.0, true);
    TriggerAddEventUnitRangePoint(gt_ScoreTeam2, null, PointFromId(879), 2.0, true);
    TriggerAddEventUnitRangePoint(gt_ScoreTeam2, null, PointFromId(2189), 2.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return Flag - Team 1
//--------------------------------------------------------------------------------------------------
bool gt_ReturnFlagTeam1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true))) {
            return false;
        }

        if (!((gv_teamFlagPicked[2] == true))) {
            return false;
        }

        if (!((gv_teamFlagCarrier[2] == null))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerScore[EventPlayer()] += 50;
    libNtve_gf_SetDialogItemText(gv_statsScore[EventPlayer()], IntToText(gv_playerScore[EventPlayer()]), PlayerGroupAll());
    DialogControlSetVisible(gv_scoreFlagCaptured[2], PlayerGroupAll(), false);
    libNtve_gf_ShowHideUnit(gv_teamFlags[1], false);
    gv_teamFlagPicked[2] = false;
    gv_teamFlagActive[2] = false;
    libNtve_gf_KillModel(gv_teamFlagModels[1]);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/9E700D05")));
    if ((gv_map == 0)) {
        RegionSetCenter(RegionFromId(4), PointFromId(2));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(4)), 270.0);
    }
    else if ((gv_map == 1)) {
        RegionSetCenter(RegionFromId(8), PointFromId(856));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(8)), 270.0);
    }
    else if ((gv_map == 2)) {
        RegionSetCenter(RegionFromId(25), PointFromId(2188));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(25)), 270.0);
    }
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(56.86, 0.00, 0.00), 1.0, 0.0));
    gv_teamFlags[1] = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnFlagTeam1_Init () {
    gt_ReturnFlagTeam1 = TriggerCreate("gt_ReturnFlagTeam1_Func");
    TriggerAddEventUnitRegion(gt_ReturnFlagTeam1, null, RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_ReturnFlagTeam1, null, RegionFromId(8), true);
    TriggerAddEventUnitRegion(gt_ReturnFlagTeam1, null, RegionFromId(25), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return Flag - Team 2
//--------------------------------------------------------------------------------------------------
bool gt_ReturnFlagTeam2_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(GameAttributePlayersForTeam(2), EventPlayer()) == true))) {
            return false;
        }

        if (!((gv_teamFlagPicked[1] == true))) {
            return false;
        }

        if (!((gv_teamFlagCarrier[1] == null))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerScore[EventPlayer()] += 50;
    libNtve_gf_SetDialogItemText(gv_statsScore[EventPlayer()], IntToText(gv_playerScore[EventPlayer()]), PlayerGroupAll());
    DialogControlSetVisible(gv_scoreFlagCaptured[1], PlayerGroupAll(), false);
    libNtve_gf_ShowHideUnit(gv_teamFlags[2], false);
    gv_teamFlagPicked[1] = false;
    gv_teamFlagActive[1] = false;
    libNtve_gf_KillModel(gv_teamFlagModels[2]);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (PlayerName(EventPlayer()) + StringExternal("Param/Value/983CB753")));
    if ((gv_map == 0)) {
        RegionSetCenter(RegionFromId(3), PointFromId(1));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(3)), 270.0);
    }
    else if ((gv_map == 1)) {
        RegionSetCenter(RegionFromId(9), PointFromId(879));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(9)), 270.0);
    }
    else if ((gv_map == 2)) {
        RegionSetCenter(RegionFromId(26), PointFromId(2189));
        UnitCreate(1, "PickupChronoRiftCharge", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(26)), 270.0);
    }
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), libNtve_gf_SetTintColor(Color(0.00, 18.04, 90.20), 1.0, 0.0));
    gv_teamFlags[2] = UnitLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnFlagTeam2_Init () {
    gt_ReturnFlagTeam2 = TriggerCreate("gt_ReturnFlagTeam2_Func");
    TriggerAddEventUnitRegion(gt_ReturnFlagTeam2, null, RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_ReturnFlagTeam2, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_ReturnFlagTeam2, null, RegionFromId(26), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Overhead Flags
//--------------------------------------------------------------------------------------------------
bool gt_InitOverheadFlags_Func (bool testConds, bool runActions) {
    // Variable Declarations
    color lv_color;
    int lv_i;
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_color = Color(100.00, 0.00, 0.00);
    lv_i = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(400, 200, c_anchorCenter, 0, 0, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3, 50, c_anchorTopLeft, 0, 3, StringExternal("Param/Value/8CA0E68A"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 3, 50, c_anchorTopLeft, 53, 3, StringExternal("Param/Value/4137A6C2"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 56, 3, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/778E30B8"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 56, 3, c_anchorTopLeft, 0, 53, StringExternal("Param/Value/2B421AF2"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
    while ((lv_i <= 28)) {
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_i*2, 1, c_anchorTopLeft, 28-lv_i, 60 + 28 - lv_i, StringExternal("Param/Value/270BF555"), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, true, lv_color, c_triggerBlendModeNormal);
        lv_i += 1;
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, 50, c_anchorTopLeft, 3, 3, StringExternal("Param/Value/8714BF37"), "Assets\\Textures\\btn-ability-zerg-advancedmutation.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitOverheadFlags_Init () {
    gt_InitOverheadFlags = TriggerCreate("gt_InitOverheadFlags_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timed Death 3
//--------------------------------------------------------------------------------------------------
bool gt_TimedDeath3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    RemoveObject(FixedToInt(UnitGetCustomValue(lv_u,0)), "kill");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimedDeath3_Init () {
    gt_TimedDeath3 = TriggerCreate("gt_TimedDeath3_Func");
    TriggerAddEventPlayerEffectUsed(gt_TimedDeath3, c_playerAny, "TimeKill");
    TriggerAddEventPlayerEffectUsed(gt_TimedDeath3, c_playerAny, "TimedLifeFate");
    TriggerAddEventPlayerEffectUsed(gt_TimedDeath3, c_playerAny, "AcidDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocket Jump
//--------------------------------------------------------------------------------------------------
bool gt_jump12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;

    // Variable Initialization
    lv_p = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_itemsRocketPack[EventPlayer()] -= 1;
    gv_playerItems[EventPlayer()][4] -= 1;
    UnitCreateEffectUnit(EventUnit(), "RocketJumpApplyFX", EventUnit());
    if ((gv_playerItems[EventPlayer()][4] <= 0)) {
        UnitBehaviorRemove(gv_playerUnits[EventPlayer()], "RocketJump", 1);
    }
    else {
    }
    RocketJumpActions(EventUnit(), lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_jump12_Init () {
    gt_jump12 = TriggerCreate("gt_jump12_Func");
    TriggerAddEventUnitAbility(gt_jump12, null, AbilityCommand("Jump2", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jump
//--------------------------------------------------------------------------------------------------
bool gt_jump8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;

    // Variable Initialization
    lv_p = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    JumpActions(EventUnit(), lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_jump8_Init () {
    gt_jump8 = TriggerCreate("gt_jump8_Func");
    TriggerAddEventUnitAbility(gt_jump8, null, AbilityCommand("Jump", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Small Explosion
//--------------------------------------------------------------------------------------------------
bool gt_SmallExplosion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_ui;
    int lv_p;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_ui = FixedToInt(UnitGetCustomValue(lv_u, 0));
    lv_p = objects[lv_ui].owner;

    // Actions
    if (!runActions) {
        return true;
    }

    CreateExplosion(UnitGetPosition(lv_u), ObjectGetHeight(FixedToInt(UnitGetCustomValue(lv_u,0))), 3.75, 0, "FragDamage", "linear",FixedToInt(UnitGetCustomValue(lv_u,0)),  54);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SmallExplosion_Init () {
    gt_SmallExplosion = TriggerCreate("gt_SmallExplosion_Func");
    TriggerAddEventPlayerEffectUsed(gt_SmallExplosion, c_playerAny, "SExpSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Explosion
//--------------------------------------------------------------------------------------------------
bool gt_FragExplosion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_ui;
    int lv_p;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_ui = FixedToInt(UnitGetCustomValue(lv_u, 0));
    lv_p = objects[lv_ui].owner;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_talentsActual[lv_p] == 8)) {
        CreateExplosion(UnitGetPosition(lv_u), ObjectGetHeight(FixedToInt(UnitGetCustomValue(lv_u,0))), 5, 4.3, "FragDamage", "linear",FixedToInt(UnitGetCustomValue(lv_u,0)),  115);
    }
    else {
        CreateExplosion(UnitGetPosition(lv_u), ObjectGetHeight(FixedToInt(UnitGetCustomValue(lv_u,0))), 5, 0, "FragDamage", "linear",FixedToInt(UnitGetCustomValue(lv_u,0)),  95);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FragExplosion_Init () {
    gt_FragExplosion = TriggerCreate("gt_FragExplosion_Func");
    TriggerAddEventPlayerEffectUsed(gt_FragExplosion, c_playerAny, "FragGrenadeSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Frag Grenade
//--------------------------------------------------------------------------------------------------
bool gt_grenade3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;

    // Variable Initialization
    lv_p = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_itemsGrenade[EventPlayer()] -= 1;
    gv_playerItems[EventPlayer()][0] -= 1;
    if ((gv_playerItems[EventPlayer()][0] <= 0)) {
        UnitBehaviorRemove(gv_playerUnits[EventPlayer()], "Grenade", 1);
    }
    else {
    }
    GrenadeActions(EventUnit(), lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_grenade3_Init () {
    gt_grenade3 = TriggerCreate("gt_grenade3_Func");
    TriggerAddEventUnitAbility(gt_grenade3, null, AbilityCommand("xFragGrenade", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Acid Gun
//--------------------------------------------------------------------------------------------------
bool gt_toxic3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    AcidGunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_toxic3_Init () {
    gt_toxic3 = TriggerCreate("gt_toxic3_Func");
    TriggerAddEventPlayerEffectUsed(gt_toxic3, c_playerAny, "AcidGunTargets");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Slime Gun
//--------------------------------------------------------------------------------------------------
bool gt_toxic4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    SlimeGunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_toxic4_Init () {
    gt_toxic4 = TriggerCreate("gt_toxic4_Func");
    TriggerAddEventPlayerEffectUsed(gt_toxic4, c_playerAny, "SlimeGunTargets");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Viper Gun
//--------------------------------------------------------------------------------------------------
bool gt_toxic5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    ViperGunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_toxic5_Init () {
    gt_toxic5 = TriggerCreate("gt_toxic5_Func");
    TriggerAddEventPlayerEffectUsed(gt_toxic5, c_playerAny, "ViperGunTargets");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Missile Launcher
//--------------------------------------------------------------------------------------------------
bool gt_desecrate5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    MissileLauncherActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_desecrate5_Init () {
    gt_desecrate5 = TriggerCreate("gt_desecrate5_Func");
    TriggerAddEventPlayerEffectUsed(gt_desecrate5, c_playerAny, "MissileLauncher");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rocket Launcher
//--------------------------------------------------------------------------------------------------
bool gt_desecrate9_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    RocketLauncherActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_desecrate9_Init () {
    gt_desecrate9 = TriggerCreate("gt_desecrate9_Func");
    TriggerAddEventPlayerEffectUsed(gt_desecrate9, c_playerAny, "RocketLauncherSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellfire Launcher
//--------------------------------------------------------------------------------------------------
bool gt_desecrate10_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    HellfireLauncherActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_desecrate10_Init () {
    gt_desecrate10 = TriggerCreate("gt_desecrate10_Func");
    TriggerAddEventPlayerEffectUsed(gt_desecrate10, c_playerAny, "HellfireLauncherSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hellfire Scatter
//--------------------------------------------------------------------------------------------------
bool gt_HellfireScatter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    CheckHellfire(lv_u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HellfireScatter_Init () {
    gt_HellfireScatter = TriggerCreate("gt_HellfireScatter_Func");
    TriggerAddEventPlayerEffectUsed(gt_HellfireScatter, c_playerAny, "HellfireScatter");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrap Explosion
//--------------------------------------------------------------------------------------------------
bool gt_ShrapExplosion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    CreateExplosion(UnitGetPosition(lv_u), ObjectGetHeight(FixedToInt(UnitGetCustomValue(lv_u,0))), 2, 0, "ShrapnelExpDamage", "linear",FixedToInt(UnitGetCustomValue(lv_u,0)),  bounce[FixedToInt(UnitGetCustomValue(lv_u,0))].damage);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShrapExplosion_Init () {
    gt_ShrapExplosion = TriggerCreate("gt_ShrapExplosion_Func");
    TriggerAddEventPlayerEffectUsed(gt_ShrapExplosion, c_playerAny, "ShrapnelDeath");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrapnel Gun
//--------------------------------------------------------------------------------------------------
bool gt_desecrate6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    ShrapnelGunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_desecrate6_Init () {
    gt_desecrate6 = TriggerCreate("gt_desecrate6_Func");
    TriggerAddEventPlayerEffectUsed(gt_desecrate6, c_playerAny, "Targets4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mortar Gun
//--------------------------------------------------------------------------------------------------
bool gt_desecrate7_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    MortarGunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_desecrate7_Init () {
    gt_desecrate7 = TriggerCreate("gt_desecrate7_Func");
    TriggerAddEventPlayerEffectUsed(gt_desecrate7, c_playerAny, "MortarGunTargets");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mortar Explosion
//--------------------------------------------------------------------------------------------------
bool gt_MortarExplosion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    CreateExplosion(UnitGetPosition(lv_u), ObjectGetHeight(FixedToInt(UnitGetCustomValue(lv_u,0))), 2.65, 2.35, "ShrapnelExpDamage", "linear",FixedToInt(UnitGetCustomValue(lv_u,0)),  bounce[FixedToInt(UnitGetCustomValue(lv_u,0))].damage);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MortarExplosion_Init () {
    gt_MortarExplosion = TriggerCreate("gt_MortarExplosion_Func");
    TriggerAddEventPlayerEffectUsed(gt_MortarExplosion, c_playerAny, "MortarImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shard Explosion
//--------------------------------------------------------------------------------------------------
bool gt_ShardExplosion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    CreateExplosion(UnitGetPosition(lv_u), ObjectGetHeight(FixedToInt(UnitGetCustomValue(lv_u,0))), 2, 0, "ShrapnelExpDamage", "linear",FixedToInt(UnitGetCustomValue(lv_u,0)),  bounce[FixedToInt(UnitGetCustomValue(lv_u,0))].damage);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShardExplosion_Init () {
    gt_ShardExplosion = TriggerCreate("gt_ShardExplosion_Func");
    TriggerAddEventPlayerEffectUsed(gt_ShardExplosion, c_playerAny, "ShardExplode");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shard Gun
//--------------------------------------------------------------------------------------------------
bool gt_desecrate8_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    ShardGunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_desecrate8_Init () {
    gt_desecrate8 = TriggerCreate("gt_desecrate8_Func");
    TriggerAddEventPlayerEffectUsed(gt_desecrate8, c_playerAny, "ShardGunTargets");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Machine Gun
//--------------------------------------------------------------------------------------------------
bool gt_railgun27_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    MachineGunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun27_Init () {
    gt_railgun27 = TriggerCreate("gt_railgun27_Func");
    TriggerAddEventPlayerEffectUsed(gt_railgun27, c_playerAny, "SuppressorChannelSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gatling Gun
//--------------------------------------------------------------------------------------------------
bool gt_railgun29_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    GatlingGunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun29_Init () {
    gt_railgun29 = TriggerCreate("gt_railgun29_Func");
    TriggerAddEventPlayerEffectUsed(gt_railgun29, c_playerAny, "GatlingGunDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReaperGun
//--------------------------------------------------------------------------------------------------
bool gt_railgun30_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    ReaperGunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun30_Init () {
    gt_railgun30 = TriggerCreate("gt_railgun30_Func");
    TriggerAddEventPlayerEffectUsed(gt_railgun30, c_playerAny, "ReaperGunDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rifle
//--------------------------------------------------------------------------------------------------
bool gt_railgun12_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    RifleActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun12_Init () {
    gt_railgun12 = TriggerCreate("gt_railgun12_Func");
    TriggerAddEventPlayerEffectUsed(gt_railgun12, c_playerAny, "Targets9");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sniper Rifle
//--------------------------------------------------------------------------------------------------
bool gt_railgun13_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    SniperRifleActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun13_Init () {
    gt_railgun13 = TriggerCreate("gt_railgun13_Func");
    TriggerAddEventPlayerEffectUsed(gt_railgun13, c_playerAny, "SniperRifleTargets");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assault Rifle
//--------------------------------------------------------------------------------------------------
bool gt_railgun14_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    AssaultRifleActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun14_Init () {
    gt_railgun14 = TriggerCreate("gt_railgun14_Func");
    TriggerAddEventPlayerEffectUsed(gt_railgun14, c_playerAny, "AssaultRifleTargets");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flame Thrower
//--------------------------------------------------------------------------------------------------
bool gt_railgun28_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    FlameThrower2Actions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun28_Init () {
    gt_railgun28 = TriggerCreate("gt_railgun28_Func");
    TriggerAddEventPlayerEffectUsed(gt_railgun28, c_playerAny, "FlamethrowerChannelSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ignitor
//--------------------------------------------------------------------------------------------------
bool gt_railgun31_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    IgnitorActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun31_Init () {
    gt_railgun31 = TriggerCreate("gt_railgun31_Func");
    TriggerAddEventPlayerEffectUsed(gt_railgun31, c_playerAny, "IgnitorChannelSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shotgun
//--------------------------------------------------------------------------------------------------
bool gt_dispersion4_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    Shotgun2Actions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_dispersion4_Init () {
    gt_dispersion4 = TriggerCreate("gt_dispersion4_Func");
    TriggerAddEventPlayerEffectUsed(gt_dispersion4, c_playerAny, "Shotgun");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scattergun
//--------------------------------------------------------------------------------------------------
bool gt_dispersion5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    ScattergunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_dispersion5_Init () {
    gt_dispersion5 = TriggerCreate("gt_dispersion5_Func");
    TriggerAddEventPlayerEffectUsed(gt_dispersion5, c_playerAny, "ScattergunSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sluggun
//--------------------------------------------------------------------------------------------------
bool gt_dispersion6_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    SluggunActions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_dispersion6_Init () {
    gt_dispersion6 = TriggerCreate("gt_dispersion6_Func");
    TriggerAddEventPlayerEffectUsed(gt_dispersion6, c_playerAny, "SluggunSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Med Kit
//--------------------------------------------------------------------------------------------------
bool gt_jump4_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerItems[EventPlayer()][1] -= 1;
    if ((gv_playerItems[EventPlayer()][1] <= 0)) {
        UnitBehaviorRemove(gv_playerUnits[EventPlayer()], "Medkit", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_jump4_Init () {
    gt_jump4 = TriggerCreate("gt_jump4_Func");
    TriggerAddEventUnitAbility(gt_jump4, null, AbilityCommand("DehakaHeal", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cam Drone
//--------------------------------------------------------------------------------------------------
bool gt_jump5_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerItems[EventPlayer()][2] -= 1;
    if ((gv_playerItems[EventPlayer()][2] <= 0)) {
        UnitBehaviorRemove(gv_playerUnits[EventPlayer()], "CamDrone", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_jump5_Init () {
    gt_jump5 = TriggerCreate("gt_jump5_Func");
    TriggerAddEventUnitAbility(gt_jump5, null, AbilityCommand("PlacePointDefenseDrone", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shield
//--------------------------------------------------------------------------------------------------
bool gt_jump6_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerItems[EventPlayer()][3] -= 1;
    if ((gv_playerItems[EventPlayer()][3] <= 0)) {
        UnitBehaviorRemove(gv_playerUnits[EventPlayer()], "Shield", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_jump6_Init () {
    gt_jump6 = TriggerCreate("gt_jump6_Func");
    TriggerAddEventUnitAbility(gt_jump6, null, AbilityCommand("VoodooShield", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Barrier
//--------------------------------------------------------------------------------------------------
bool gt_CreateBarrier_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_str;
    int lv_i;
    int lv_j;
    int lv_tmpInt;
    unit lv_u;
    bool lv_b;
    int lv_teamm;
    int lv_ui;

    // Variable Initialization
    lv_str = libNtve_gf_ConvertColorToString(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(7, false)));
    lv_i = 1;
    lv_j = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerItems[EventPlayer()][5] -= 1;
    if ((gv_playerItems[EventPlayer()][5] <= 0)) {
        UnitBehaviorRemove(gv_playerUnits[EventPlayer()], "Barrier", 1);
    }
    else {
    }
    UnitCreate(1, "DestructibleSpacePlatformBarrier", c_unitCreateIgnorePlacement, EventPlayer(), PointWithOffsetPolar(UnitGetPosition(EventUnit()), 1.5, UnitGetFacing(EventUnit())), UnitGetFacing(EventUnit()));
    UnitSetState(UnitLastCreated(), c_unitStateFidget, false);
    lv_u = UnitLastCreated();
    lv_ui = NewObject(lv_u);
    DeactivateObject(lv_ui);
    objects[lv_ui].activateable = false;
    collide[lv_ui].hitradius = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateBarrier_Init () {
    gt_CreateBarrier = TriggerCreate("gt_CreateBarrier_Func");
    TriggerAddEventUnitAbility(gt_CreateBarrier, null, AbilityCommand("Barrier", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Poison Tint (Create)
//--------------------------------------------------------------------------------------------------
bool gt_PoisonTintCreate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetTintColor 0,255,0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoisonTintCreate_Init () {
    gt_PoisonTintCreate = TriggerCreate("gt_PoisonTintCreate_Func");
    TriggerAddEventUnitBehaviorChange(gt_PoisonTintCreate, null, "Poisoned", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Poison Tint (Create) (Purple)
//--------------------------------------------------------------------------------------------------
bool gt_PoisonTintCreatePurple_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "SetTintColor 128,0,255");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoisonTintCreatePurple_Init () {
    gt_PoisonTintCreatePurple = TriggerCreate("gt_PoisonTintCreatePurple_Func");
    TriggerAddEventUnitBehaviorChange(gt_PoisonTintCreatePurple, null, "Poisoned2", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Poison Tint (Remove)
//--------------------------------------------------------------------------------------------------
bool gt_PoisonTintRemove_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "ClearTintColor");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoisonTintRemove_Init () {
    gt_PoisonTintRemove = TriggerCreate("gt_PoisonTintRemove_Func");
    TriggerAddEventUnitBehaviorChange(gt_PoisonTintRemove, null, "Poisoned", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Poison Tint (Remove) (Purple)
//--------------------------------------------------------------------------------------------------
bool gt_PoisonTintRemovePurple_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "ClearTintColor");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PoisonTintRemovePurple_Init () {
    gt_PoisonTintRemovePurple = TriggerCreate("gt_PoisonTintRemovePurple_Func");
    TriggerAddEventUnitBehaviorChange(gt_PoisonTintRemovePurple, null, "Poisoned2", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Damage Tags
//--------------------------------------------------------------------------------------------------
bool gt_DamageTags_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_size;
    fixed lv_angle;
    text lv_color;
    int lv_decimals;
    fixed lv_damage;

    // Variable Initialization
    lv_size = 18;

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() > 0.0))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_angle = AngleBetweenPoints(UnitGetPosition(EventUnitDamageSourceUnit()), UnitGetPosition(EventUnit()));
    lv_damage = EventUnitDamageAmount();
    if ((lv_damage >= 40.0)) {
        lv_size = 30;
    }
    else if ((lv_damage >= 20.0)) {
        lv_size = 26;
    }
    else if ((lv_damage >= 10.0)) {
        lv_size = 22;
    }
    if ((EventUnitDamageEffect() == "PoisonDamageOverTime")) {
        lv_size = 24;
        lv_angle = 90.0;
        lv_color = StringExternal("Param/Value/DDE63FDF");
    }
    else if ((EventUnitDamageEffect() == "PoisonDamageOverTimeVorpal")) {
        lv_decimals = 1;
        lv_size = 24;
        lv_angle = 90.0;
        lv_color = StringExternal("Param/Value/B4038674");
    }
    else if (((EventUnitDamageEffect() == "CircleofFireDoT") || (EventUnitDamageEffect() == "FireDamage"))) {
        lv_size = 24;
        lv_angle = 90.0;
        lv_color = StringExternal("Param/Value/DB9EAA10");
    }
    TextTagCreate((lv_color + FixedToText(EventUnitDamageAmount(), lv_decimals)), lv_size, UnitGetPosition(EventUnit()), 1.0, true, false, PlayerGroupAll());
    TextTagSetVelocity(TextTagLastCreated(), 1.25, lv_angle);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DamageTags_Init () {
    gt_DamageTags = TriggerCreate("gt_DamageTags_Func");
    TriggerAddEventUnitDamaged(gt_DamageTags, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gadgets - Buy
//--------------------------------------------------------------------------------------------------
bool gt_GadgetsBuy_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((gv_gadgetsButtons[1] == EventDialogControl()) || (gv_gadgetsButtons[2] == EventDialogControl()) || (gv_gadgetsButtons[3] == EventDialogControl()) || (gv_gadgetsButtons[4] == EventDialogControl()) || (gv_gadgetsButtons[5] == EventDialogControl()) || (gv_gadgetsButtons[6] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gadgetsButtons[1] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] >= 15)) {
        UnitBehaviorAdd(gv_playerUnits[EventPlayer()], "Barrier", gv_playerUnits[EventPlayer()], 1);
        gv_itemsBarrier[EventPlayer()] += 1;
        gf_UpdateCredits(EventPlayer(), -15);
        PlayerCreateEffectUnit(EventPlayer(), "AddBarrierCharge", gv_playerUnits[EventPlayer()]);
        SoundPlay(SoundLink("UI_KerriganUpgrades_UpgradeSelect_ButtonOnly", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if ((gv_gadgetsButtons[1] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] < 15)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/3C5A3362"), SoundLink("UI_GenericError", -1));
    }
    else if ((gv_gadgetsButtons[2] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] >= 25)) {
        UnitBehaviorAdd(gv_playerUnits[EventPlayer()], "Grenade", gv_playerUnits[EventPlayer()], 1);
        gv_itemsGrenade[EventPlayer()] += 1;
        gf_UpdateCredits(EventPlayer(), -25);
        PlayerCreateEffectUnit(EventPlayer(), "AddGrenadeCharge", gv_playerUnits[EventPlayer()]);
        SoundPlay(SoundLink("UI_KerriganUpgrades_UpgradeSelect_ButtonOnly", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if ((gv_gadgetsButtons[2] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] < 25)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/294FE6B3"), SoundLink("UI_GenericError", -1));
    }
    else if ((gv_gadgetsButtons[3] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] >= 50)) {
        UnitBehaviorAdd(gv_playerUnits[EventPlayer()], "CamDrone", gv_playerUnits[EventPlayer()], 1);
        gv_itemsCamDrone[EventPlayer()] += 1;
        gf_UpdateCredits(EventPlayer(), -50);
        PlayerCreateEffectUnit(EventPlayer(), "AddCamCharge", gv_playerUnits[EventPlayer()]);
        SoundPlay(SoundLink("UI_KerriganUpgrades_UpgradeSelect_ButtonOnly", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if ((gv_gadgetsButtons[3] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] < 50)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/4227627D"), SoundLink("UI_GenericError", -1));
    }
    else if ((gv_gadgetsButtons[4] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] >= 25)) {
        UnitBehaviorAdd(gv_playerUnits[EventPlayer()], "Shield", gv_playerUnits[EventPlayer()], 1);
        gv_itemsShield[EventPlayer()] += 1;
        gf_UpdateCredits(EventPlayer(), -25);
        PlayerCreateEffectUnit(EventPlayer(), "AddShieldCharge", gv_playerUnits[EventPlayer()]);
        SoundPlay(SoundLink("UI_KerriganUpgrades_UpgradeSelect_ButtonOnly", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if ((gv_gadgetsButtons[4] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] < 25)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/F72AA7B5"), SoundLink("UI_GenericError", -1));
    }
    else if ((gv_gadgetsButtons[5] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] >= 15)) {
        UnitBehaviorAdd(gv_playerUnits[EventPlayer()], "Medkit", gv_playerUnits[EventPlayer()], 1);
        gv_itemsMedKit[EventPlayer()] += 1;
        gf_UpdateCredits(EventPlayer(), -15);
        PlayerCreateEffectUnit(EventPlayer(), "AddMedkit", gv_playerUnits[EventPlayer()]);
        SoundPlay(SoundLink("UI_KerriganUpgrades_UpgradeSelect_ButtonOnly", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if ((gv_gadgetsButtons[5] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] < 15)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/9D43669E"), SoundLink("UI_GenericError", -1));
    }
    else if ((gv_gadgetsButtons[6] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] >= 50)) {
        UnitBehaviorAdd(gv_playerUnits[EventPlayer()], "RocketJump", gv_playerUnits[EventPlayer()], 1);
        gv_itemsRocketPack[EventPlayer()] += 1;
        gf_UpdateCredits(EventPlayer(), -50);
        PlayerCreateEffectUnit(EventPlayer(), "AddRocketJump", gv_playerUnits[EventPlayer()]);
        SoundPlay(SoundLink("UI_KerriganUpgrades_UpgradeSelect_ButtonOnly", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if ((gv_gadgetsButtons[6] == EventDialogControl()) && (gv_playerCredits[EventPlayer()] < 50)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/7F031E27"), SoundLink("UI_GenericError", -1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GadgetsBuy_Init () {
    gt_GadgetsBuy = TriggerCreate("gt_GadgetsBuy_Func");
    TriggerAddEventDialogControl(gt_GadgetsBuy, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Powerups - Init
//--------------------------------------------------------------------------------------------------
bool gt_PowerupsInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_powerups[1] = PointFromId(1390);
    gv_powerups[2] = PointFromId(1381);
    gv_powerups[3] = PointFromId(1383);
    gv_powerups[4] = PointFromId(1384);
    gv_powerups[5] = PointFromId(109);
    gv_powerups[6] = PointFromId(1388);
    gv_powerups[7] = PointFromId(962);
    gv_powerups[8] = PointFromId(963);
    gv_powerups[9] = PointFromId(964);
    gv_powerups[10] = PointFromId(965);
    gv_powerups[11] = PointFromId(2190);
    gv_powerups[12] = PointFromId(2191);
    gv_powerups[13] = PointFromId(2192);
    gv_powerups[14] = PointFromId(2193);
    gv_powerups[15] = PointFromId(2194);
    gv_powerups[16] = PointFromId(2195);
    gv_powerups[17] = PointFromId(2196);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerupsInit_Init () {
    gt_PowerupsInit = TriggerCreate("gt_PowerupsInit_Func");
    TriggerAddEventTimeElapsed(gt_PowerupsInit, 0.1, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Powerups - Periodic
//--------------------------------------------------------------------------------------------------
bool gt_PowerupsPeriodic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_powerup;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_powerupTimer -= 1;
    if ((gv_powerupTimer <= 0)) {
        gv_powerupTimer = 45;
        IntLoopBegin(1, 17);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_powerup = null;
            UnitGroupLoopBegin(UnitGroup("PickupHealth25", c_playerAny, RegionCircle(gv_powerups[IntLoopCurrent()], 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_powerup = UnitGroupLoopCurrent();
            }
            UnitGroupLoopEnd();
            if ((lv_powerup == null)) {
                UnitGroupLoopBegin(UnitGroup("PickupGrenades", c_playerAny, RegionCircle(gv_powerups[IntLoopCurrent()], 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    lv_powerup = UnitGroupLoopCurrent();
                }
                UnitGroupLoopEnd();
                if ((lv_powerup == null)) {
                    gf_PowerupCreate(gv_powerups[IntLoopCurrent()]);
                }
                else {
                }
            }
            else {
            }
        }
        IntLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerupsPeriodic_Init () {
    gt_PowerupsPeriodic = TriggerCreate("gt_PowerupsPeriodic_Func");
    TriggerEnable(gt_PowerupsPeriodic, false);
    TriggerAddEventTimePeriodic(gt_PowerupsPeriodic, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Powerups - Grenade
//--------------------------------------------------------------------------------------------------
bool gt_PowerupsGrenade_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Raynor01"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Ghost_HoldFire", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    UnitBehaviorAdd(gv_playerUnits[EventPlayer()], "Grenade", gv_playerUnits[EventPlayer()], 1);
    gv_itemsGrenade[EventPlayer()] += 1;
    gv_playerItems[EventPlayer()][0] += 1;
    PlayerCreateEffectUnit(EventPlayer(), "AddGrenadeCharge", gv_playerUnits[EventPlayer()]);
    if ((PlayerGroupHasPlayer(GameAttributePlayersForTeam(1), EventPlayer()) == true)) {
        TextTagCreate(StringExternal("Param/Value/01D8A8D7"), 28, UnitGetPosition(EventUnit()), 1.5, true, false, GameAttributePlayersForTeam(1));
    }
    else {
        TextTagCreate(StringExternal("Param/Value/AC5D0150"), 28, UnitGetPosition(EventUnit()), 1.5, true, false, GameAttributePlayersForTeam(2));
    }
    TextTagSetVelocity(TextTagLastCreated(), 0.5, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PowerupsGrenade_Init () {
    gt_PowerupsGrenade = TriggerCreate("gt_PowerupsGrenade_Func");
    TriggerAddEventUnitDamaged(gt_PowerupsGrenade, null, c_unitDamageTypeAny, c_unitDamageEither, "PickupGrenade");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barrels Periodic
//--------------------------------------------------------------------------------------------------
bool gt_BarrelsPeriodic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_barrels < 10)) {
        SpawnBarrel();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarrelsPeriodic_Init () {
    gt_BarrelsPeriodic = TriggerCreate("gt_BarrelsPeriodic_Func");
    TriggerEnable(gt_BarrelsPeriodic, false);
    TriggerAddEventTimePeriodic(gt_BarrelsPeriodic, 30.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sewers Barrel Death
//--------------------------------------------------------------------------------------------------
bool gt_SewersBarrelDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    fixed lv_uif;
    int lv_ui;

    // Variable Initialization
    lv_p = UnitGetPosition(EventUnit());
    lv_uif = UnitGetCustomValue(EventUnit(), 0);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "SewersBarrel"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_barrels -= 1;
    lv_ui = FixedToInt(lv_uif);;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SewersCreepDummy", 0, 0, lv_p);
    CreateExplosion(lv_p, WorldHeight(c_heightMapGround, lv_p), 4, 0, "VorpalInitialDamage", "linear",lv_ui,80);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SewersBarrelDeath_Init () {
    gt_SewersBarrelDeath = TriggerCreate("gt_SewersBarrelDeath_Func");
    TriggerAddEventUnitDied(gt_SewersBarrelDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Explosives Barrel Death
//--------------------------------------------------------------------------------------------------
bool gt_ExplosivesBarrelDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    fixed lv_uif;
    int lv_ui;

    // Variable Initialization
    lv_p = UnitGetPosition(EventUnit());
    lv_uif = UnitGetCustomValue(EventUnit(), 0);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ExplosiveBarrel"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_barrels -= 1;
    lv_ui = FixedToInt(lv_uif);;
    PlayerCreateEffectPoint(libNtve_gf_KillingPlayer(), "ExplodingBarrelSearch", lv_p);
    CreateExplosion(lv_p, WorldHeight(c_heightMapGround, lv_p), 4.5, 4, "FragDamage", "linear",lv_ui,115);
    RemoveObject(lv_ui,"");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExplosivesBarrelDeath_Init () {
    gt_ExplosivesBarrelDeath = TriggerCreate("gt_ExplosivesBarrelDeath_Func");
    TriggerAddEventUnitDied(gt_ExplosivesBarrelDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Medkit
//--------------------------------------------------------------------------------------------------
bool gt_RemoveMedkit_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "DehakaHealSmall") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "DehakaHealSmall", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveMedkit_Init () {
    gt_RemoveMedkit = TriggerCreate("gt_RemoveMedkit_Func");
    TriggerAddEventUnitDamaged(gt_RemoveMedkit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Impact
//--------------------------------------------------------------------------------------------------
bool gt_Impact_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "FireMissile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetPropertyFixed(EventUnit(), c_unitPropHeight, c_unitPropCurrent) > 0.5)) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropHeight, 0.5);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Impact_Init () {
    gt_Impact = TriggerCreate("gt_Impact_Func");
    TriggerAddEventUnitProperty(gt_Impact, null, c_unitPropHeight);
}

//--------------------------------------------------------------------------------------------------
// Trigger: -Pause
//--------------------------------------------------------------------------------------------------
bool gt_Pause_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Timer, false);
    TriggerEnable(gt_GameTimer, false);
    TriggerEnable(gt_PowerupsPeriodic, false);
    TriggerEnable(gt_BarrelsPeriodic, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Pause_Init () {
    gt_Pause = TriggerCreate("gt_Pause_Func");
    TriggerAddEventChatMessage(gt_Pause, c_playerAny, "-p23", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scanner Sweep
//--------------------------------------------------------------------------------------------------
bool gt_ScannerSweep_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin);

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ScannerSweepUsed(lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScannerSweep_Init () {
    gt_ScannerSweep = TriggerCreate("gt_ScannerSweep_Func");
    TriggerAddEventPlayerEffectUsed(gt_ScannerSweep, c_playerAny, "ScanEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scanner Spawn
//--------------------------------------------------------------------------------------------------
bool gt_ScannerSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin);

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ScannerSweepUsed(lv_p);
    gv_streaksEarned[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)][0][0] -= 1;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScannerVessel", 0, lv_p, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)));
    UnitSetHeight(UnitLastCreated(), 10.0, 6.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScannerSpawn_Init () {
    gt_ScannerSpawn = TriggerCreate("gt_ScannerSpawn_Func");
    TriggerAddEventPlayerEffectUsed(gt_ScannerSpawn, c_playerAny, "ItemScannerSweep");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Drop Successful
//--------------------------------------------------------------------------------------------------
bool gt_SupplyDropSuccessful_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;

    // Variable Initialization
    lv_p = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MULE"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_PowerupCreate(lv_p);
    gf_PowerupCreate(lv_p);
    gf_PowerupCreate(lv_p);
    gf_PowerupCreate(lv_p);
    gf_PowerupCreate(lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyDropSuccessful_Init () {
    gt_SupplyDropSuccessful = TriggerCreate("gt_SupplyDropSuccessful_Func");
    TriggerAddEventUnitDied(gt_SupplyDropSuccessful, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Drop
//--------------------------------------------------------------------------------------------------
bool gt_SupplyDrop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), "CalldownMULECreateUnit", EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    gv_streaksEarned[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)][0][1] -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyDrop_Init () {
    gt_SupplyDrop = TriggerCreate("gt_SupplyDrop_Func");
    TriggerAddEventPlayerEffectUsed(gt_SupplyDrop, c_playerAny, "SupplyDropEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Atuo Machine Gun
//--------------------------------------------------------------------------------------------------
bool gt_railgun32_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization
    lv_p = UnitGetPosition(EventUnit());
    lv_u = EventUnitTarget();

    // Actions
    if (!runActions) {
        return true;
    }

    MachineGun2Actions(lv_u, lv_p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_railgun32_Init () {
    gt_railgun32 = TriggerCreate("gt_railgun32_Func");
    TriggerAddEventUnitAttacked2(gt_railgun32, null, "AutoTurretWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Turret Created
//--------------------------------------------------------------------------------------------------
bool gt_AutoTurretCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_ui;

    // Variable Initialization
    lv_u = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AutoTurret2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ui = NewObject(lv_u);
    objects[lv_ui].z = WorldHeight(c_heightMapGround,UnitGetPosition(lv_u)) + 5;
    UnitSetHeight(lv_u, objects[lv_ui].z, 0);
    //libNtve_gf_SendActorMessageToUnit(lv_u, "HaloSetColor " + lv_str);
    collide[lv_ui].hitradius = 1;
    bounce[lv_ui].restitution = 0.1;
    bounce[lv_ui].bouncefunc = BounceLandable;
    objects[lv_ui].gravity = true;
    bounce[lv_ui].landable = true;
    bounce[lv_ui].radius = 0.4;
    objects[lv_ui].centerz = 0.35;
    objects[lv_ui].mass = 1000;
    objects[lv_ui].activateable = false;
    gv_streaksEarned[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)][0][2] -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoTurretCreated_Init () {
    gt_AutoTurretCreated = TriggerCreate("gt_AutoTurretCreated_Func");
    TriggerAddEventUnitRegion(gt_AutoTurretCreated, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Predator AI
//--------------------------------------------------------------------------------------------------
bool gt_PredatorAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_p;
    unit lv_t;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_p = UnitGetOwner(lv_u);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_t = UnitGroupClosestToPoint(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("Raynor01", "PredatorSentry", "", lv_p, c_unitAllianceEnemy, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterDetector - 32))), 0), UnitGetPosition(lv_u));
    UnitIssueOrder(lv_u, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_t)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PredatorAI_Init () {
    gt_PredatorAI = TriggerCreate("gt_PredatorAI_Func");
    TriggerAddEventPlayerEffectUsed(gt_PredatorAI, c_playerAny, "PredatorAI");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Predator Spawn
//--------------------------------------------------------------------------------------------------
bool gt_PredatorSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_ui;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PredatorSentry", 0, EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), UnitGetPosition(gv_playerUnits[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)]));
    lv_u = UnitLastCreated();
    lv_ui = NewObject(lv_u);
    objects[lv_ui].z = WorldHeight(c_heightMapGround,UnitGetPosition(lv_u)) + 5;
    UnitSetHeight(lv_u, objects[lv_ui].z, 0);
    //libNtve_gf_SendActorMessageToUnit(lv_u, "HaloSetColor " + lv_str);
    collide[lv_ui].hitradius = .8;
    bounce[lv_ui].restitution = 0.1;
    bounce[lv_ui].bouncefunc = BounceLandable;
    objects[lv_ui].gravity = true;
    bounce[lv_ui].landable = true;
    bounce[lv_ui].radius = 0.4;
    objects[lv_ui].centerz = 0.35;
    objects[lv_ui].mass = 3;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PredatorSentry", 0, EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), UnitGetPosition(gv_playerUnits[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)]));
    lv_u = UnitLastCreated();
    lv_ui = NewObject(lv_u);
    objects[lv_ui].z = WorldHeight(c_heightMapGround,UnitGetPosition(lv_u)) + 5;
    UnitSetHeight(lv_u, objects[lv_ui].z, 0);
    //libNtve_gf_SendActorMessageToUnit(lv_u, "HaloSetColor " + lv_str);
    collide[lv_ui].hitradius = .8;
    bounce[lv_ui].restitution = 0.1;
    bounce[lv_ui].bouncefunc = BounceLandable;
    objects[lv_ui].gravity = true;
    bounce[lv_ui].landable = true;
    bounce[lv_ui].radius = 0.4;
    objects[lv_ui].centerz = 0.35;
    objects[lv_ui].mass = 3;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PredatorSentry", 0, EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin), UnitGetPosition(gv_playerUnits[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)]));
    lv_u = UnitLastCreated();
    lv_ui = NewObject(lv_u);
    objects[lv_ui].z = WorldHeight(c_heightMapGround,UnitGetPosition(lv_u)) + 5;
    UnitSetHeight(lv_u, objects[lv_ui].z, 0);
    //libNtve_gf_SendActorMessageToUnit(lv_u, "HaloSetColor " + lv_str);
    collide[lv_ui].hitradius = .8;
    bounce[lv_ui].restitution = 0.1;
    bounce[lv_ui].bouncefunc = BounceLandable;
    objects[lv_ui].gravity = true;
    bounce[lv_ui].landable = true;
    bounce[lv_ui].radius = 0.4;
    objects[lv_ui].centerz = 0.35;
    objects[lv_ui].mass = 3;
    gv_streaksEarned[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)][1][1] -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PredatorSpawn_Init () {
    gt_PredatorSpawn = TriggerCreate("gt_PredatorSpawn_Func");
    TriggerAddEventPlayerEffectUsed(gt_PredatorSpawn, c_playerAny, "ItemPredators");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guardians Grasp
//--------------------------------------------------------------------------------------------------
bool gt_GuardiansGrasp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_c;
    unit lv_t;

    // Variable Initialization
    lv_c = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_t = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    GuardianGrasp(lv_c,lv_t);
    UnitBehaviorSetDurationRemaining(lv_t, "FragTimedLife", 1.4);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuardiansGrasp_Init () {
    gt_GuardiansGrasp = TriggerCreate("gt_GuardiansGrasp_Func");
    TriggerAddEventPlayerEffectUsed(gt_GuardiansGrasp, c_playerAny, "GuardianGrasp");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Guardian Spawn
//--------------------------------------------------------------------------------------------------
bool gt_GuardianSpawn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "GuardianSentry", 0, EventPlayer(), UnitGetPosition(gv_playerUnits[EventPlayer()]));
    UnitIssueOrder(UnitLastCreated(), OrderTargetingUnit(AbilityCommand("move", 0), gv_playerUnits[EventPlayer()]), c_orderQueueReplace);
    gv_streaksEarned[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)][1][0] -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GuardianSpawn_Init () {
    gt_GuardianSpawn = TriggerCreate("gt_GuardianSpawn_Func");
    TriggerAddEventPlayerEffectUsed(gt_GuardianSpawn, c_playerAny, "ItemGuardian");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order Napalm Strike
//--------------------------------------------------------------------------------------------------
bool gt_OrderNapalmStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_pc;
    point lv_pt;
    region lv_rgn;
    int lv_x;
    int lv_y;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin);
    lv_pc = UnitGetPosition(gv_playerUnits[lv_player]);
    lv_pt = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_rgn = gv_mapRegion;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "Firebird", 0, lv_player, GetRouteStart(lv_pc,lv_pt), 270.0);
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), GetRouteEnd(lv_pc,lv_pt)), c_orderQueueReplace);
    gv_streaksEarned[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)][1][2] -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OrderNapalmStrike_Init () {
    gt_OrderNapalmStrike = TriggerCreate("gt_OrderNapalmStrike_Func");
    TriggerAddEventPlayerEffectUsed(gt_OrderNapalmStrike, c_playerAny, "HelfireStrikeInitEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Napalm
//--------------------------------------------------------------------------------------------------
bool gt_DropNapalm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization
    lv_u = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((PathingType(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster))) != c_pathingUnpathable))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DropNapalm(lv_u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropNapalm_Init () {
    gt_DropNapalm = TriggerCreate("gt_DropNapalm_Func");
    TriggerAddEventPlayerEffectUsed(gt_DropNapalm, c_playerAny, "DropNapalm");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Napalm Over
//--------------------------------------------------------------------------------------------------
bool gt_NapalmOver_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Firebird"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NapalmOver_Init () {
    gt_NapalmOver = TriggerCreate("gt_NapalmOver_Func");
    TriggerAddEventUnitRegion(gt_NapalmOver, null, RegionFromId(5), false);
    TriggerAddEventUnitRegion(gt_NapalmOver, null, RegionFromId(10), false);
    TriggerAddEventUnitRegion(gt_NapalmOver, null, RegionFromId(22), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kinetic Impact
//--------------------------------------------------------------------------------------------------
bool gt_KineticImpact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    int lv_play;

    // Variable Initialization
    lv_p = EventPlayerEffectUsedPoint(c_effectLocationCasterUnit);
    lv_play = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Actions
    if (!runActions) {
        return true;
    }

    CreateExplosion(lv_p,WorldHeight(c_heightMapGround, lv_p), 5, 3, "FragDamage", "linear",lv_play,  150);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KineticImpact_Init () {
    gt_KineticImpact = TriggerCreate("gt_KineticImpact_Func");
    TriggerAddEventPlayerEffectUsed(gt_KineticImpact, c_playerAny, "KineticSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_initphysics_Init();
    gt_LoopTrigger_Init();
    gt_MeleeInitialization_Init();
    gt_PlayerSelection_Init();
    gt_FlagCarrierDies_Init();
    gt_PlayerDies_Init();
    gt_Suicide_Init();
    gt_MultikillTimerExpires_Init();
    gt_GameTimer_Init();
    gt_RespawnTimer_Init();
    gt_TipsInit_Init();
    gt_Economics_Init();
    gt_EnterReweaponTeam1_Init();
    gt_EnterReweaponTeam2_Init();
    gt_LeaversTeamLeft_Init();
    gt_SewersSlowingWater_Init();
    gt_Initks_Init();
    gt_initOverflagUI2_Init();
    gt_InitItems_Init();
    gt_ShopItemPurchased_Init();
    gt_Timer_Init();
    gt_MapVote_Init();
    gt_MenuTabBetween_Init();
    gt_WeaponsChange_Init();
    gt_WeaponsActivate_Init();
    gt_WeaponsActivateF1_Init();
    gt_AddOnsChange_Init();
    gt_AddOnsUnequip_Init();
    gt_InterfaceCancel_Init();
    gt_InterfaceCancelEscape_Init();
    gt_TalentsChange_Init();
    gt_ShopActivate_Init();
    gt_ShopActivateF2_Init();
    gt_SkinsChange_Init();
    gt_StreaksChange_Init();
    gt_Tab_Init();
    gt_Untab_Init();
    gt_StealFlagTeam1_Init();
    gt_StealFlagTeam2_Init();
    gt_ScoreTeam1_Init();
    gt_ScoreTeam2_Init();
    gt_ReturnFlagTeam1_Init();
    gt_ReturnFlagTeam2_Init();
    gt_InitOverheadFlags_Init();
    gt_TimedDeath3_Init();
    gt_jump12_Init();
    gt_jump8_Init();
    gt_SmallExplosion_Init();
    gt_FragExplosion_Init();
    gt_grenade3_Init();
    gt_toxic3_Init();
    gt_toxic4_Init();
    gt_toxic5_Init();
    gt_desecrate5_Init();
    gt_desecrate9_Init();
    gt_desecrate10_Init();
    gt_HellfireScatter_Init();
    gt_ShrapExplosion_Init();
    gt_desecrate6_Init();
    gt_desecrate7_Init();
    gt_MortarExplosion_Init();
    gt_ShardExplosion_Init();
    gt_desecrate8_Init();
    gt_railgun27_Init();
    gt_railgun29_Init();
    gt_railgun30_Init();
    gt_railgun12_Init();
    gt_railgun13_Init();
    gt_railgun14_Init();
    gt_railgun28_Init();
    gt_railgun31_Init();
    gt_dispersion4_Init();
    gt_dispersion5_Init();
    gt_dispersion6_Init();
    gt_jump4_Init();
    gt_jump5_Init();
    gt_jump6_Init();
    gt_CreateBarrier_Init();
    gt_PoisonTintCreate_Init();
    gt_PoisonTintCreatePurple_Init();
    gt_PoisonTintRemove_Init();
    gt_PoisonTintRemovePurple_Init();
    gt_DamageTags_Init();
    gt_GadgetsBuy_Init();
    gt_PowerupsInit_Init();
    gt_PowerupsPeriodic_Init();
    gt_PowerupsGrenade_Init();
    gt_BarrelsPeriodic_Init();
    gt_SewersBarrelDeath_Init();
    gt_ExplosivesBarrelDeath_Init();
    gt_RemoveMedkit_Init();
    gt_Impact_Init();
    gt_Pause_Init();
    gt_ScannerSweep_Init();
    gt_ScannerSpawn_Init();
    gt_SupplyDropSuccessful_Init();
    gt_SupplyDrop_Init();
    gt_railgun32_Init();
    gt_AutoTurretCreated_Init();
    gt_PredatorAI_Init();
    gt_PredatorSpawn_Init();
    gt_GuardiansGrasp_Init();
    gt_GuardianSpawn_Init();
    gt_OrderNapalmStrike_Init();
    gt_DropNapalm_Init();
    gt_NapalmOver_Init();
    gt_KineticImpact_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomScript();
    InitTriggers();
}
